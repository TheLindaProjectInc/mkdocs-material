{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Home","text":"<p>Welcome  to the official documentation for Metrixcoin.</p>"},{"location":"#getting-started","title":"Getting Started","text":"<p>New to Metrixcoin? Start here!</p> <ul> <li>Installation: Install the Metrixcoin wallet</li> <li>First Run: Getting online and in sync</li> <li>Basic Operation: Basic wallet functionality</li> </ul>"},{"location":"#wallets","title":"Wallets","text":"<p>We have several wallet options available depending on your needs.</p> <p>Altitude Electron Wallet for Windows, Linux &amp; Mac (GUI Desktop Release)</p> <p>Metrix Coin Core for Windows, Linux &amp; Mac</p> <p>MyStakingWallet, Paid Service for 24/7 VPS + Support</p> <p>MetriMask chrome extension</p>"},{"location":"#reference","title":"Reference","text":"<p>Find information on Metrixcoin products:</p> <ul> <li>Altitude: The Metrixcoin GUI Wallet</li> <li>MetriMask: The Metrixcoin Chrome Wallet</li> <li>Core: The Metrixcoin Blockchain</li> <li>MyStakingWallet: The Non-Custodial Staking Service</li> <li>MyNodePool: The Metrix managed pool service</li> <li>Wage Street Gaming: Play Games Earn Metrix</li> </ul>"},{"location":"#developers","title":"Developers","text":""},{"location":"#getting-help","title":"Getting Help","text":"<p>Check out the Troubleshooting FAQ to see if your question has already been answered.</p> <p>Official channels</p> <p>Only the channels listed below are officially maintained and staffed by the metrixcoin team. Currently, we do not moderate any other communities. Please beware of potential scams or frauds on any unofficial communities.</p>"},{"location":"#discord","title":"Discord","text":"<p>The Metrixcoin Discord server is the primary gathering spot for announcements, user support and other discussion about Metrixcoin. </p> <p>No DMs</p> <p>Metrixcoin core team members will never initiate direct messages to users. If a random user imitating the core team or any of the community members sends you a DM don't hesitate to report it in our official Discord channel.</p>"},{"location":"#youtube","title":"YouTube","text":"<p>The Metrixcoin YouTube channel features videos that teach you how to use Metrixcoin products, news, announcements and interviews with members of the Metrixcoin community.</p>"},{"location":"#github","title":"Github","text":"<p>The Github contains a wealth of information and code examples for anyone looking to utilise our products. It also contains all the core blockchain code. Each repository also contains sections for reporting issues with any of the products.</p>"},{"location":"#contribute","title":"Contribute","text":"<p> Report a Bug | Help us squash those bugs Metrix Core | Altitude | MetriMask</p> <p> Suggest a New Feature | We need your ideas!</p> <p> Documentation is being worked on! Some pages may be incomplete or not exist yet.</p>"},{"location":"faq/","title":"FAQ","text":""},{"location":"faq/#why-is-my-balance-0-or-not-fully-displayed-when-i-want-to-send-coins","title":"Why is my balance 0 or not fully displayed when I want to send coins?","text":"<p>Congratulations! You just received new MRX coins through a stake!</p> <p>After a stake happens, inputs above 1 million will split in half and will display as a payment to yourself in your wallet.</p> <p>The balance shows 0 or less then normal because the staked input needs 960 confirmations on the chain to become spendable again. After these confirmations you will see the coins reflected in your balance.</p> <p>Also check on the Explorer if the coins appear in your nominated address. When you scroll down your tranasactions will likely display \"coin stake\". </p> <p>Raise a ticket on the Discord if this is not reflected in that way. </p>"},{"location":"faq/#how-do-i-buy-metrixcoin","title":"How do i buy Metrixcoin?","text":"<p>Register on a Bitcoin broker like Coinbase, Litebit(for European users) or any other trusted broker. You can Google for one that is available for your region.</p> <p>There are now 2 options to get Metrixcoin</p>"},{"location":"faq/#manual-purchase-via-exchanges","title":"Manual purchase via exchanges","text":"<ul> <li>Register on an exchange where Metrixcoin is available. The list of available exchanges is right above the FAQ section.</li> <li>Buy bitcoin on the selected broker and send it to your btc deposit address on the exchange of your choice. You usually find this on the exchange under balances --&gt; btc --&gt; deposit</li> <li>Go to the markets section on the exchange and search for MRX in the markets searchbar, select the BTC/MRX pair.</li> <li>If you click the buy button you can now select the desired price and amount of coins you want to buy and place your order. </li> <li>Wait until your order is filled and withdraw your Metrixcoin to your own Metrixcoin wallet, NEVER keep your coins on the exchange.</li> <li>To withdraw your coins from the exchange go to balances-&gt; Metrixcoin, click on Metrixcoin and select withdraw, enter your own Metrixcoin wallet address from Altitude, MyStakingWallet or MetriMask and withdraw your coins. </li> </ul>"},{"location":"faq/#using-the-buymetrixcoincom-site","title":"Using the buy.metrixcoin.com site","text":"<ul> <li>Navigate to buy.metrixcoin.com</li> <li>Input a Metrix address, an address can be obtained from any of our wallet options. The site will generate a BTC deposit address.</li> <li>Buy Bitcoin on the selected broker and send it to your btc deposit address generated in the step above.</li> <li>Once the BTC transaction is confirmed the MRX will arrive in your nominated MRX address.</li> </ul>"},{"location":"altitude/backup/","title":"Backup","text":"<p>Each public address on the blockchain has a unique key to access it. This is the Private key. When you hold this key you can access that public address at any time and place as long as you have a proper wallet.</p>"},{"location":"altitude/backup/#obtain-a-private-key","title":"Obtain a private key","text":"<p>To obtain a private key you have to execute the following steps.</p> <ul> <li>First copy the public address for which you want to retrieve the private key.</li> <li>Fully unlock your encrypted wallet. Go to Encrypt -&gt; Unlock wallet and unlock your wallet. Uncheck for Unlock for staking only.</li> </ul> <p></p> <ul> <li>Now go to Tools -&gt; Debug console</li> <li>Type dumpprivkey yourwalletaddresshere**** and hit enter. For example:</li> </ul> <p></p> <ul> <li>Copy the output and keep it somewhere save. This is the private key of the entered public address.</li> </ul> <p>CAUTION! Never share your private keys! People having access to your private key, can obtain access to your wallet and can steal your coins.</p>"},{"location":"altitude/backup/#import-a-private-key","title":"Import a private key","text":"<p>The importprivkey command assists you with importing a wallet address into a new wallet.dat file. This can be usefull incase your wallet.dat get's corrupted or after a system failure.</p> <p>The steps below describe how you can import a private key into an excisting wallet.</p> <ul> <li>Make sure your wallet is fully unlocked. Go to Encrypt -&gt; Unlock wallet and unlock your wallet. Uncheck for Unlock for staking only.</li> <li>Go to Tools -&gt; Debug Console </li> <li>Type following command: importprivkey yourprivatekeyhere. For example:</li> </ul> <p></p> <ul> <li>after the cursor returns close altitude and reopen it to see the imported address.</li> </ul>"},{"location":"altitude/basicfunctions/","title":"Basic Functions","text":"<p>This document will cover a few of the basic wallet functions available within Altitude.</p>"},{"location":"altitude/basicfunctions/#accounts","title":"Accounts","text":"<p>The accounts associated with the wallet can be viewed from the main dashboard tab. Accounts that contain funds or have been given a label will appear here at all times, the visibility of emtpy unnamed account can be toggled.</p> <p></p> <p>To create a new address via the Add Account button, just give it a label.</p> <p></p>"},{"location":"altitude/basicfunctions/#receiving","title":"Receiving","text":"<p>To receive funds you will need to provide the sender your address. Click the account in the dashboard to display your address that can be copied to clipboard.</p> <p></p> <p>This account dialog also provides access to transactional information for this address.</p>"},{"location":"altitude/basicfunctions/#sending","title":"Sending","text":"<p>As the name suggests sending funds is all completed through this tab. In its simplest form, to send funds simply fill in the Pay To, Amount field's and click Send. The wallet will automatically select the coins inputs to cover the amount required as well as the transaction fee needed.</p> <p></p> <p>If you click Send whilst the wallet is locked, you will be prompted for the passphrase to continue the transaction.</p> <p>For advanced sending and input selection see Coin Control.</p>"},{"location":"altitude/basicfunctions/#transactions","title":"Transactions","text":"<p>This is simply a log of transactional activity completed by this wallet. Right clicking any of the transactions gives the option to copy some of the transaction attributes.</p> <p></p> <p>Clicking the small copy page button in the top right, copies the transactions as tabular information to the clipboard. This can then be pasted into the spreadsheet application of your choice.</p>"},{"location":"altitude/basicfunctions/#staking","title":"Staking","text":"<p>See the Staking documentation.</p>"},{"location":"altitude/basicfunctions/#governor-node","title":"Governor Node","text":"<p>See the Governor Node documentation.</p>"},{"location":"altitude/basicfunctions/#block-explorer","title":"Block Explorer","text":"<p>Search your local copy of the blockchain for transactional hashes, block hashes, block numbers etc.</p> <p></p>"},{"location":"altitude/basicfunctions/#coin-control-features","title":"Coin Control Features","text":"<p>For more advanced sending and coin selection options, clicking the coin control toggle button shows/hides the ability to select specific inputs and to specify a custom change address.</p> <p>Think of Inputs as bundles of coins that have been received in individual transactions. </p> <p>In the example below, if Bob wants to send Dave 300 MRX, multiple inputs must be selected. These will be combined in the transaction and Dave will receive them as a single Output.</p> <p>If Dave then wants to send 300 MRX to Jane, he need only select a single input in his wallet, as they were all received together.</p> <p></p> <p>For the sake of simplicity fees are ignored in this example. Fees are deducted from the total to send in the case of input selection. In the real world Dave would actually receive 299.999 MRX in this example. The totals will always be shown in Altitude above the Send button.</p> <p>When multiple inputs are available to select they appear in the inputs dialog as below. </p>"},{"location":"altitude/basicfunctions/#change-addresses","title":"Change addresses","text":"<p>When the input amount is larger then the amount the user wants to send, the remaining coins are returned as change. </p> <p>Continuing the example above. If Bob wants to send Dave 250 MRX, he still needs to select both inputs to make the required amount. But the remaining coins from those 2 inputs need to get returned.</p> <p></p> <p>In a normal scenario, the wallet auto assigns a new change address for these coins to be accepted in, this address then becomes part of the wallet.dat file (Another reason regular backups are advised).</p> <p>Altitude also allows the change address to be user specified. If the wallet is aware of the address and a label is assigned this will be displayed alongside.</p> <p></p>"},{"location":"altitude/basicfunctions/#coin-control-staking","title":"Coin Control &amp; Staking","text":"<p>Using the coin control input selection is commonly used to \"bundle\" coins into larger inputs, therefore increasing your coins weight against the network.</p> <p>This involves simply selecting the inputs you want to bundle together, then sending them back to yourself. it will appear in your wallet as a Payment to Self, the only deduction you should see is the fee.</p>"},{"location":"altitude/firstrun/","title":"Altitude First Run","text":"<p>This is a list of tasks and knowledge we would consider to be essential to your first-run wallet experience. The majority of these tasks relate to securing your wallet and ensuring that you have recovery options available should system failure or wallet corruption occur.</p>"},{"location":"altitude/firstrun/#dashboard","title":"Dashboard","text":"<p>On the first launch of your Altitude wallet you will be presented with a dashboard.</p> <p></p> <p>On first run the important bits are highlighted.  - You should have peers connected, if you have less than 10 here you probably have connectivity issues. - Ensure your wallet is syncronising with the blockchain. This block number should continue to increment as blocks are downloaded. - Time since last block, is when the last block was received. If fully syncronised, this can change between a few seconds and a few minutes.</p> <p>If any of the above items doesn't change for a while, your wallet may have stopped syncing. Check the Troubleshooting section for tips on getting going again.</p>"},{"location":"altitude/firstrun/#language-selection","title":"Language Selection","text":"<p>To display Altitude in your native tongue click File &gt; Language.</p> <p></p>"},{"location":"altitude/firstrun/#currency-selection","title":"Currency Selection","text":"<p>To display Altitude balances in a currency other than MRX click File &gt; Currency.</p> <p></p>"},{"location":"altitude/firstrun/#wallet-security","title":"Wallet Security","text":"<p>Your wallet contains the private keys to your funds. So protecting these from both theft and malfunctions is as important as protecting your regular bank details. In the banking industry fund security falls on the issuing bank, in the Crypto world this is all in the hands of the user.</p> <p>In the case of wallets, you are the only one with access to the private keys, so steps should be takes to ensure their security.</p> <p>Encryption</p> <p>Encrypt your wallet!!</p> <p>This is the most fundamental of wallet security steps, and ensures that if your wallet.dat file is obtained, accessing the keys within is not easily possible.</p> <ol> <li>Click Encrypt &gt; Encrypt Wallet.</li> <li>Enter a complex passphrase and confirm it.</li> <li>Click Encrypt.</li> </ol> <p>Wallet passphrases are used for a lot of wallet functions, so this should be something complex but memorable. A list of random words is generally considered good practice, try and steer away from birthdays, locations, names. Or maybe try this Mnemonic generator</p> <p>Once set, the Encrypted icon turns to a green padlock. </p> <p>Backup</p> <p>Taking a backup of the wallet ensures that you have protection in the event of technical issues. PC malfunction, corruption, accidental wallet deletion/overwrites are all things we have seen before. So ensuring a good backup strategy, means your funds are always recoverable.</p> <ol> <li>Click File &gt; Backup Wallet.</li> <li>Navigate to a directory on the PC. Enter a filename, its a good idea to put a date in this, so you know when it was taken. e.g. 040220_metrix_wallet.dat</li> <li>Click Save.</li> </ol> <p>Good backup strategy means keeping this file in a few different places. If you only store it on the local PC, the hard disk fails and is unrecoverable, what good is the backup! Also ensure you have at least one copy externally (USB key/HDD).</p> <p>Keep in mind, that if you generate new addresses in the wallet, a new backup should be taken. If you send funds out and receive coins back into a \"change\" address this also counts as a new address.</p> <p>Restoring</p> <p>If you have the wallet.dat file then restoration is simple. 1. Close Altitude. 2. Copy the wallet.dat backup into the Metrix data directory. If a wallet.dat already exists in there rename that first. 3. Start Altitude. 4. Ensure you can unlock/relock the wallet. 5. If the blockchain is fully in sync then any coins will already be visible.</p> <p>To backup and restore using private keys, please follow the instruction in the Metrix core security section.</p>"},{"location":"altitude/governor/","title":"Governor","text":"<p>New on the Metrixcoin blockchain are governor nodes, users running a governor node are given a vote on blockchain and budget proposals, or may submit a proposal themselves.</p>"},{"location":"altitude/governor/#requirements","title":"Requirements","text":"<ul> <li>Metrixcoin altitude wallet </li> <li>7.5 million spendable Metrixcoins as collateral</li> <li>a bit of Metrix extra to pay for fees</li> </ul>"},{"location":"altitude/governor/#setting-up-a-governor-node","title":"Setting up a Governor Node","text":"<p>Setting up a governor node is made fairly easy, when in altitude you press the governance tab in the left upper corner under the smaller Metrix logo. In the main screen a button appears which says \u201cenroll\u201d now just click the button and the 7.5 million collateral for the node will be sent to a contract address. (Make sure you have 20+ MRX for the fees next to the colletoral) This meaning the collateral for the node will not be in your wallet and thus will not show in your balance. The node will start running after 15 confirmations.</p>"},{"location":"altitude/governor/#rewards","title":"Rewards","text":"<p>A governor node has a fixed reward, the first reward after starting the node can take up to 96 hours, after the first reward an expected reward will be received every ~48 hours while the governor node is running, the altitude wallet does not have to be online to receive rewards because the rewards are being sent to you from the governor contract. The annual return of a governor node is the same as the staking rewards. 5% annually of which 10% (0.5% of the total reward) is sent to the developers funds.</p>"},{"location":"altitude/governor/#voting-system","title":"Voting System","text":"<p>If a proposal is submitted the governor node holders may vote yes or no on the proposal, for budget proposals a majority of 10% is needed and for blockchain proposals a majority of 51% is needed for the proposal to pass. Every node holder can submit a proposal, the cost for this is 600000 MRX and these will be burned when the voting is done. For a governor node holder being able to vote, the governor node has to be online for at least 28 days. To keep the governor node online a node holder has to vote at least once a month, if there are no proposals to vote on the node holder has to send a ping which is done in the governance tab on the main page by pressing \u201csend active ping\u201d this will cost about 15 MRX. There is a minimum of 100 active governor nodes needed for a proposal to be submitted and voted on.</p>"},{"location":"altitude/governor/#notes","title":"Notes","text":"<ul> <li>To unenroll your governor node just click \u201cunenroll\u201d in the governance tab, the 7.5m MRX collateral is sent back to you practically instantly.</li> <li>For more technical details  https://metrixcoin.medium.com/decentralized-governance-protocol-dgp-on-the-metrix-block-chain-783fdbd0618d</li> </ul>"},{"location":"altitude/install/","title":"Installation","text":"<p>Most modern day PC's can run the Altitude GUI if running a supported operating system.</p> <p>Altitude is available for a variety of operating systems, the following have pre-made installation binaries available (Please consult with the Altitude Github if you wish to compile for other operating systems).</p> <ul> <li>Windows (x86 &amp; x64)</li> <li>Linux x64 (AppImage supported OS)</li> <li>Mac OS x64</li> </ul>"},{"location":"altitude/install/#minimum-requirements","title":"Minimum Requirements","text":"<p>These are considered the minimum requirements to ensure your system is able to perform blockchain syncronisation and operations effectively. The application may still run on lower specification machines, but good performance cannot be guaranteed.</p> <ul> <li>1GB memory</li> <li>10GB free HDD space</li> </ul>"},{"location":"altitude/install/#installation_1","title":"Installation","text":"<p>The installation files for all methods below can be obtained from the Altitude Github.</p>"},{"location":"altitude/install/#windows","title":"Windows","text":"<ol> <li>Download the version of Altitude required for your OS architecture.</li> <li>Click Run on the Windows signature verification prompt.</li> <li>Select the installation option for who you wish to install for, this selection decides where the instalaltion files are placed.<ul> <li>Anyone who uses this computer (this will install into the program files directory, and be available for all users of the machine)</li> <li>Only for me (a per user installation, this is the default)</li> </ul> </li> <li>Confirm the destination folder path.</li> <li>Click Install.</li> <li>Click Finish, leave the checkbox selected to start Altitude.</li> <li>When the wallet starts it will obtain connections to the network and begin syncing the blockchain. (A full sync may take a few hours)</li> </ol>"},{"location":"altitude/install/#linux","title":"Linux","text":"<ol> <li>Download the Linux version of Altitude.</li> <li>Make the AppImage executable by right clicking the file and select Properties.</li> <li>Then select the Permissions tab and tick the box that says \"Allow executing file as program\".</li> <li>Then close the window and double click the AppImage file to install Altitude. <p>Alternatively, if you prefer the command line, you can simply use <code>chmod u+x Altitude-linux-x64.AppImage</code> to make it executable</p> </li> <li>When the wallet starts it will obtain connections to the network and begin syncing the blockchain. (A full sync may take a few hours)</li> </ol>"},{"location":"altitude/install/#mac-os","title":"Mac OS","text":"<ol> <li>Download the OSX version of Altitude.</li> <li>Run the downloaded dmg and drag the Altitude icon to your Applications folder when prompted.</li> <li>The first time you run Altitude you will need to right click on the appliaction icon and select Open from the menu.</li> <li>Then select Open from the displayed window.</li> <li>When the wallet starts it will obtain connections to the network and begin syncing the blockchain. (A full sync may take a few hours)</li> </ol>"},{"location":"altitude/install/#data-directories","title":"Data Directories","text":"<p>These are the default installation directories of Altitude and Metrix Core.</p>"},{"location":"altitude/install/#windows_1","title":"Windows","text":"<p>Use the start menu, run bar or Windows explorer address bar to navigate.</p> <p>Altitude : %AppData%\\altitude-metrix-wallet </p> <p>Metrix Core : %AppData%\\MetrixCoin</p>"},{"location":"altitude/install/#linux_1","title":"Linux","text":"<p>These are the default installation directories when installed from the AppImage.</p> <p>Altitude : ~/.config/altitude-metrix-wallet</p> <p>Metrix Core : ~/.metrixcoin</p>"},{"location":"altitude/install/#mac-os_1","title":"MAC OS","text":"<p>These are the default installation directories when installed from the DMG.</p> <p>Altitude : ~/Library/Application Support/altitude-metrix-wallet</p> <p>Metrix Core : ~/Library/Application Support/metrixcoin</p>"},{"location":"altitude/staking/","title":"Staking","text":"<p>Staking is the process whereby you put your Metrixcoins in a Metrix wallet (Altitude or MyStakingWallet) and get rewarded in Metrix for holding them in your wallet. Staking contributes to the blockchain by creating blocks.</p>"},{"location":"altitude/staking/#requirements","title":"Requirements","text":"<ul> <li>The coins in your wallet need to be there for at least 960    confirmations to mature, this will take approximatily 24 hours.</li> <li>Your wallet has to be fully synched with a decent amount of connections.</li> <li>Your wallet must be unlocked for staking.</li> <li>Your system time has to be correct, and synched with https://time.is/.</li> </ul>"},{"location":"altitude/staking/#staking-process","title":"Staking process","text":"<ul> <li>When a wallet stake occurs, the stake payment will be added to the balance of the staking input which was rewarded by the blockchain.</li> <li>After a successful stake, the coins require 960 confirmations to re-mature, the staking input which received the stake becomes unspendable for this period of time.</li> <li>If the balance of this address is &gt; 1 million Metrix then the stake process will split the coins into 2 inputs, each of these inputs will then stake separately on the same wallet address.</li> <li>The smaller stake inputs will take more time to gain weight to re-stake, but will follow the same process as above, again splitting if their value is &gt; 1 million.</li> <li>If you have a staking input smaller than 500.000 Metrix the wallet will combine this input with another one when a stake is received.</li> </ul>"},{"location":"altitude/staking/#things-to-note","title":"Things to note","text":"<ul> <li>Sending coins from a wallet will interrupt the staking process of any inputs chosen to fulfill the total amount to send. These interrupted inputs will require 960 confirmations to remature. It is also likely that any coins of these inputs not sent out will be returned on a new wallet change address.</li> </ul>"},{"location":"altitude/staking/#staking-rewards-and-deflationary-staking-model","title":"Staking rewards and deflationary staking model","text":"<ul> <li>The current staking reward is 10% annually, this wil remain so until October 2022</li> <li>From October 2022 to October 2026 staking rewards are reduced to 5%</li> <li>From October 2026 to October 2032 staking rewards are reduced to 2%</li> <li>From October 2032 the staking rewards are reduced to 1% untill maximum supply is reached.</li> </ul>"},{"location":"altitude/staking/#coin-control","title":"Coin control","text":"<p>On the new chain (October 2020) coin control is not recommended. The coins become spendable after 960 confirmations after receiving a stake, if you coincontrol to combine them they will need another 960 confirmations before they are mature, this will cost you approximatily another 24 hours without staking. </p>"},{"location":"altitude/troubleshooting/","title":"Troubleshooting","text":"<p>This is a list of common issues we see. In some cases the fixes detailed below will address a range of wallet &amp; syncronisation issues.</p> <p>Prior to performing any troubleshooting fixes, its always best to ensure you have a current backup of the wallet.dat. you can manually copy this from the Metrix data directory, or use the backup facility File &gt; Backup Wallet in Altitude.</p> <p>If your still getting issues after trying some of these, please Report a Bug using the links below.  Help us squash those bugs Metrix Core | Altitude</p>"},{"location":"altitude/troubleshooting/#core-stopped-unexpectedly","title":"Core Stopped Unexpectedly","text":"<p>MacOS users see here if you get this after clicking the update core button or on a new Altitude installation.</p> <p>This is a dialog displayed when Altitude detects that the core has crashed. In most cases this is when initially starting the client, and in most cases it's due to the core being unable to load the local copy of the blockchain.  The reasons for being unable to load the local blockchain are various and many. But the quick fix for all is normally the same.</p> <ul> <li>Remove the local blockchain and resync.</li> </ul> <p>Fixing this normally consists of performing the following steps.</p> <ol> <li>If you are running Altitude v3.0.5 or newer. Click the Recovery Tools button then click Resync Blockchain this should remove your local blockchain files and start resynchronizing from block 0.</li> <li>If Step 1 fails to fix the issue, you can manually perform the same steps. Navigate to the metrix data directory.</li> <li>Delete the blocks &amp; chainstate folders.</li> <li>Start altitude. The wallet will now start synchronizing from block 0</li> </ol>"},{"location":"altitude/troubleshooting/#initialising-core","title":"Initialising Core","text":"<p>An issue experienced most commonly after a Core update.</p> <p>2 options to fix this.</p> <p>Within Altitude</p> <ul> <li>Click Tools &gt; Wallet Repair &gt; Reinstall Metrix Core</li> </ul> <p>Manually</p> <ol> <li>Close the wallet (Altitude) check it's also not still running in the system tray.</li> <li>Delete Altitude data directory\\Clients\\metrixd.exe. (metrixd for Linux and MacOS clients)</li> <li>Start Altitude.</li> </ol>"},{"location":"altitude/troubleshooting/#staking-icon-incorrect","title":"Staking Icon Incorrect","text":"<p>Not a common issue, the wallet advises staking is active but the staking icon in the bottom left is Red.</p> <p>Simply closing Altitude(Also exit in tray) and reopening it normally fixes this issue.</p>"},{"location":"altitude/troubleshooting/#the-wallet-is-not-staking","title":"The wallet is not staking","text":"<p>If it takes really long before you receive a stake in altitude 3.0.5 or newer and you are in doubt if the wallet is working correctly there are a few options you can check and do yourself.</p> <p>First of all make sure your system time is in synch with https://time.is/</p> <p>If this is not the problem there is a really small possibility you are on a sidechain, to fix this you have to delete the local blockchain files end let the wallet resynch. There are 2 ways to do this.</p>"},{"location":"altitude/troubleshooting/#in-altitude","title":"In altitude","text":"<p>Go to Tools--&gt;Wallet repair--&gt; Resync Blockchain</p>"},{"location":"altitude/troubleshooting/#manually","title":"Manually","text":"<ol> <li>Close altitude, also in system tray.</li> <li>Go to the Metrix data directory and remove the folders \u201cblocks\u201d and \u201cchainstate\u201d</li> <li>Open altitude and let it synch</li> </ol> <p>Once synchronized the wallet should work correctly.</p>"},{"location":"altitude/troubleshooting/#notes","title":"Notes","text":"<ul> <li>Small inputs of 500k Metrix or less just take really long to stake, it is not common that it is a wallet issue if they are not staking in a few weeks.</li> <li>This fix will not affect the amount of confirmations on your inputs so you won\u2019t lose any stake time.</li> <li>Do not expect the wallet to stake immediately or even in a few days after the fix, it will just stake as normal.</li> </ul>"},{"location":"altitude/troubleshooting/#no-peers","title":"No Peers","text":"<p>When altitude is stuck on \"waiting for peers\" there is a fairly simple solution</p> <ul> <li>Close altitude and go to the metrix data directory, remove the peers.dat file in the metrixcoin folder. Start altitude.</li> </ul>"},{"location":"core/commands/","title":"Metrix-RPC-API","text":"<p>This document includes the full list of Metrix RPCs based on Metrix core v4.0.6. According to this document you can learn how to use the Metrix RPC API. </p>"},{"location":"core/commands/#tables-of-contents","title":"Tables of Contents","text":"<ul> <li>Blockchain<ul> <li>callcontract</li> <li>getaccountinfo</li> <li>getbestblockhash</li> <li>getblock</li> <li>getblockchaininfo</li> <li>getblockcount</li> <li>getblockhash</li> <li>getblockheader</li> <li>getblockstats</li> <li>getchaintips</li> <li>getchaintxstats</li> <li>getdifficulty</li> <li>getmempoolancestors</li> <li>getmempooldescendants</li> <li>getmempoolentry</li> <li>getmempoolinfo</li> <li>getrawmempool</li> <li>getstorage</li> <li>gettransactionreceipt</li> <li>gettxout</li> <li>gettxoutproof</li> <li>gettxoutsetinfo</li> <li>listcontracts</li> <li>preciousblock</li> <li>pruneblockchain</li> <li>savemempool</li> <li>scantxoutset</li> <li>searchlogs</li> <li>verifychain</li> <li>verifytxoutproof</li> <li>waitforlogs</li> </ul> </li> <li>Control<ul> <li>getmemoryinfo</li> <li>help</li> <li>logging</li> <li>stop</li> <li>uptime</li> </ul> </li> <li>Generating <ul> <li>generate</li> <li>generatetoaddress</li> </ul> </li> <li>Mining <ul> <li>getblocktemplate</li> <li>getmininginfo</li> <li>getnetworkhashps</li> <li>getstakinginfo</li> <li>getsubsidy</li> <li>prioritisetransaction</li> <li>submitblock</li> </ul> </li> <li>Network <ul> <li>addnode</li> <li>clearbanned</li> <li>disconnectnode</li> <li>getaddednodeinfo</li> <li>getconnectioncount</li> <li>getnettotals</li> <li>getnetworkinfo</li> <li>getpeerinfo</li> <li>listbanned</li> <li>ping</li> <li>setban</li> <li>setnetworkactive</li> </ul> </li> <li>Rawtransactions<ul> <li>combinepsbt</li> <li>combinerawtransaction</li> <li>converttopsbt</li> <li>createpsbt</li> <li>createrawtransaction</li> <li>decodepsbt</li> <li>decoderawtransaction</li> <li>decodescript</li> <li>finalizepsbt</li> <li>fromhexaddress</li> <li>fundrawtransaction</li> <li>gethexaddress</li> <li>getrawtransaction</li> <li>sendrawtransaction</li> <li>signrawtransaction</li> <li>signrawtransactionwithkey</li> <li>testmempoolaccept</li> </ul> </li> <li>Util<ul> <li>createmultisig</li> <li>estimatesmartfee</li> <li>signmessagewithprivkey</li> <li>validateaddress</li> <li>verifymessage</li> </ul> </li> <li>Wallet<ul> <li>abandontransaction</li> <li>abortrescan</li> <li>addmultisigaddress</li> <li>backupwallet</li> <li>bumpfee</li> <li>createcontract</li> <li>createwallet</li> <li>dumpprivkey </li> <li>dumpwallet</li> <li>encryptwallet</li> <li>getaddressesbylabel</li> <li>getaddressinfo</li> <li>getbalance</li> <li>getnewaddress</li> <li>getrawchangeaddress</li> <li>getreceivedbyaddress</li> <li>gettransaction</li> <li>getunconfirmedbalance</li> <li>getwalletinfo</li> <li>importaddress</li> <li>importmulti</li> <li>importprivkey</li> <li>importprunedfunds</li> <li>importpubkey</li> <li>importwallet</li> <li>keypoolrefill</li> <li>listaccounts</li> <li>listaddressgroupings</li> <li>listlabels</li> <li>listlockunspent</li> <li>listreceivedbyaddress</li> <li>listsinceblock</li> <li>listtransactions</li> <li>listunspent</li> <li>listwallets</li> <li>loadwallet</li> <li>lockunspent</li> <li>removeprunedfunds</li> <li>rescanblockchain</li> <li>reservebalance</li> <li>sendmany</li> <li>sendmanywithdupes</li> <li>sendtoaddress</li> <li>sendtocontract</li> <li>sethdseed</li> <li>settxfee</li> <li>signmessage</li> <li>signrawtransactionwithwallet</li> <li>unloadwallet</li> <li>walletcreatefundedpsbt</li> <li>walletlock</li> <li>walletpassphrase</li> <li>walletpassphrasechange</li> <li>walletprocesspsbt</li> </ul> </li> <li>Zmq<ul> <li>getzmqnotifications</li> </ul> </li> </ul>"},{"location":"core/commands/#blockchain","title":"Blockchain","text":""},{"location":"core/commands/#callcontract","title":"callcontract","text":"<p>callcontract \"address\" \"data\" ( address )</p> <p>Argument:</p> <pre><code>1. \"address\" (string, required) The account address\n2. \"data\"    (string, required) The data hex string\n3. address   (string, optional) The sender address hex string\n4. gasLimit  (string, optional) The gas limit for executing the contract\n</code></pre> <p>Test example: </p> <pre><code>./metrix-cli callcontract \"74045ec0dc26ec1861473828bc140ebc4c1f3eff\" \"00000000000000000000000000000000000000000000000000000000000000a9\"\n</code></pre> <p>Test result:</p> <pre><code>{\n  \"address\": \"74045ec0dc26ec1861473828bc140ebc4c1f3eff\",\n  \"executionResult\": {\n  \"gasUsed\": 39999999,\n  \"excepted\": \"None\",\n  \"newAddress\": \"74045ec0dc26ec1861473828bc140ebc4c1f3eff\",\n  \"output\": \"\",\n  \"codeDeposit\": 0,\n  \"gasRefunded\": 0,\n  \"depositSize\": 0,\n  \"gasForDeposit\": 0\n  },\n  \"transactionReceipt\": \n  {\n    \"stateRoot\": \"1253c56cf79597e89ce179f14e6a86a493356dac410c30efc576503687ad2670\",\n    \"gasUsed\": 39999999,\n    \"bloomn    \"log\": [\n  ]\n  }\n}\n</code></pre>"},{"location":"core/commands/#getaccountinfo","title":"getaccountinfo","text":"<p>Contract details including balance, storage data and code</p> <p>Argument:</p> <pre><code>1. \"address\"(string, required) The contract address\n</code></pre> <p>Result:</p> <pre><code>Contract details including balance, storage data and code\n</code></pre> <p>Test example:</p> <pre><code>./metrix-cli getaccountinfo \"fdb9d0873ba524ef3ea67c1719666968e1eeb110\"\n</code></pre>"},{"location":"core/commands/#getbestblockhash","title":"getbestblockhash","text":"<p>Returns the hash of the best (tip) block in the longest blockchain.</p> <p>Result:</p> <pre><code>\"hex\" (string) the block hash hex encoded\n</code></pre> <p>Examples:</p> <pre><code>&gt;metrix-cli getbestblockhash\n\n&gt;curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"getbestblockhash\", \"params\": [] }' -H 'content-type: text/plain;' http://127.0.0.1:33831/\n</code></pre> <p>Test example:</p> <pre><code>./metrix-cli getbestblockhash\n</code></pre> <p>Test result:</p> <pre><code>e006ada4d1b7caf1559cc1b5b520ab8c54f51486230f2ea18d2692d3a095ba03\n</code></pre>"},{"location":"core/commands/#getblock","title":"getblock","text":"<p>According the blockhash returns the info of the corresponding block If verbosity is 0, returns a string that is serialized, hex-encoded data for block 'hash'. If verbosity is 1, returns an Object with information about block . If verbosity is 2, returns an Object with information about block  and information about each transaction. <p>Arguments:</p> <pre><code>1. \"blockhash\" (string, required) The block hash\n2. verbosity (numeric, optional, default=1) 0 for hex encoded data, 1 for a json object, and 2 for json object with transaction data\n</code></pre> <p>Result (for verbosity = 0):</p> <pre><code>\"data\" (string) A string that is serialized, hex-encoded data for block 'hash'.\n</code></pre> <p>Result (for verbosity = 1):</p> <pre><code>{\n  \"hash\" : \"hash\",       (string) the block hash (same as provided)\n  \"confirmations\" : n,   (numeric) The number of confirmations, or -1 if the block is not on the main chain\n  \"size\" : n,            (numeric) The block size\n  \"strippedsize\" : n,    (numeric) The block size excluding witness data\n  \"weight\" : n           (numeric) The block weight as defined in BIP 141\n  \"height\" : n,          (numeric) The block height or index\n  \"version\" : n,         (numeric) The block version\n  \"versionHex\" : \"00000000\", (string) The block version formatted in hexadecimal\n  \"merkleroot\" : \"xxxx\", (string) The merkle root\n  \"tx\" : [               (array of string) The transaction ids\n     \"transactionid\"     (string) The transaction id\n     ,...\n  ],\n  \"time\" : ttt,          (numeric) The block time in seconds since epoch (Jan 1 1970 GMT)\n  \"mediantime\" : ttt,    (numeric) The median block time in seconds since epoch (Jan 1 1970 GMT)\n  \"nonce\" : n,           (numeric) The nonce\n  \"bits\" : \"1d00ffff\",   (string) The bits\n  \"difficulty\" : x.xxx,  (numeric) The difficulty\n  \"chainwork\" : \"xxxx\",  (string) Expected number of hashes required to produce the chain up to this block (in hex)\n  \"nTx\" : n,             (numeric) The number of transactions in the block.\n  \"previousblockhash\" : \"hash\",  (string) The hash of the previous block\n  \"nextblockhash\" : \"hash\"       (string) The hash of the next block\n}\n</code></pre> <p>Result (for verbosity = 2):</p> <pre><code>{\n    ..., Same output as verbosity = 1.\n    \"tx\" : [ (array of Objects) The transactions in the format of the getrawtransaction RPC. Different from verbosity = 1 \"tx\" result.\n    ,...\n    ],\n    ,... Same output as verbosity = 1.\n}\n</code></pre> <p>Examples:</p> <pre><code>&gt; metrix-cli getblock \"00000000c937983704a73af28acdec37b049d214adbda81d7e2a3dd146f6ed09\"\n\n&gt; curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"getblock\", \"params\": [\"00000000c937983704a73af28acdec37b049d214adbda81d7e2a3dd146f6ed09\"] }' -H 'content-type: text/plain;' http://127.0.0.1:33831/\n</code></pre> <p>test examples:</p> <pre><code>./metrix-cli getblock \u201ceeab43864b89c15bd1ffad21eaabc97f4fa4a576a71b46c9d512afc26168569f\u201d\n</code></pre> <p>Test result:</p> <pre><code>{\n  \"hash\": \"eeab43864b89c15bd1ffad21eaabc97f4fa4a576a71b46c9d512afc26168569f\",\n  \"confirmations\": 2,\n  \"strippedsize\": 846,\n  \"size\": 882,\n  \"weight\": 3420,\n  \"height\": 402359,\n  \"version\": 536870912,\n  \"versionHex\": \"20000000\",\n  \"merkleroot\": \"359698a4d0e24baadfe9892b56bb5a6090830aea9fe1bf221f4766d7d552eeff\",\n  \"hashStateRoot\": \"6099ad48961a320b62cc29ba3d89dcbd8bbc0e33069f6c7169ba008039cbc44f\",\n  \"hashUTXORoot\": \"9e729950c184acd011471252a0c1a4bc279cd4c1e86d543bead4af6df787b2dd\",\n  \"tx\": [\n    \"9cd9f5e952988cd88c73b7cd172cc17f7ba6ec7c34918b50fbfa3901251cbc2f\",\n    \"49260697a2d127541cfd5190fc18a5193f118d4b1cc23504a520983ad7f0ee35\"\n  ],\n  \"time\": 1562145008,\n  \"mediantime\": 1562144608,\n  \"nonce\": 0,\n  \"bits\": \"1a037540\",\n  \"difficulty\": 4851625.823213781,\n  \"chainwork\": \"000000000000000000000000000000000000000000000114688c263219ba17a6\",\n  \"nTx\": 2,\n  \"previousblockhash\": \"dd7ccce7a7b419874dac6097c6505c3b00efdce9336aa9ad79363c81d8a05e26\",\n  \"nextblockhash\": \"60ef2b919581b7d7f684e6e2de574ee72ac94cb924770988d2686ca4c3b6e24a\",\n  \"flags\": \"proof-of-stake\",\n  \"proofhash\": \"000001199a996fef47845c16830c9187ed076dea11d34ba734201a011945c962\",\n  \"modifier\": \"148572257a37c882895429d69b15d8a2446be5ad5f0d74237ecf621841164990\",\n  \"signature\": \"304402204fe60e75699f3773e3c1d86281f2e7cf17268d23e40628622b3a215fea299e68022041c767b4e2ede77311aeaca2dfafc8f9066f628d2aa3234a57604cebc976c311\"\n}\n</code></pre>"},{"location":"core/commands/#getblockchaininfo","title":"getblockchaininfo","text":"<p>Returns an object containing various state info regarding blockchain processing.</p> <p>Result:</p> <pre><code>{\n  \"chain\": \"xxxx\",              (string) current network name as defined in BIP70 (main, test, regtest)\n  \"blocks\": xxxxxx,             (numeric) the current number of blocks processed in the server\n  \"headers\": xxxxxx,            (numeric) the current number of headers we have validated\n  \"bestblockhash\": \"...\",       (string) the hash of the currently best block\n  \"difficulty\": xxxxxx,         (numeric) the current difficulty\n  \"mediantime\": xxxxxx,         (numeric) median time for the current best block\n  \"verificationprogress\": xxxx, (numeric) estimate of verification progress [0..1]\n  \"initialblockdownload\": xxxx, (bool) (debug information) estimate of whether this node is in Initial Block Download mode.\n  \"chainwork\": \"xxxx\"           (string) total amount of work in active chain, in hexadecimal\n  \"size_on_disk\": xxxxxx,       (numeric) the estimated size of the block and undo files on disk\n  \"pruned\": xx,                 (boolean) if the blocks are subject to pruning\n  \"pruneheight\": xxxxxx,        (numeric) lowest-height complete block stored (only present if pruning is enabled)\n  \"automatic_pruning\": xx,      (boolean) whether automatic pruning is enabled (only present if pruning is enabled)\n  \"prune_target_size\": xxxxxx,  (numeric) the target size used by pruning (only present if automatic pruning is enabled)\n  \"softforks\": [                (array) status of softforks in progress\n     {\n        \"id\": \"xxxx\",           (string) name of softfork\n        \"version\": xx,          (numeric) block version\n        \"reject\": {             (object) progress toward rejecting pre-softfork blocks\n           \"status\": xx,        (boolean) true if threshold reached\n        },\n     }, ...\n  ],\n  \"bip9_softforks\": {           (object) status of BIP9 softforks in progress\n     \"xxxx\" : {                 (string) name of the softfork\n        \"status\": \"xxxx\",       (string) one of \"defined\", \"started\", \"locked_in\", \"active\", \"failed\"\n        \"bit\": xx,              (numeric) the bit (0-28) in the block version field used to signal this softfork (only for \"started\" status)\n        \"startTime\": xx,        (numeric) the minimum median time past of a block at which the bit gains its meaning\n        \"timeout\": xx,          (numeric) the median time past of a block at which the deployment is considered failed if not yet locked in\n        \"since\": xx,            (numeric) height of the first block to which the status applies\n        \"statistics\": {         (object) numeric statistics about BIP9 signalling for a softfork (only for \"started\" status)\n           \"period\": xx,        (numeric) the length in blocks of the BIP9 signalling period \n           \"threshold\": xx,     (numeric) the number of blocks with the version bit set required to activate the feature \n           \"elapsed\": xx,       (numeric) the number of blocks elapsed since the beginning of the current period \n           \"count\": xx,         (numeric) the number of blocks with the version bit set in the current period \n           \"possible\": xx       (boolean) returns false if there are not enough blocks left in this period to pass activation threshold \n        }\n     }\n  }\n  \"warnings\" : \"...\",           (string) any network and blockchain warnings.\n}\n</code></pre> <p>Test example: </p> <pre><code>./metrix-cli getblockchaininfo\n</code></pre> <p>Test result:</p> <pre><code>{\n  \"chain\": \"main\",\n  \"blocks\": 401574,\n  \"headers\": 401574,\n  \"bestblockhash\": \"be4cb62080f36d2c3a45127e016460aca82ea1de17af4166ad9341d1a18e00cc\",\n  \"difficulty\": 1699339.658646735,\n  \"moneysupply\": 101586296,\n  \"mediantime\": 1562032592,\n  \"verificationprogress\": 0.9999994694221126,\n  \"initialblockdownload\": false,\n  \"chainwork\": \"000000000000000000000000000000000000000000000113f4c983f14834f842\",\n  \"size_on_disk\": 1939468044,\n  \"pruned\": false,\n  \"softforks\": [\n  {\n    \"id\": \"bip34\",\n    \"version\": 2,\n    \"reject\": {\n    \"status\": true\n    }\n  },\n  {\n    \"id\": \"bip66\",\n    \"version\": 3,\n    \"reject\": {\n    \"status\": true\n    }\n  },\n  {\n    \"id\": \"bip65\",\n    \"version\": 4,\n    \"reject\": {\n    \"status\": true\n    }\n  }\n  ],\n  \"bip9_softforks\": {\n  \"csv\": {\n    \"status\": \"active\",\n    \"startTime\": 0,\n    \"timeout\": 999999999999,\n    \"since\": 6048\n  },\n  \"segwit\": {\n    \"status\": \"active\",\n    \"startTime\": 0,\n    \"timeout\": 999999999999,\n    \"since\": 6048\n  }\n  },\n  \"warnings\": \"\"\n}\n</code></pre>"},{"location":"core/commands/#getblockcount","title":"getblockcount","text":"<p>Returns the number of blocks in the longest blockchain.</p> <p>Result:</p> <pre><code>n (numeric) The current block count\n</code></pre> <p>Examples:</p> <pre><code>&gt; metrix-cli getblockcount\n\n&gt; curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"getblockcount\", \"params\": [] }' -H 'content-type: text/plain;' http://127.0.0.1:33831/\n</code></pre> <p>Test example: </p> <pre><code>./metrix-cli getblockcount\n</code></pre> <p>Test result: </p> <pre><code>395049\n</code></pre>"},{"location":"core/commands/#getblockhash","title":"getblockhash","text":"<p>Returns hash of block in best-block-chain at height provided.</p> <p>Arguments:</p> <pre><code>1. height         (numeric, required) The height index\n</code></pre> <p>Result: </p> <pre><code>\"hash\"         (string) The block hash\n</code></pre> <p>Examples:</p> <pre><code>&gt; metrix-cli getblockhash 1000\n\n&gt; curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"getblockhash\", \"params\": [1000] }' -H 'content-type: text/plain;' http://127.0.0.1:33831/\n</code></pre> <p>Test example:</p> <pre><code>./metrix-cli getblockhash 1\n</code></pre> <p>Test result:</p> <pre><code>0000d5dab5e76310ae640e9bcfa270c2eb23a1e5948bdf01fc7ed1f157110ab7\n</code></pre>"},{"location":"core/commands/#getblockheader","title":"getblockheader","text":"<p>Returns the corresponding block header information according to the given index If verbose is false, returns a string that is serialized, hex-encoded data for blockheader 'hash'. If verbose is true, returns an Object with information about blockheader . <p>Arguments:</p> <pre><code>1. \"hash\"  (string, required) The block hash\n2. verbose (boolean, optional, default=true) true for a json object, false for the hex encoded data\n</code></pre> <p>Result (for verbose = true):</p> <pre><code>{\n  \"hash\" : \"hash\",               (string) the block hash (same as provided)\n  \"confirmations\" : n,           (numeric) The number of confirmations, or -1 if the block is not on the main chain\n  \"height\" : n,                  (numeric) The block height or index\n  \"version\" : n,                 (numeric) The block version\n  \"versionHex\" : \"00000000\",     (string) The block version formatted in hexadecimal\n  \"merkleroot\" : \"xxxx\",         (string) The merkle root\n  \"time\" : ttt,                  (numeric) The block time in seconds since epoch (Jan 1 1970 GMT)\n  \"mediantime\" : ttt,            (numeric) The median block time in seconds since epoch (Jan 1 1970 GMT)\n  \"nonce\" : n,                   (numeric) The nonce\n  \"bits\" : \"1d00ffff\",           (string) The bits\n  \"difficulty\" : x.xxx,          (numeric) The difficulty\n  \"chainwork\" : \"0000...1f3\"     (string) Expected number of hashes required to produce the current chain (in hex)\n  \"nTx\" : n,                     (numeric) The number of transactions in the block.\n  \"previousblockhash\" : \"hash\",  (string) The hash of the previous block\n  \"nextblockhash\" : \"hash\",      (string) The hash of the next block\n}\n</code></pre> <p>Result (for verbose = false):</p> <pre><code>\"data\" (string) A string that is serialized, hex-encoded data for block 'hash'.\n</code></pre> <p>Examples:</p> <pre><code>&gt; metrix-cli getblockheader \"00000000c937983704a73af28acdec37b049d214adbda81d7e2a3dd146f6ed09\"\n\n&gt; curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"getblockheader\", \"params\": [\"00000000c937983704a73af28acdec37b049d214adbda81d7e2a3dd146f6ed09\"] }' -H 'content-type: text/plain;' http://127.0.0.1:33831/\n</code></pre> <p>Test example:</p> <pre><code>./metrix-cli getblockheader \n\u201cebd10c9b338247a9ccfd45493b484ae5638a5d97ddaa68c44c6ef214ea443c19\u201d\n</code></pre> <p>Test result:</p> <pre><code> {\n    \"hash\": \"ebd10c9b338247a9ccfd45493b484ae5638a5d97ddaa68c44c6ef214ea443c19\",\n    \"confirmations\": -1,\n    \"height\": 3383110,\n    \"version\": 536870912,\n    \"versionHex\": \"20000000\",\n    \"merkleroot\": \"b1a21dd48f978ea8671383f9454d058d2047d19666348340bea543cf89e31aca\",\n    \"time\": 1560222144,\n    \"mediantime\": 1560221568,\n    \"nonce\": 0,\n    \"bits\": \"1a097561\",\n    \"difficulty\": 1773742.122273433,\n    \"chainwork\": \"00000000000000000000000000000000000000000000010ca5944ed9b867aaef\",\n    \"nTx\": 7,\n    \"hashStateRoot\": \"10504057696a3ad9f96254b86424cc8f49f3ef2b271893f933b18174e538b828\",\n    \"hashUTXORoot\": \"9e729950c184acd011471252a0c1a4bc279cd4c1e86d543bead4af6df787b2dd\",\n    \"previousblockhash\": \"56044826105d66a95ab6f97f945a7cd18eef7109c59da64a7b6c57c377eaf4bb\",\n    \"flags\": \"proof-of-stake\",\n    \"proofhash\": \"0000000000000000000000000000000000000000000000000000000000000000\",\n    \"modifier\": \"1551ed22c1a43da60aebcb2d66a1e42d9bf6a007276367a4a189325ea37a1f91\"\n }\n</code></pre>"},{"location":"core/commands/#getblockstats","title":"getblockstats","text":"<p>Compute per block statistics for a given window. All amounts are in satoshis. It won't work for some heights with pruning. It won't work without -txindex for utxo_size_inc, fee or feerate stats.</p> <p>Arguments:</p> <pre><code>1. \"hash_or_height\"     (string or numeric, required) The block hash or height of the target block\n2. \"stats\"              (array,  optional) Values to plot, by default all values (see result below)\n    [\n      \"height\",         (string, optional) Selected statistic\n      \"time\",           (string, optional) Selected statistic\n      ,...\n    ]\n</code></pre> <p>Result:</p> <pre><code> {                           \n  \"avgfee\": xxxxx,          (numeric) Average fee in the block\n  \"avgfeerate\": xxxxx,      (numeric) Average feerate (in satoshis per virtual byte)\n  \"avgtxsize\": xxxxx,       (numeric) Average transaction size\n  \"blockhash\": xxxxx,       (string) The block hash (to check for potential reorgs)\n  \"feerate_percentiles\": [  (array of numeric) Feerates at the 10th, 25th, 50th, 75th, and 90th percentile weight unit (in satoshis per virtual byte)\n      \"10th_percentile_feerate\",      (numeric) The 10th percentile feerate\n      \"25th_percentile_feerate\",      (numeric) The 25th percentile feerate\n      \"50th_percentile_feerate\",      (numeric) The 50th percentile feerate\n      \"75th_percentile_feerate\",      (numeric) The 75th percentile feerate\n      \"90th_percentile_feerate\",      (numeric) The 90th percentile feerate\n  ],\n  \"height\": xxxxx,          (numeric) The height of the block\n  \"ins\": xxxxx,             (numeric) The number of inputs (excluding coinbase)\n  \"maxfee\": xxxxx,          (numeric) Maximum fee in the block\n  \"maxfeerate\": xxxxx,      (numeric) Maximum feerate (in satoshis per virtual byte)\n  \"maxtxsize\": xxxxx,       (numeric) Maximum transaction size\n  \"medianfee\": xxxxx,       (numeric) Truncated median fee in the block\n  \"mediantime\": xxxxx,      (numeric) The block median time past\n  \"mediantxsize\": xxxxx,    (numeric) Truncated median transaction size\n  \"minfee\": xxxxx,          (numeric) Minimum fee in the block\n  \"minfeerate\": xxxxx,      (numeric) Minimum feerate (in satoshis per virtual byte)\n  \"mintxsize\": xxxxx,       (numeric) Minimum transaction size\n  \"outs\": xxxxx,            (numeric) The number of outputs\n  \"subsidy\": xxxxx,         (numeric) The block subsidy\n  \"swtotal_size\": xxxxx,    (numeric) Total size of all segwit transactions\n  \"swtotal_weight\": xxxxx,  (numeric) Total weight of all segwit transactions divided by segwit scale factor (4)\n  \"swtxs\": xxxxx,           (numeric) The number of segwit transactions\n  \"time\": xxxxx,            (numeric) The block time\n  \"total_out\": xxxxx,       (numeric) Total amount in all outputs (excluding coinbase and thus reward [ie subsidy + totalfee])\n  \"total_size\": xxxxx,      (numeric) Total size of all non-coinbase transactions\n  \"total_weight\": xxxxx,    (numeric) Total weight of all non-coinbase transactions divided by segwit scale factor (4)\n  \"totalfee\": xxxxx,        (numeric) The fee total\n  \"txs\": xxxxx,             (numeric) The number of transactions (excluding coinbase)\n  \"utxo_increase\": xxxxx,   (numeric) The increase/decrease in the number of unspent outputs\n  \"utxo_size_inc\": xxxxx,   (numeric) The increase/decrease in size for the utxo index (not discounting op_return and similar)\n}\n</code></pre> <p>Examples:</p> <pre><code>&gt; metrix-cli getblockstats 1000 '[\"minfeerate\",\"avgfeerate\"]'\n\n&gt; curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"getblockstats\", \"params\": [1000 '[\"minfeerate\",\"avgfeerate\"]'] }' -H 'content-type: text/plain;' http://127.0.0.1:33831/\n</code></pre>"},{"location":"core/commands/#getchaintips","title":"getchaintips","text":"<p>Return information about all known tips in the block tree, including the main chain as well as orphaned branches.</p> <p>Result:</p> <pre><code> [\n    {\n      \"height\": xxxx,    (numeric) height of the chain tip\n      \"hash\": \"xxxx\",    (string) block hash of the tip\n      \"branchlen\": 0     (numeric) zero for main chain\n      \"status\": \"active\" (string) \"active\" for the main chain\n    },\n    {\n      \"height\": xxxx,\n      \"hash\": \"xxxx\",\n      \"branchlen\": 1     (numeric) length of branch connecting the tip to the main chain\n      \"status\": \"xxxx\"   (string) status of the chain (active, valid-fork, valid-headers, headers-only, invalid)\n    }\n  ]\n</code></pre> <p>Possible values for status: 1. \"invalid\" This branch contains at least one invalid block 2. \"headers-only\" Not all blocks for this branch are available, but the headers are valid 3. \"valid-headers\" All blocks are available for this branch, but they were never fully validated 4. \"valid-fork\" This branch is not part of the active chain, but is fully validated 5. \"active\" This is the tip of the active main chain, which is certainly valid</p> <p>Examples:</p> <pre><code>&gt; metrix-cli getchaintips\n\n&gt; curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"getchaintips\", \"params\": [] }' -H 'content-type: text/plain;' http://127.0.0.1:33831/\n</code></pre> <p>Test example:</p> <pre><code>./metrix-cli getchaintips\n</code></pre> <p>Result:</p> <pre><code>[\n  {\n    \"height\": 353464,\n    \"hash\": \"342e378ff153232fb08efe61ceb2fc00e28b1569aa0de97d031ba0bab98387be\",\n    \"branchlen\": 2,\n    \"status\": \"invalid\"\n  },\n  {\n    \"height\": 353415,\n    \"hash\": \"f1748f4c718cf5d36bab1dc7f4199e0e0379a338e6ea55fb18860daa0bc0c604\",\n    \"branchlen\": 1,\n    \"status\": \"valid-fork\"\n  },\n  {\n    \"height\": 353388,\n    \"hash\": \"1fbd1234497731d8f3296c60e9d21cc5c8d57b19d4fe7f154b4aa17e47b526b8\",\n    \"branchlen\": 1,\n    \"status\": \"valid-headers\"\n  },\n  {\n    \"height\": 353103,\n    \"hash\": \"583b2cd790cc493390474306cb78de68e4ba2f0bfdae852ab36c240fb058c559\",\n    \"branchlen\": 1,\n    \"status\": \"valid-fork\"\n  },...\n]\n</code></pre>"},{"location":"core/commands/#getchaintxstats","title":"getchaintxstats","text":"<p>Compute statistics about the total number and rate of transactions in the chain.</p> <p>Arguments:</p> <pre><code>1. nblocks     (numeric, optional) Size of the window in number of blocks (default: one month).\n2. \"blockhash\" (string, optional) The hash of the block that ends the window.\n</code></pre> <p>Result:</p> <pre><code> {\n  \"time\": xxxxx,                         (numeric) The timestamp for the final block in the window in UNIX format.\n  \"txcount\": xxxxx,                      (numeric) The total number of transactions in the chain up to that point.\n  \"window_final_block_hash\": \"...\",      (string) The hash of the final block in the window.\n  \"window_block_count\": xxxxx,           (numeric) Size of the window in number of blocks.\n  \"window_tx_count\": xxxxx,              (numeric) The number of transactions in the window. Only returned if \"window_block_count\" is &gt; 0.\n  \"window_interval\": xxxxx,              (numeric) The elapsed time in the window in seconds. Only returned if \"window_block_count\" is &gt; 0.\n  \"txrate\": x.xx,                        (numeric) The average rate of transactions per second in the window. Only returned if \"window_interval\" is &gt; 0.\n}\n</code></pre> <p>Examples:</p> <pre><code>&gt; metrix-cli getchaintxstats\n\n&gt; curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"getchaintxstats\", \"params\": [2016] }' -H 'content-type: text/plain;' http://127.0.0.1:33831/\n</code></pre> <p>Test result:</p> <pre><code>{\n  \"time\": 1561602624,\n  \"txcount\": 866823,\n  \"window_final_block_hash\": \"ea6b26303facc34404da3174962a5c1d8d00369a3ff27aa50238ba8f24170280\",\n  \"window_block_count\": 20250,\n  \"window_tx_count\": 41012,\n  \"window_interval\": 2655920,\n  \"txrate\": 0.01544173017259556\n}\n</code></pre>"},{"location":"core/commands/#getdifficulty","title":"getdifficulty","text":"<p>Returns the proof-of-work difficulty as a multiple of the minimum difficulty.</p> <p>Returns the proof-of-stake difficulty as a multiple of the minimum difficulty.</p> <p>Result:</p> <pre><code>n.nnn (numeric) the proof-of-work difficulty as a multiple of the minimum difficulty.\n</code></pre> <p>Examples:</p> <pre><code>&gt; metrix-cli getdifficulty\n\n&gt; curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"getdifficulty\", \"params\": [] }' -H 'content-type: text/plain;' http://127.0.0.1:33831/\n</code></pre> <p>Test example:</p> <pre><code>./metrix-cli getdifficulty\n</code></pre> <p>Test result:</p> <pre><code>{\n  \"proof-of-work\": 1.52587890625e-05,\n  \"proof-of-stake\": 7022116.100551808\n}\n</code></pre>"},{"location":"core/commands/#getmempoolancestors","title":"getmempoolancestors","text":"<p>If txid is in the mempool, returns all in-mempool ancestors.</p> <p>Arguments:</p> <pre><code>1. \"txid\"  (string, required) The transaction id (must be in mempool)\n2. verbose (boolean, optional, default=false) True for a json object, false for array of transaction ids\n</code></pre> <p>Result (for verbose = false):</p> <pre><code>  [ \n    \"transactionid\" (string) The transaction id of an in-mempool ancestor transaction\n    ,...\n  ]\n</code></pre> <p>Result (for verbose=true):</p> <pre><code>{                           \n  \"transactionid\" : {       \n    \"size\" : n,             (numeric) virtual transaction size as defined in BIP 141. This is different from actual serialized size for witness transactions as witness data is discounted.\n    \"fee\" : n,              (numeric) transaction fee in MRX (DEPRECATED)\n    \"modifiedfee\" : n,      (numeric) transaction fee with fee deltas used for mining priority (DEPRECATED)\n    \"time\" : n,             (numeric) local time transaction entered pool in seconds since 1 Jan 1970 GMT\n    \"height\" : n,           (numeric) block height when transaction entered pool\n    \"descendantcount\" : n,  (numeric) number of in-mempool descendant transactions (including this one)\n    \"descendantsize\" : n,   (numeric) virtual transaction size of in-mempool descendants (including this one)\n    \"descendantfees\" : n,   (numeric) modified fees (see above) of in-mempool descendants (including this one) (DEPRECATED)\n    \"ancestorcount\" : n,    (numeric) number of in-mempool ancestor transactions (including this one)\n    \"ancestorsize\" : n,     (numeric) virtual transaction size of in-mempool ancestors (including this one)\n    \"ancestorfees\" : n,     (numeric) modified fees (see above) of in-mempool ancestors (including this one) (DEPRECATED)\n    \"wtxid\" : hash,         (string) hash of serialized transaction, including witness data\n    \"fees\" : {\n        \"base\" : n,         (numeric) transaction fee in MRX\n        \"modified\" : n,     (numeric) transaction fee with fee deltas used for mining priority in MRX\n        \"ancestor\" : n,     (numeric) modified fees (see above) of in-mempool ancestors (including this one) in MRX\n        \"descendant\" : n,   (numeric) modified fees (see above) of in-mempool descendants (including this one) in MRX\n    }\n    \"depends\" : [           (array) unconfirmed transactions used as inputs for this transaction\n        \"transactionid\",    (string) parent transaction id\n       ... ]\n    \"spentby\" : [           (array) unconfirmed transactions spending outputs from this transaction\n        \"transactionid\",    (string) child transaction id\n       ... ]\n  }, ...\n}\n</code></pre> <p>Examples:</p> <pre><code>&gt; metrix-cli getmempoolancestors \"mytxid\"\n\n&gt; curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"getmempoolancestors\", \"params\": [\"mytxid\"] }' -H 'content-type: text/plain;' http://127.0.0.1:33831/\n</code></pre> <p>Test example:</p> <pre><code>./metrix-cli getmempoolancestors a957d309824b760814feb6426ba386d082f3b8bc95837e3e7ebada6538cf7e2c\n</code></pre> <p>Test result:</p> <pre><code>[\n  \"c3d044940534fd94fd0c901a895f62505e7beba0dfa44b1563c7aea980279135\"     \n]\n</code></pre>"},{"location":"core/commands/#getmempooldescendants","title":"getmempooldescendants","text":"<p>If txid is in the mempool, returns all in-mempool descendants.</p> <p>Arguments:</p> <pre><code>1. \"txid\"   (string, required) The transaction id (must be in mempool)\n2.  verbose (boolean, optional, default=false) True for a json object, false for array of transaction ids\n</code></pre> <p>Result (for verbose = false):</p> <pre><code>[ \n  \"transactionid\" (string) The transaction id of an in-mempool descendant transaction\n  ,...\n]\n</code></pre> <p>Result (for verbose=true):</p> <pre><code> {                           \n  \"transactionid\" : {       \n    \"size\" : n,             (numeric) virtual transaction size as defined in BIP 141. This is different from actual serialized size for witness transactions as witness data is discounted.\n    \"fee\" : n,              (numeric) transaction fee in MRX (DEPRECATED)\n    \"modifiedfee\" : n,      (numeric) transaction fee with fee deltas used for mining priority (DEPRECATED)\n    \"time\" : n,             (numeric) local time transaction entered pool in seconds since 1 Jan 1970 GMT\n    \"height\" : n,           (numeric) block height when transaction entered pool\n    \"descendantcount\" : n,  (numeric) number of in-mempool descendant transactions (including this one)\n    \"descendantsize\" : n,   (numeric) virtual transaction size of in-mempool descendants (including this one)\n    \"descendantfees\" : n,   (numeric) modified fees (see above) of in-mempool descendants (including this one) (DEPRECATED)\n    \"ancestorcount\" : n,    (numeric) number of in-mempool ancestor transactions (including this one)\n    \"ancestorsize\" : n,     (numeric) virtual transaction size of in-mempool ancestors (including this one)\n    \"ancestorfees\" : n,     (numeric) modified fees (see above) of in-mempool ancestors (including this one) (DEPRECATED)\n    \"wtxid\" : hash,         (string) hash of serialized transaction, including witness data\n    \"fees\" : {\n        \"base\" : n,         (numeric) transaction fee in MRX\n        \"modified\" : n,     (numeric) transaction fee with fee deltas used for mining priority in MRX\n        \"ancestor\" : n,     (numeric) modified fees (see above) of in-mempool ancestors (including this one) in MRX\n        \"descendant\" : n,   (numeric) modified fees (see above) of in-mempool descendants (including this one) in MRX\n    }\n    \"depends\" : [           (array) unconfirmed transactions used as inputs for this transaction\n        \"transactionid\",    (string) parent transaction id\n       ... ]\n    \"spentby\" : [           (array) unconfirmed transactions spending outputs from this transaction\n        \"transactionid\",    (string) child transaction id\n       ... ]\n  }, ...\n}\n</code></pre> <p>Examples:</p> <pre><code>&gt; metrix-cli getmempooldescendants \"mytxid\"\n\n&gt; curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"getmempooldescendants\", \"params\": [\"mytxid\"] }' -H 'content-type: text/plain;' http://127.0.0.1:33831/\n</code></pre> <p>Test result:</p> <pre><code>[\n  \"9d980a4fcdf13fb2c9a5c7769ad6f3e8668aba1f0608be09ef84a11afaf3d03f\",\n  \"89874d6f44bb3b8a526c50cecda1cbe06c6c6e8107623b79222ee75b79f91d5a\",\n  \"0c2d893fdc510a6fddb18fc3d441b02d5b6050b754dc6f5d5ddd251707c3d995\"\n]\n</code></pre>"},{"location":"core/commands/#getmempoolentry","title":"getmempoolentry","text":"<p>Returns mempool data for given transaction</p> <p>Arguments:</p> <pre><code>1. \"txid\" (string, required) The transaction id (must be in mempool)\n</code></pre> <p>Result:</p> <pre><code>{                           \n    \"size\" : n,             (numeric) virtual transaction size as defined in BIP 141. This is different from actual serialized size for witness transactions as witness data is discounted.\n    \"fee\" : n,              (numeric) transaction fee in MRX (DEPRECATED)\n    \"modifiedfee\" : n,      (numeric) transaction fee with fee deltas used for mining priority (DEPRECATED)\n    \"time\" : n,             (numeric) local time transaction entered pool in seconds since 1 Jan 1970 GMT\n    \"height\" : n,           (numeric) block height when transaction entered pool\n    \"descendantcount\" : n,  (numeric) number of in-mempool descendant transactions (including this one)\n    \"descendantsize\" : n,   (numeric) virtual transaction size of in-mempool descendants (including this one)\n    \"descendantfees\" : n,   (numeric) modified fees (see above) of in-mempool descendants (including this one) (DEPRECATED)\n    \"ancestorcount\" : n,    (numeric) number of in-mempool ancestor transactions (including this one)\n    \"ancestorsize\" : n,     (numeric) virtual transaction size of in-mempool ancestors (including this one)\n    \"ancestorfees\" : n,     (numeric) modified fees (see above) of in-mempool ancestors (including this one) (DEPRECATED)\n    \"wtxid\" : hash,         (string) hash of serialized transaction, including witness data\n    \"fees\" : {\n        \"base\" : n,         (numeric) transaction fee in MRX\n        \"modified\" : n,     (numeric) transaction fee with fee deltas used for mining priority in MRX\n        \"ancestor\" : n,     (numeric) modified fees (see above) of in-mempool ancestors (including this one) in MRX\n        \"descendant\" : n,   (numeric) modified fees (see above) of in-mempool descendants (including this one) in MRX\n    }\n    \"depends\" : [           (array) unconfirmed transactions used as inputs for this transaction\n        \"transactionid\",    (string) parent transaction id\n       ... ]\n    \"spentby\" : [           (array) unconfirmed transactions spending outputs from this transaction\n        \"transactionid\",    (string) child transaction id\n       ... ]\n}\n</code></pre> <p>Examples:</p> <pre><code>&gt; metrix-cli getmempoolentry \"mytxid\"\n\n&gt; curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"getmempoolentry\", \"params\": [\"mytxid\"] }' -H 'content-type: text/plain;' http://127.0.0.1:33831/\n</code></pre>"},{"location":"core/commands/#getmempoolinfo","title":"getmempoolinfo","text":"<p>Returns details on the active state of the TX memory pool.</p> <p>Result:</p> <pre><code>{\n  \"size\": xxxxx, (numeric) Current tx count  \n  \"bytes\": xxxxx, (numeric) Sum of all virtual transaction sizes as defined in BIP 141. Differs from actual serialized size because witness data is discounted  \n  \"usage\": xxxxx, (numeric) Total memory usage for the mempool  \n  \"maxmempool\": xxxxx, (numeric) Maximum memory usage for the mempool  \n  \"mempoolminfee\": xxxxx (numeric) Minimum fee rate in MRX/kB for tx to be accepted. Is the maximum of minrelaytxfee and minimum mempool fee  \n  \"minrelaytxfee\": xxxxx (numeric) Current minimum relay fee for transactions  \n}\n</code></pre> <p>Examples:</p> <pre><code>&gt; metrix-cli getmempoolinfo\n\n&gt; curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"getmempoolinfo\", \"params\": [] }' -H 'content-type: text/plain;' http://127.0.0.1:33831/\n</code></pre> <p>Test example:</p> <pre><code>./metrix-cli getmempoolinfo\n</code></pre> <p>Test result:</p> <pre><code>{\n  \"size\": 10,\n  \"bytes\": 3582,\n  \"usage\": 14176,\n  \"maxmempool\": 300000000,\n  \"mempoolminfee\": 0.00400000,\n  \"minrelaytxfee\": 0.00400000\n}\n</code></pre>"},{"location":"core/commands/#getrawmempool","title":"getrawmempool","text":"<p>Returns all transaction ids in memory pool as a json array of string transaction ids.</p> <p>Hint: use getmempoolentry to fetch a specific transaction from the mempool.</p> <p>Arguments:</p> <pre><code>1. verbose (boolean, optional, default=false) True for a json object, false for array of transaction ids\n</code></pre> <p>Result: (for verbose = false):</p> <pre><code>{                           \n  \"transactionid\" : {       \n    \"size\" : n,             (numeric) virtual transaction size as defined in BIP 141. This is different from actual serialized size for witness transactions as witness data is discounted.\n    \"fee\" : n,              (numeric) transaction fee in MRX (DEPRECATED)\n    \"modifiedfee\" : n,      (numeric) transaction fee with fee deltas used for mining priority (DEPRECATED)\n    \"time\" : n,             (numeric) local time transaction entered pool in seconds since 1 Jan 1970 GMT\n    \"height\" : n,           (numeric) block height when transaction entered pool\n    \"descendantcount\" : n,  (numeric) number of in-mempool descendant transactions (including this one)\n    \"descendantsize\" : n,   (numeric) virtual transaction size of in-mempool descendants (including this one)\n    \"descendantfees\" : n,   (numeric) modified fees (see above) of in-mempool descendants (including this one) (DEPRECATED)\n    \"ancestorcount\" : n,    (numeric) number of in-mempool ancestor transactions (including this one)\n    \"ancestorsize\" : n,     (numeric) virtual transaction size of in-mempool ancestors (including this one)\n    \"ancestorfees\" : n,     (numeric) modified fees (see above) of in-mempool ancestors (including this one) (DEPRECATED)\n    \"wtxid\" : hash,         (string) hash of serialized transaction, including witness data\n    \"fees\" : {\n        \"base\" : n,         (numeric) transaction fee in MRX\n        \"modified\" : n,     (numeric) transaction fee with fee deltas used for mining priority in MRX\n        \"ancestor\" : n,     (numeric) modified fees (see above) of in-mempool ancestors (including this one) in MRX\n        \"descendant\" : n,   (numeric) modified fees (see above) of in-mempool descendants (including this one) in MRX\n    }\n    \"depends\" : [           (array) unconfirmed transactions used as inputs for this transaction\n        \"transactionid\",    (string) parent transaction id\n       ... ]\n    \"spentby\" : [           (array) unconfirmed transactions spending outputs from this transaction\n        \"transactionid\",    (string) child transaction id\n       ... ]\n  }, ...\n}\n</code></pre> <p>Examples:</p> <pre><code>&gt; metrix-cli getrawmempool true\n\n&gt; curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"getrawmempool\", \"params\": [true] }' -H 'content-type: text/plain;' http://127.0.0.1:33831/\n</code></pre> <p>Test example: </p> <pre><code>./metrix-cli getrawmempool\n</code></pre> <p>Test result:</p> <pre><code>[\n  \"d4e995b2e0b5ef44f90659323e662f408f7938b5b97c345a40192ca6d0b06704\",\n  \"9e41daae52ece96732305cb0873b8528e7011c866eb7c3c9bee2c22c03e5bf65\",\n  \"354297aef68f48044af17c3f01616597dad298304e34728fa9894b3ff73a0f33\",\n  \"e2c407e5468a3e885b73760e3c6115d6d493786fff5ec070e91ad9b4db58b2ef\",\n  \"15f9f80b536041ebf5c3958c7b7d9bab72c800882235fc782925137c2addbdd2\",\n  \"109483b1b06746cf4215f3786907b26213adc71a14145acccbba4f0952a751a3\",\n  \"b49e03dd14a242803bf8108a10a9f82120e21e7d4b0a9255c632e7b92d879136\",\n  \"40a295fa44931750c048feb817fad96e079ce193c4eda0770d68be6c1f7241c3\",\n  \"f1e4f8814a404adce808e9b0aed56f61ec151c745cba3a6ac1f0a917884adb59\",\n  \"b6772f160e21c4633f95b1c5831c6d0451cab1501c375730ea32de64860f1809\",\n  \"65894a5fcf0e19e13375ba0d0f2afa6e73f52512bc69cf8225c40af824f740d9\",\n  \"8199c4f6c9f8be79fff4fc9664755bc0502de92d9856083112e55caaa2cb1974\",\n  \"c3fb5ef13f87f2988c879c274cfbc1613240a12a66e9259388101d82364f1934\",\n  \"ca78e53edcfba07d4eee2a1bbfc07e26e79e5677104399c794e51d098c735056\",\n  \"7f66e7f6443ebd0d3a3a8e6bd83e3a5ffc6d32ef5a1ee6487c7abb5cfae7d409\",\n  \"97966a9f3baeac334cb547d553baf71bf7c68720f350444d7411e0855f39a574\",\n  \"78285303f6deef553cd5fcd5084db0bae3ccf504ac66f614cb29a5a6f6b5e815\",\n  \"e5ae989b9782c1afd2c6f71379e46d162ffbe804c5b8db70b7bc85d939df2efe\",\n  \"2f09732e25eab121a347471a91be55c798cde96aa7f8009da51c2a2d322e6410\",\n  \"c302d3177a64a4a3c7f2ba1ea196b69754475192afa8249eb18f6f055556c8e1\",\n  \"7f1de19f02347ea3744bcb11364c9883b91e4f4883b13f15e9e9f52595c1d3d6\",\n  \"c241f5896723fec65b3af4f94491679ae8a79c434b2e0749651cf416952abac0\",\n  \"4d8932af7a7073e2c4a5527767215f7bf5b8c7759a5b49d976f0031d5184fd18\"\n]\n</code></pre>"},{"location":"core/commands/#getstorage","title":"getstorage","text":"<p>Get data stored by smart contracts</p> <p>Argument:</p> <pre><code> 1. \"address\"  (string, required) The address to get the storage from\n 2. \"blockNum\" (string, optional) Number of block to get state from,  \"latest\" keyword supported. Latest if not passed.\n 3. \"index\"    (number, optional) Zero-based index position of the storage\n</code></pre> <p>Examples:</p> <pre><code>&gt; metrix-cli getstorage \u201ccontract address\u201d\n\n&gt; curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"getstorage\", \"params\": [\"address\"] }' -H 'content-type: text/plain;' http://127.0.0.1:33831/\n</code></pre> <p>Test example:</p> <pre><code>getstorage \"fdb9d0873ba524ef3ea67c1719666968e1eeb110\"\n</code></pre> <p>Test result:</p> <pre><code>{\n  \"000756ed9982214a7ba55dbe32d0321f5891e75d3c3c467d4b575d55991e03b1\": \n  {\n    \"52adc13b5e472402f13052709f282024cc52e564f96b2183a5737c545229228d\": \"0000000000000000000000000000000000000000000000000000000000000001\"\n  },\n}\n</code></pre>"},{"location":"core/commands/#gettransactionreceipt","title":"gettransactionreceipt","text":"<p>requires -logevents to be enabled</p> <p>Argument:</p> <pre><code>1. \"hash\" (string, required) The contract transaction hash\n</code></pre> <p>Result:</p> <pre><code>{\n  \"blockHash\":  \"XXX\"        (String), 32 bytes, the blockhash included this tx.\n  \"blockNumber\": n           (Number), the blocknumber included this transaction.\n  \"transaction\": \"XXX\":      (String), 32 bytes\uff0cthe hash of this transaction.\n  \"transactionIndex\": n      (numberic), the index in the block for this tx.\n  \"from\": \"XXX\"              (String), 20 bytes\uff0cthe sender address of this tx.\n  \"to\"  : \"XXXX\"             (String), 20 bytes\uff0cthe receiver address of this tx. if this  address is created by a contract,return null. \n  \"cumulativeGasUsed\": n     (numberic), The total amount of gas used after execution of the current transaction\n  \"gasUsed\": n (numberic), The gas cost alone to execute the current transaction\u3002\n  \"contractAddress\": \"XXX\"   (String), 20 bytes\uff0cthe created contract address.\n   if this tx is created by the contract, return the contract address. else return null.\n  \"logs\": []\n}\n</code></pre> <p>Test result:</p> <pre><code>[\n  {\n    \"blockHash\": \"1e34edb316f9c442d1db71ad5bd5376650387c6deb275c63c459b6624880180b\",\n    \"blockNumber\": 196529,\n    \"transactionHash\": \"acccfb57aaeb94127560f4762d5372af3dcb4faddf9de3b2ce6bde0fdd1d57d5\",\n    \"transactionIndex\": 2,\n    \"from\": \"83c2436854450b0895d4c1d965720ef5e6a125be\",\n    \"to\": \"74045ec0dc26ec1861473828bc140ebc4c1f3eff\",\n    \"cumulativeGasUsed\": 23619,\n    \"gasUsed\": 23619,\n    \"contractAddress\": \"74045ec0dc26ec1861473828bc140ebc4c1f3eff\",\n    \"excepted\": \"None\",\n    \"log\": [\n    ]\n  }\n]\n</code></pre>"},{"location":"core/commands/#gettxout","title":"gettxout","text":"<p>Returns details about an unspent transaction output.</p> <p>Arguments:</p> <pre><code>1. \"txid\"            (string, required) The transaction id\n2. \"n\"               (numeric, required) vout number\n3. \"include_mempool\" (boolean, optional) Whether to include the mempool. Default: true. Note that an unspent output that is spent in the mempool won't appear.\n</code></pre> <p>Result:</p> <pre><code>{\n  \"bestblock\": \"hash\",    (string) The hash of the block at the tip of the chain\n  \"confirmations\" : n,    (numeric) The number of confirmations\n  \"value\" : x.xxx,        (numeric) The transaction value in MRX\n  \"scriptPubKey\" : \n  { \n    \"asm\" : \"code\",       (string)\n    \"hex\" : \"hex\",        (string)\n    \"reqSigs\" : n,        (numeric) Number of required signatures\n    \"type\" : \"pubkeyhash\",(string) The type, eg pubkeyhash\n    \"addresses\" : [ (array of string) array of metrix addresses\n    \"address\"             (string) metrix address\n    ,...\n    ]\n   },\n  \"coinbase\" : true|false (boolean) Coinbase or not\n}\n</code></pre> <p>Examples:</p> <p>Get unspent transactions</p> <pre><code>&gt; metrix-cli listunspent\n</code></pre> <p>View the details</p> <pre><code>&gt; metrix-cli gettxout \"txid\" 1\n</code></pre> <p>As a json rpc call</p> <pre><code>&gt; curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"gettxout\", \"params\": [\"txid\", 1] }' -H 'content-type: text/plain;' http://127.0.0.1:33831/\n</code></pre>"},{"location":"core/commands/#gettxoutproof","title":"gettxoutproof","text":"<p>Returns a hex-encoded proof that \"txid\" was included in a block.</p> <p>NOTE: By default this function only works sometimes. This is when there is an unspent output in the utxo for this transaction. To make it always work, you need to maintain a transaction index, using the -txindex command line option or specify the block in which the transaction is included manually (by blockhash).</p> <p>Arguments:</p> <pre><code>1. \"txids\" (string,required) A json array of txids to filter\n  [\n    \"txid\" (string) A transaction hash\n    ,...\n  ]\n2. \"blockhash\" (string, optional) If specified, looks for txid in the block with this hash\n</code></pre> <p>Result:</p> <pre><code>\"data\" (string) A string that is a serialized, hex-encoded data for the proof.\n</code></pre> <p>Test example: </p> <pre><code>./metrix-cli gettxoutproof [\\\"5caa24c8c78f441a5c37dff602cdacc27b4530b03c09569f62dc3cd20e674918\\\"]\n</code></pre> <p>Test result:</p> <pre><code>0000002081d3145a457b724b725171603a991b8d8186f0506c65722e436a6a33d039690ed689a1e4bdea746f8a3c47d6856765282fb5f7f20c9c43cc9e0170b6ba1214076010135d8683001b0000000052ef386ec7ae80719e408c3ea4193583bd0665fffd633d5e10b19e26375ac9b6386faa7484bfd98fc4789fd584229d5c20f72f772a8b3024ea94d1563e84e964b7e989413b1f509a5c14f24dadcf6da7e4f9e8559e5f6ff185cbc978fa1693fc0100000046304402205c0fbeff48e49b24848fba7428ea1c821ef4942135d60f51f6a4260e76941ac5022012a051fc518ec6b684a49eaf75631cdfa5574b170ccab6a0612da44585eab5600300000002fc77727661996828f410e89871d981a1c37f951d35d4ed196745d348cc74ca611849670ed23cdc629f56093cb030457bc2accd02f6df375c1a448fc7c824aa5c010d\n</code></pre>"},{"location":"core/commands/#gettxoutsetinfo","title":"gettxoutsetinfo","text":"<p>Returns statistics about the unspent transaction output set. Note this call may take some time.</p> <p>Result:</p> <pre><code>{\n  \"height\":n,                  (numeric) The current block height (index)\n  \"bestblock\": \"hex\",          (string) The hash of the block at the tip of the chain\n  \"transactions\": n,           (numeric) The number of transactions with unspent outputs\n  \"txouts\": n,                 (numeric) The number of unspent transaction outputs\n  \"bogosize\": n,               (numeric) A meaningless metric for UTXO set size\n  \"hash_serialized_2\": \"hash\", (string) The serialized hash\n  \"disk_size\": n,              (numeric) The estimated size of the chainstate on disk\n  \"total_amount\": x.xxx        (numeric) The total amount\n}\n</code></pre> <p>Examples:</p> <pre><code>&gt; metrix-cli gettxoutsetinfo\n\n&gt; curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"gettxoutsetinfo\", \"params\": [] }' -H 'content-type: text/plain;' http://127.0.0.1:33831/\n</code></pre>"},{"location":"core/commands/#listcontracts","title":"listcontracts","text":"<p>list all the contracts and default accounts is 20</p> <p>Argument:</p> <pre><code>1. start (numeric or string, optional) The starting account index, default 1\n2. maxDisplay (numeric or string, optional) Max accounts to list, default 20\n</code></pre> <p>Test example:</p> <pre><code>&gt; ./metrix-cli listcontracts 1 5\n</code></pre> <p>Result:</p> <pre><code> {\n  \"82155d35dc1e0b5dc3d6ca7e536af42394a7003c\": 0.00000000,\n  \"c50116ca622b4dbd12205fb9cc61a64f7b63cb8a\": 0.00000000,\n  \"28d1140499604664be0037272eb287e1742dcafe\": 0.00000000,\n  \"b9fe4ba102c33ba078d90a2cb6fe8fa94fd114a1\": 0.00000000,\n  \"954999d28fd46c6de806f9587a82321437771ab2\": 0.00000000\n}\n</code></pre>"},{"location":"core/commands/#preciousblock","title":"preciousblock","text":"<p>Treats a block as if it were received before others with the same work.</p> <p>A later preciousblock call can override the effect of an earlier one.</p> <p>The effects of preciousblock are not retained across restarts.</p> <p>Arguments:</p> <pre><code>1. \"blockhash\" (string, required) the hash of the block to mark as precious\n</code></pre> <p>Examples:</p> <pre><code>&gt; metrix-cli preciousblock \"blockhash\"\n\n&gt; curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"preciousblock\", \"params\": [\"blockhash\"] }' -H 'content-type: text/plain;' http://127.0.0.1:33831/\n</code></pre>"},{"location":"core/commands/#pruneblockchain","title":"pruneblockchain","text":"<p>prune the spend tx to reduce the size of the block</p> <p>Arguments:</p> <pre><code>1. \"height\" (numeric, required) The block height to prune up to. May be set to a discrete height, or a unix timestamp to prune blocks whose block time is at least 2 hours older than the provided timestamp.\n</code></pre> <p>Result:</p> <pre><code>n (numeric) Height of the last block pruned.\n</code></pre> <p>Examples:</p> <pre><code>&gt; metrix-cli pruneblockchain 1000\n\n&gt; curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"pruneblockchain\", \"params\": [1000] }' -H 'content-type: text/plain;' http://127.0.0.1:33831/\n</code></pre>"},{"location":"core/commands/#savemempool","title":"savemempool","text":"<p>Dumps the mempool to disk. It will fail until the previous dump is fully loaded.</p> <p>Examples:</p> <pre><code>&gt; metrix-cli savemempool\n\n&gt; curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"savemempool\", \"params\": [] }' -H 'content-type: text/plain;' http://127.0.0.1:33831/\n</code></pre>"},{"location":"core/commands/#scantxoutset","title":"scantxoutset","text":"<p>EXPERIMENTAL warning: this call may be removed or changed in future releases.</p> <p>Scans the unspent transaction output set for entries that match certain output descriptors. Examples of output descriptors are: addr() Outputs whose scriptPubKey corresponds to the specified address (does not include P2PK) raw() Outputs whose scriptPubKey equals the specified hex scripts combo() P2PK, P2PKH, P2WPKH, and P2SH-P2WPKH outputs for the given pubkey pkh() P2PKH outputs for the given pubkey sh(multi(,,,...)) P2SH-multisig outputs for the given threshold and pubkeys <p>In the above,  either refers to a fixed public key in hexadecimal notation, or to an xpub/xprv optionally followed by one or more path elements separated by \"/\", and optionally ending in \"/\" (unhardened), or \"/'\" or \"/*h\" (hardened) to specify all unhardened or hardened child keys. In the latter case, a range needs to be specified by below if different from 1000. For more information on output descriptors, see the documentation in the doc/descriptors.md file. <p>Arguments:</p> <pre><code>1. \"action\"                       (string, required) The action to execute\n                                      \"start\" for starting a scan\n                                      \"abort\" for aborting the current scan (returns true when abort was successful)\n                                      \"status\" for progress report (in %) of the current scan\n2. \"scanobjects\"                  (array, required) Array of scan objects\n    [                             Every scan object is either a string descriptor or an object:\n        \"descriptor\",             (string, optional) An output descriptor\n        {                         (object, optional) An object with output descriptor and metadata\n          \"desc\": \"descriptor\",   (string, required) An output descriptor\n          \"range\": n,             (numeric, optional) Up to what child index HD chains should be explored (default: 1000)\n        },\n        ...\n    ]\n</code></pre> <p>Result:</p> <pre><code> {\n  \"unspents\": [\n    {\n    \"txid\" : \"transactionid\",     (string) The transaction id\n    \"vout\": n,                    (numeric) the vout value\n    \"scriptPubKey\" : \"script\",    (string) the script key\n    \"amount\" : x.xxx,             (numeric) The total amount in MRX of the unspent output\n    \"height\" : n,                 (numeric) Height of the unspent transaction output\n   }\n   ,...], \n \"total_amount\" : x.xxx,          (numeric) The total amount of all found unspent outputs in MRX\n]\n</code></pre>"},{"location":"core/commands/#searchlogs","title":"searchlogs","text":"<p>requires -logevents to be enabled</p> <p>Arguments:</p> <pre><code>1. \"fromBlock\"        (numeric, required) The number of the earliest block (latest may be given to mean the most recent block).\n2. \"toBlock\"          (string, required) The number of the latest block (-1 may be given to mean the most recent block).\n3. \"address\"          (string, optional) An address or a list of addresses to only get logs from particular account(s).\n4. \"topics\"           (string, optional) An array of values from which at least one must appear in the log entries. The order is important, if you want to leave topics out use null, e.g. [\"null\", \"0x00...\"]. \n5. \"minconf\"          (uint, optional, default=0) Minimal number of confirmations before a log is returned\n</code></pre> <p>Examples:</p> <pre><code>&gt; metrix-cli searchlogs 0 100 '{\"addresses\": [\"12ae42729af478ca92c8c66773a3e32115717be4\"]}' '{\"topics\": [\"null\",\"b436c2bf863ccd7b8f63171201efd4792066b4ce8e543dde9c3e9e9ab98e216c\"]}'\n\n&gt; curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"searchlogs\", \"params\": [0 100 {\"addresses\": [\"12ae42729af478ca92c8c66773a3e32115717be4\"]} {\"topics\": [\"null\",\"b436c2bf863ccd7b8f63171201efd4792066b4ce8e543dde9c3e9e9ab98e216c\"]}] }' -H 'content-type: text/plain;' http://127.0.0.1:33831/\n</code></pre>"},{"location":"core/commands/#verifychain","title":"verifychain","text":"<p>Verifies blockchain database.</p> <p>Arguments:</p> <pre><code>1. checklevel (numeric, optional, 0-4, default=3) How thorough the block verification is.\n2. nblocks    (numeric, optional, default=6, 0=all) The number of blocks to check.\n</code></pre> <p>Result:</p> <pre><code>true|false (boolean) Verified or not\n</code></pre> <p>Examples:</p> <pre><code>&gt; metrix-cli verifychain\n\n&gt; curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"verifychain\", \"params\": [] }' -H 'content-type: text/plain;' http://127.0.0.1:33831/\n</code></pre>"},{"location":"core/commands/#verifytxoutproof","title":"verifytxoutproof","text":"<p>Verifies that a proof points to a transaction in a block, returning the transaction it commits to and throwing an RPC error if the block is not in our best chain</p> <p>Arguments:</p> <pre><code>1. \"proof\" (string, required) The hex-encoded proof generated by gettxoutproof\n</code></pre> <p>Result:</p> <pre><code>[\"txid\"] (array, strings) The txid(s) which the proof commits to, or empty array if the proof can not be validated.\n</code></pre> <p>Test example:</p> <pre><code>verifytxoutproof \"0000002081d3145a457b724b725171603a991b8d8186f0506c65722e436a6a33d039690ed689a1e4bdea746f8a3c47d6856765282fb5f7f20c9c43cc9e0170b6ba1214076010135d8683001b0000000052ef386ec7ae80719e408c3ea4193583bd0665fffd633d5e10b19e26375ac9b6386faa7484bfd98fc4789fd584229d5c20f72f772a8b3024ea94d1563e84e964b7e989413b1f509a5c14f24dadcf6da7e4f9e8559e5f6ff185cbc978fa1693fc0100000046304402205c0fbeff48e49b24848fba7428ea1c821ef4942135d60f51f6a4260e76941ac5022012a051fc518ec6b684a49eaf75631cdfa5574b170ccab6a0612da44585eab5600300000002fc77727661996828f410e89871d981a1c37f951d35d4ed196745d348cc74ca611849670ed23cdc629f56093cb030457bc2accd02f6df375c1a448fc7c824aa5c010d\"\n</code></pre> <p>Test result:</p> <pre><code>[\n  \"5caa24c8c78f441a5c37dff602cdacc27b4530b03c09569f62dc3cd20e674918\"\n]\n</code></pre>"},{"location":"core/commands/#waitforlogs","title":"waitforlogs","text":"<p>waitforlogs (fromBlock) (toBlock) (filter) (minconf) requires -logevents to be enabled</p> <p>Waits for a new logs and return matching log entries. When the call returns, it also specifies the next block number to start waiting for new logs. By calling waitforlogs repeatedly using the returned <code>nextBlock</code> number, a client can receive a stream of up-to-date log entires.</p> <p>This call is different from the similarly named <code>waitforlogs</code>. This call returns individual matching log entries, <code>searchlogs</code> returns a transaction receipt if one of the log entries of that transaction matches the filter conditions.</p> <p>Arguments:</p> <pre><code>1. fromBlock (int | \"latest\", optional, default=null) The block number to start looking for logs. ()\n2. toBlock   (int | \"latest\", optional, default=null) The block number to stop looking for logs. If null, will wait indefinitely into the future.\n3. filter    ({ addresses?: Hex160String[], topics?: Hex256String[] }, optional default={}) Filter conditions for logs. Addresses and topics are specified as array of hexadecimal strings\n4. minconf   (uint, optional, default=6) Minimal number of confirmations before a log is returned\n</code></pre> <p>Result:</p> <pre><code>An object with the following properties:\n1. logs (LogEntry[]) Array of matchiing log entries. This may be empty if `filter` removed all entries.2. count (int) How many log entries are returned.3. nextBlock (int) To wait for new log entries haven't seen before, use this number as `fromBlock`\nUsage:\n`waitforlogs` waits for new logs, starting from the tip of the chain.\n`waitforlogs 600` waits for new logs, but starting from block 600. If there are logs available, this call will return immediately.\n`waitforlogs 600 700` waits for new logs, but only up to 700th block\n`waitforlogs null null` this is equivalent to `waitforlogs`, using default parameter values\n`waitforlogs null null` { \"addresses\": [ \"ff0011...\" ], \"topics\": [ \"c0fefe\"] }` waits for logs in the future matching the specified conditions\n</code></pre> <p>Sample Output:</p> <pre><code>{\n  \"entries\": [\n    {\n      \"blockHash\": \"56d5f1f5ec239ef9c822d9ed600fe9aa63727071770ac7c0eabfc903bf7316d4\",\n      \"blockNumber\": 3286,\n      \"transactionHash\": \"00aa0f041ce333bc3a855b2cba03c41427cda04f0334d7f6cb0acad62f338ddc\",\n      \"transactionIndex\": 2,\n      \"from\": \"3f6866e2b59121ada1ddfc8edc84a92d9655675f\",\n      \"to\": \"8e1ee0b38b719abe8fa984c986eabb5bb5071b6b\",\n      \"cumulativeGasUsed\": 23709,\n      \"gasUsed\": 23709,\n      \"contractAddress\": \"8e1ee0b38b719abe8fa984c986eabb5bb5071b6b\",\n      \"topics\": [\n        \"f0e1159fa6dc12bb31e0098b7a1270c2bd50e760522991c6f0119160028d9916\",\n        \"0000000000000000000000000000000000000000000000000000000000000002\"\n      ],\n      \"data\": \"00000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000003\"\n    }\n  ],\n\n  \"count\": 7,\n  \"nextblock\": 801\n}\n</code></pre>"},{"location":"core/commands/#control","title":"Control","text":""},{"location":"core/commands/#echo","title":"echo","text":"<p>echo|echojson \"message\" ...</p> <p>Simply echo back the input arguments. This command is for testing.</p> <p>The difference between echo and echojson is that echojson has argument conversion enabled in the client-side table inmetrix-cli and the GUI. There is no server-side difference.</p>"},{"location":"core/commands/#getmemoryinfo","title":"getmemoryinfo","text":"<p>Returns an object containing information about memory usage.</p> <p>Arguments:</p> <pre><code>1. \"mode\" determines what kind of information is returned. This argument is optional, the default mode is \"stats\".\n  - \"stats\" returns general statistics about memory usage in the daemon.\n  - \"mallocinfo\" returns an XML string describing low-level heap state (only available if compiled with glibc 2.10+).\n</code></pre> <p>Result (mode \"stats\"):</p> <pre><code>{\n  \"locked\": {               (json object) Information about locked memory manager\n    \"used\": xxxxx,          (numeric) Number of bytes used\n    \"free\": xxxxx,          (numeric) Number of bytes available in current arenas\n    \"total\": xxxxxxx,       (numeric) Total number of bytes managed\n    \"locked\": xxxxxx,       (numeric) Amount of bytes that succeeded locking. If this number is smaller than total, locking pages failed at some point and key data could be swapped to disk.\n    \"chunks_used\": xxxxx,   (numeric) Number allocated chunks\n    \"chunks_free\": xxxxx,   (numeric) Number unused chunks\n  }\n}\n</code></pre> <p>Result (mode \"mallocinfo\"):</p> <pre><code>\"&lt;malloc version=\"1\"&gt;...\"\n</code></pre> <p>Examples:</p> <pre><code>&gt; metrix-cli getmemoryinfo\n\n&gt; curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"getmemoryinfo\", \"params\": [] }' -H 'content-type: text/plain;' http://127.0.0.1:33831/\n</code></pre>"},{"location":"core/commands/#help","title":"help","text":"<p>List all commands, or get help for a specified command.</p> <p>Arguments:</p> <pre><code>1. \"command\"     (string, optional) The command to get help on\n</code></pre> <p>Result:</p> <pre><code>\"text\"     (string) The help text\n</code></pre>"},{"location":"core/commands/#logging","title":"logging","text":"<p>Gets and sets the logging configuration.</p> <p>When called without an argument, returns the list of categories with status that are currently being debug logged or not.</p> <p>When called with arguments, adds or removes categories from debug logging and return the lists above. The arguments are evaluated in order \"include\", \"exclude\".</p> <p>If an item is both included and excluded, it will thus end up being excluded.</p> <p>The valid logging categories are: net, tor, mempool, http, bench, zmq, db, rpc, estimatefee, addrman, selectcoins, reindex, cmpctblock, rand, prune, proxy, mempoolrej, libevent, coindb, qt, leveldb, coinstake, http-poll.</p> <p>In addition, the following are available as category names with special meanings:   - \"all\",  \"1\" : represent all logging categories.   - \"none\", \"0\" : even if other logging categories are specified, ignore all of them.</p> <p>Arguments:</p> <pre><code>1. \"include\"        (array of strings, optional) A json array of categories to add debug logging\n     [\n       \"category\"   (string) the valid logging category\n       ,...\n     ]\n2. \"exclude\"        (array of strings, optional) A json array of categories to remove debug logging\n     [\n       \"category\"   (string) the valid logging category\n       ,...\n     ]\n</code></pre> <p>Result:</p> <pre><code>{                  \n  \"category\": 0|1,  (numeric) if being debug logged or not. 0:inactive, 1:active\n  ...\n}\n</code></pre> <p>Examples:</p> <pre><code>&gt; metrix-cli logging \"[\\\"all\\\"]\" \"[\\\"http\\\"]\"\n\n&gt; curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"logging\", \"params\": [[\"all\"], \"[libevent]\"] }' -H 'content-type: text/plain;' http://127.0.0.1:33831/\n</code></pre>"},{"location":"core/commands/#stop","title":"stop","text":"<p>Stop Metrix server.</p>"},{"location":"core/commands/#uptime","title":"uptime","text":"<p>Returns the total uptime of the server.</p> <p>Result:</p> <p><code>ttt (numeric) The number of seconds that the server has been runnin</code>g</p> <p>Examples:</p> <pre><code>&gt; metrix-cli uptime\n\n&gt; curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"uptime\", \"params\": [] }' -H 'content-type: text/plain;' http://127.0.0.1:33831/\n</code></pre>"},{"location":"core/commands/#generating","title":"Generating","text":""},{"location":"core/commands/#generate","title":"generate","text":"<p>Mine up to nblocks blocks immediately (before the RPC call returns) to an address in the wallet.</p> <p>Arguments:</p> <pre><code>1. nblocks  (numeric, required) How many blocks are generated immediately.\n2. maxtries (numeric, optional) How many iterations to try (default = 1000000).\n</code></pre> <p>Result:</p> <pre><code>[ blockhashes ] (array) hashes of blocks generated\n</code></pre> <p>Examples:</p> <p>Generate 11 blocks</p> <pre><code> &gt; metrix-cli generate 11\n</code></pre>"},{"location":"core/commands/#generatetoaddress","title":"generatetoaddress","text":"<p>Mine blocks immediately to a specified address (before the RPC call returns)</p> <p>Arguments:</p> <pre><code>1. nblocks  (numeric, required) How many blocks are generated immediately.\n2. address  (string, required) The address to send the newly generated metrix to.\n3. maxtries (numeric, optional) How many iterations to try (default = 1000000).\n</code></pre> <p>Result:</p> <pre><code>[ blockhashes ] (array) hashes of blocks generated\n</code></pre> <p>Examples:</p> <pre><code>Generate 11 blocks to myaddress\n\n&gt; metrix-cli generatetoaddress 11 \"myaddress\"\n</code></pre>"},{"location":"core/commands/#mining","title":"Mining","text":""},{"location":"core/commands/#getblocktemplate","title":"getblocktemplate","text":"<p>If the request parameters include a 'mode' key, that is used to explicitly select between the default 'template' request or a 'proposal'. It returns data needed to construct a block to work on. For full specification, see BIPs 22, 23, 9, and 145: https://github.com/bitcoin/bips/blob/master/bip-0022.mediawiki https://github.com/bitcoin/bips/blob/master/bip-0023.mediawiki https://github.com/bitcoin/bips/blob/master/bip-0009.mediawiki#getblocktemplate_changes https://github.com/bitcoin/bips/blob/master/bip-0145.mediawiki</p> <p>Arguments:</p> <pre><code>1. template_request (json object, optional) A json object in the following spec\n{\n  \"mode\":\"template\" (string, optional) This must be set to \"template\", \"proposal\" (see BIP 23), or omitted\n  \"capabilities\":[ (array, optional) A list of strings\n  \"support\" (string) client side supported feature, 'longpoll', 'coinbasetxn', 'coinbasevalue', 'proposal', 'serverlist', 'workid'\n   ,...\n    ],\n  \"rules\":\n [ \n    (array, optional) A list of strings\n    \"support\" (string) client side supported softfork deployment\n    ,...\n  ]\n}\n</code></pre> <p>Result:</p> <pre><code>{\n  \"version\" : n,                    (numeric) The preferred block version\n  \"rules\" : [ \"rulename\", ... ],    (array of strings) specific block rules that are to be enforced\n  \"vbavailable\" : {                 (json object) set of pending, supported versionbit (BIP 9) softfork deployments\n      \"rulename\" : bitnumber          (numeric) identifies the bit number as indicating acceptance and readiness for the named softfork rule\n      ,...\n  },\n  \"vbrequired\" : n,                 (numeric) bit mask of versionbits the server requires set in submissions\n  \"previousblockhash\" : \"xxxx\",     (string) The hash of current highest block\n  \"transactions\" : [                (array) contents of non-coinbase transactions that should be included in the next block\n      {\n         \"data\" : \"xxxx\",             (string) transaction data encoded in hexadecimal (byte-for-byte)\n         \"txid\" : \"xxxx\",             (string) transaction id encoded in little-endian hexadecimal\n         \"hash\" : \"xxxx\",             (string) hash encoded in little-endian hexadecimal (including witness data)\n         \"depends\" : [                (array) array of numbers \n             n                          (numeric) transactions before this one (by 1-based index in 'transactions' list) that must be present in the final block if this one is\n             ,...\n         ],\n         \"fee\": n,                    (numeric) difference in value between transaction inputs and outputs (in satoshis); for coinbase transactions, this is a negative Number of the total collected block fees (ie, not including the block subsidy); if key is not present, fee is unknown and clients MUST NOT assume there isn't one\n         \"sigops\" : n,                (numeric) total SigOps cost, as counted for purposes of block limits; if key is not present, sigop cost is unknown and clients MUST NOT assume it is zero\n         \"weight\" : n,                (numeric) total transaction weight, as counted for purposes of block limits\n      }\n      ,...\n  ],\n  \"coinbaseaux\" : {                 (json object) data that should be included in the coinbase's scriptSig content\n      \"flags\" : \"xx\"                  (string) key name is to be ignored, and value included in scriptSig\n  },\n  \"coinbasevalue\" : n,              (numeric) maximum allowable input to coinbase transaction, including the generation award and transaction fees (in satoshis)\n  \"coinbasetxn\" : { ... },          (json object) information for coinbase transaction\n  \"target\" : \"xxxx\",                (string) The hash target\n  \"mintime\" : xxx,                  (numeric) The minimum timestamp appropriate for next block time in seconds since epoch (Jan 1 1970 GMT)\n  \"mutable\" : [                     (array of string) list of ways the block template may be changed \n     \"value\"                          (string) A way the block template may be changed, e.g. 'time', 'transactions', 'prevblock'\n     ,...\n  ],\n  \"noncerange\" : \"00000000ffffffff\",(string) A range of valid nonces\n  \"sigoplimit\" : n,                 (numeric) limit of sigops in blocks\n  \"sizelimit\" : n,                  (numeric) limit of block size\n  \"weightlimit\" : n,                (numeric) limit of block weight\n  \"curtime\" : ttt,                  (numeric) current timestamp in seconds since epoch (Jan 1 1970 GMT)\n  \"bits\" : \"xxxxxxxx\",              (string) compressed target of next block\n  \"height\" : n                      (numeric) The height of the next block\n}\n</code></pre>"},{"location":"core/commands/#getmininginfo","title":"getmininginfo","text":"<p>Returns a json object containing mining-related information.</p> <p>Examples:</p> <pre><code> &gt;metrix-cli getmininginfo\n\n &gt;curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"getmininginfo\", \"params\": [] }' -H 'content-type: text/plain;' http://127.0.0.1:33831/\n</code></pre> <p>Result:</p> <pre><code>{\n  \"blocks\": nnn,             (numeric) The current block\n  \"currentblockweight\": nnn, (numeric) The last block weight\n  \"currentblocktx\": nnn,     (numeric) The last block transaction\n  \"difficulty\": xxx.xxxxx    (numeric) The current difficulty\n  \"networkhashps\": nnn,      (numeric) The network hashes per second\n  \"pooledtx\": n              (numeric) The size of the mempool\n  \"chain\": \"xxxx\",           (string) current network name as defined in BIP70 (main, test, regtest)\n  \"warnings\": \"...\"          (string) any network and blockchain warnings\n}\n</code></pre> <p>Test example:</p> <pre><code>./metrix-cli getmininginfo\n</code></pre> <p>Test result:</p> <pre><code> {\n  \"blocks\": 401661,\n  \"currentblockweight\": 4000,\n  \"currentblocktx\": 0,\n  \"difficulty\": {\n    \"proof-of-work\": 1.52587890625e-005,\n    \"proof-of-stake\": 2798173.863126792,\n    \"search-interval\": 0\n  },\n  \"blockvalue\": 400000000,\n  \"netmhashps\": 0,\n  \"netstakeweight\": 1335439448399970,\n  \"errors\": \"\",\n  \"networkhashps\": 76789015825010.86,\n  \"pooledtx\": 2,\n  \"stakeweight\": {\n    \"minimum\": 568351000,\n    \"maximum\": 0,\n    \"combined\": 568351000\n  },\n  \"chain\": \"main\",\n  \"warnings\": \"\"\n}\n</code></pre>"},{"location":"core/commands/#getnetworkhashps","title":"getnetworkhashps","text":"<p>Returns the estimated network hashes per second based on the last n blocks (for PoW only). Pass in [blocks] to override # of blocks, -1 specifies since last difficulty change. Pass in [height] to estimate the network speed at the time when a certain block was found.</p> <p>Arguments:</p> <pre><code>1. nblocks (numeric, optional, default=120) The number of blocks, or -1 for blocks since last difficulty change.\n2. height  (numeric, optional, default=-1) To estimate at the time of the given height.\n</code></pre> <p>Result:</p> <pre><code>x (numeric) Hashes per second estimated\n</code></pre> <p>Examples:</p> <pre><code>&gt; metrix-cli getnetworkhashps\n\n&gt; curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"getnetworkhashps\", \"params\": [] }' -H 'content-type: text/plain;' http://127.0.0.1:33831/\n</code></pre> <p>Test result:</p> <pre><code>3.514351301619956e-008\n</code></pre>"},{"location":"core/commands/#getstakinginfo","title":"getstakinginfo","text":"<p>Returns an object containing staking-related information.</p> <p>Example:</p> <pre><code>./metrix-cli getstakinginfo\n</code></pre> <p>Result:</p> <pre><code>{\n  \"enabled\": true or false,(bool),if HD key is enabled, the value if true,else is false.\n  \"staking\": true or false,(bool),if wallet staking token or not.\n  \"errors\": \"XXX\",         (string), any network and blockchain errors\n  \"currentblocktx\": n,     (numberic),the last block transaction\n  \"pooledtx\": n,           (numberic), The size of the mempool\n  \"difficulty\": n,         (numberic),the current proof-of-work difficulty\n  \"search-interval\": n,\n  \"weight\": n,             (numberic), the total staking token number\n  \"netstakeweight\": n,     (numberic), the total numbers of staking in the network\n  \"expectedtime\": n,       (numberic), the time that to get the rights to cast the block\n}\n</code></pre> <p>Test example:</p> <pre><code>./metrix-cli getstakinginfo\n</code></pre> <p>Test result:</p> <pre><code>{\n  \"enabled\": true,\n  \"staking\": false,\n  \"errors\": \"\",\n  \"currentblocktx\": 0,\n  \"pooledtx\": 0,\n  \"difficulty\": 4.656542373906925e-010,\n  \"search-interval\": 0,\n  \"weight\": 0,\n  \"netstakeweight\": 0,\n  \"expectedtime\": 0\n}\n</code></pre>"},{"location":"core/commands/#getsubsidy","title":"getsubsidy","text":"<p>Returns subsidy value for the specified value of target.</p>"},{"location":"core/commands/#prioritisetransaction","title":"prioritisetransaction","text":"<p>Accepts the transaction into mined blocks at a higher (or lower) priority</p> <p>Arguments:</p> <pre><code>1. \"txid\"         (string, required) The transaction id.\n2. dummy          (numeric, optional) API-Compatibility for previous API. Must be zero or null.\n                  DEPRECATED. For forward compatibility use named arguments and omit this parameter.\n3. fee_delta      (numeric, required) The fee value (in satoshis) to add (or subtract, if negative).\n                  Note, that this value is not a fee rate. It is a value to modify absolute fee of the TX.\n                  The fee is not actually paid, only the algorithm for selecting transactions into a block\n                  considers the transaction as it would have paid a higher (or lower) fee.\n</code></pre> <p>Result:</p> <pre><code>true (boolean) Returns true\n</code></pre> <p>Examples:</p> <pre><code>&gt; metrix-cli prioritisetransaction \"txid\" 0.0 10000\n\n&gt; curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"prioritisetransaction\", \"params\": [\"txid\", 0.0, 10000] }' -H 'content-type: text/plain;' http://127.0.0.1:33831\n</code></pre>"},{"location":"core/commands/#submitblock","title":"submitblock","text":"<p>Attempts to submit new block to network. See https://en.bitcoin.it/wiki/BIP_0022 for full specification.</p> <p>Arguments:</p> <pre><code>1. \"hexdata\" (string, required) the hex-encoded block data to submit\n2. \"dummy\" (optional) dummy value, for compatibility with BIP22. This value is ignored.\n</code></pre> <p>Examples:</p> <pre><code>&gt; metrix-cli submitblock \"mydata\"\n\n&gt; curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"submitblock\", \"params\": [\"mydata\"] }' -H 'content-type: text/plain;' http://127.0.0.1:33831/\n</code></pre>"},{"location":"core/commands/#network","title":"Network","text":""},{"location":"core/commands/#addnode","title":"addnode","text":"<p>Attempts to add or remove a node from the addnode list. Or try a connection to a node once. Nodes added using addnode (or -connect) are protected from DoS disconnection and are not required to be full nodes/support SegWit as other outbound peers are (though such peers will not be synced from).</p> <p>Arguments:</p> <pre><code>1. \"node\" (string, required) The node (see getpeerinfo for nodes)\n\n2. \"command\" (string, required) 'add' to add a node to the list, 'remove' to remove a node from the list, 'onetry' to try a connection to the node once\n</code></pre> <p>Examples:</p> <pre><code>- Mainnet port 33830, Testnet port 33840, Regtest port 33850:\n\n&gt; metrix-cli addnode \"192.168.0.6:33830\" \"onetry\"\n\n&gt; curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"addnode\", \"params\": [\"192.168.0.6:33830\", \"onetry\"] }' -H 'content-type: text/plain;' http://127.0.0.1:33831/\n</code></pre>"},{"location":"core/commands/#clearbanned","title":"clearbanned","text":"<p>Clear all banned IPs.</p> <p>Examples:</p> <pre><code>&gt; metrix-cli clearbanned\n\n&gt; curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"clearbanned\", \"params\": [] }' -H 'content-type: text/plain;' http://127.0.0.1:33831/\n</code></pre>"},{"location":"core/commands/#disconnectnode","title":"disconnectnode","text":"<p>Immediately disconnects from the specified peer node.</p> <p>Strictly one out of 'address' and 'nodeid' can be provided to identify the node.</p> <p>To disconnect by nodeid, either set 'address' to the empty string, or call using the named 'nodeid' argument only.</p> <p>Arguments:</p> <pre><code>1. \"address\"     (string, optional) The IP address/port of the node\n2. \"nodeid\"      (number, optional) The node ID (see getpeerinfo for node IDs)\n</code></pre> <p>Examples: </p> <pre><code>- Mainnet port 33830, Testnet port 33840, Regtest port 33850:\n- \n&gt; metrix-cli disconnectnode \"192.168.0.6:33830\"\n\n&gt; metrix-cli disconnectnode \"\" 1\n\n&gt; curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"disconnectnode\", \"params\": [\"192.168.0.6:33830\"] }' -H 'content-type: text/plain;' http://127.0.0.1:33831/\n\n&gt; curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"disconnectnode\", \"params\": [\"\", 1] }' -H 'content-type: text/plain;' http://127.0.0.1:33831/\n</code></pre>"},{"location":"core/commands/#estimaterawfee","title":"estimaterawfee","text":"<p>WARNING: This interface is unstable and may disappear or change!</p> <p>WARNING: This is an advanced API call that is tightly coupled to the specific implementation of fee estimation. The parameters it can be called with and the results it returns will change if the internal implementation changes.</p> <p>Estimates the approximate fee per kilobyte needed for a transaction to begin confirmation within conf_target blocks if possible. Uses virtual transaction size as defined in BIP 141 (witness data is discounted).</p> <p>Arguments:</p> <pre><code>1. conf_target (numeric) Confirmation target in blocks (1 - 1008)\n2. threshold   (numeric, optional) The proportion of transactions in a given feerate range that must have been\nconfirmed within conf_target in order to consider those feerates as high enough and proceed to check\nlower buckets. Default: 0.95\n</code></pre> <p>Result:</p> <pre><code>{\n  \"short\" : {                 estimate for short time horizon\n      \"feerate\" : x.x,        (numeric, optional) estimate fee rate in MRX/kB\n      \"decay\" : x.x,          (numeric) exponential decay (per block) for historical moving average of confirmation data\n      \"scale\" : x,            (numeric) The resolution of confirmation targets at this time horizon\n      \"pass\" : {              (json object, optional) information about the lowest range of feerates to succeed in meeting the threshold\n          \"startrange\" : x.x,     (numeric) start of feerate range\n          \"endrange\" : x.x,       (numeric) end of feerate range\n          \"withintarget\" : x.x,   (numeric) number of txs over history horizon in the feerate range that were confirmed within target\n          \"totalconfirmed\" : x.x, (numeric) number of txs over history horizon in the feerate range that were confirmed at any point\n          \"inmempool\" : x.x,      (numeric) current number of txs in mempool in the feerate range unconfirmed for at least target blocks\n          \"leftmempool\" : x.x,    (numeric) number of txs over history horizon in the feerate range that left mempool unconfirmed after target\n      },\n      \"fail\" : { ... },       (json object, optional) information about the highest range of feerates to fail to meet the threshold\n      \"errors\":  [ str... ]   (json array of strings, optional) Errors encountered during processing\n  },\n  \"medium\" : { ... },    (json object, optional) estimate for medium time horizon\n  \"long\" : { ... }       (json object) estimate for long time horizon\n}\n\nResults are returned for any horizon which tracks blocks up to the confirmation target.\n</code></pre> <p>Example:</p> <pre><code>&gt; metrix-cli estimaterawfee 6 0.9\n</code></pre>"},{"location":"core/commands/#getaddednodeinfo","title":"getaddednodeinfo","text":"<p>Returns information about the given added node, or all added nodes (note that onetry addnodes are not listed here)</p> <p>Arguments:</p> <pre><code>1. \"node\" (string, optional) If provided, return information about this specific node, otherwise all nodes are returned.\n</code></pre> <p>Result:</p> <pre><code> [\n  {\n    \"addednode\" : \"192.168.0.201\",          (string) The node IP address or name (as provided to addnode)\n    \"connected\" : true|false,               (boolean) If connected\n    \"addresses\" : [                         (list of objects) Only when connected = true\n       {\n         \"address\" : \"192.168.0.201:33830\",  (string) The metrix server IP and port we're connected to\n         \"connected\" : \"outbound\"           (string) connection, inbound or outbound\n       }\n     ]\n  }\n  ,...\n]\n</code></pre> <p>Examples:</p> <pre><code>&gt; metrix-cli getaddednodeinfo \"192.168.0.201\"\n\n&gt; curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"getaddednodeinfo\", \"params\": [\"192.168.0.201\"] }' -H 'content-type: text/plain;' http://127.0.0.1:33831/\n</code></pre>"},{"location":"core/commands/#getconnectioncount","title":"getconnectioncount","text":"<p>Returns the number of connections to other nodes.</p> <p>Result:</p> <pre><code>n (numeric) The connection count\n</code></pre> <p>Examples:</p> <pre><code>&gt; metrix-cli getconnectioncount\n\n&gt; curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"getconnectioncount\", \"params\": [] }' -H 'content-type: text/plain;' http://127.0.0.1:33831/\n</code></pre> <p>Test example:</p> <pre><code>./metrix-cli getconnectioncount\n</code></pre> <p>Test result:</p> <pre><code>7\n</code></pre>"},{"location":"core/commands/#getnettotals","title":"getnettotals","text":"<p>Returns information about network traffic, including bytes in, bytes out, and current time.</p> <p>Result:</p> <pre><code>{\n  \"totalbytesrecv\": n,                     (numeric) Total bytes received\n  \"totalbytessent\": n,                     (numeric) Total bytes sent\n  \"timemillis\": t,                         (numeric) Current UNIX time in milliseconds\n  \"uploadtarget\":\n  {\n    \"timeframe\": n,                        (numeric) Length of the measuring timeframe in seconds\n    \"target\": n,                           (numeric) Target in bytes\n    \"target_reached\": true|false,          (boolean) True if target is reached\n    \"serve_historical_blocks\": true|false, (boolean) True if serving historical blocks\n    \"bytes_left_in_cycle\": t,              (numeric) Bytes left in current time cycle\n    \"time_left_in_cycle\": t                (numeric) Seconds left in current time cycle\n  }\n}\n</code></pre> <p>Examples:</p> <pre><code>&gt; metrix-cli getnettotals\n\n&gt; curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"getnettotals\", \"params\": [] }' -H 'content-type: text/plain;' http://127.0.0.1:33831/\n</code></pre>"},{"location":"core/commands/#getnetworkinfo","title":"getnetworkinfo","text":"<p>Returns an object containing various state info regarding P2P networking.</p> <p>Result:</p> <pre><code>{\n  \"version\": xxxxx,                      (numeric) the server version\n  \"subversion\": \"/Satoshi:x.x.x/\",       (string) the server subversion string\n  \"protocolversion\": xxxxx,              (numeric) the protocol version\n  \"localservices\": \"xxxxxxxxxxxxxxxx\",   (string) the services we offer to the network\n  \"localrelay\": true|false,              (bool) true if transaction relay is requested from peers\n  \"timeoffset\": xxxxx,                   (numeric) the time offset\n  \"connections\": xxxxx,                  (numeric) the number of connections\n  \"networkactive\": true|false,           (bool) whether p2p networking is enabled\n  \"networks\": [                          (array) information per network\n  {\n    \"name\": \"xxx\",                       (string) network (ipv4, ipv6 or onion)\n    \"limited\": true|false,               (boolean) is the network limited using -onlynet?\n    \"reachable\": true|false,             (boolean) is the network reachable?\n    \"proxy\": \"host:port\"                 (string) the proxy that is used for this network, or empty if none\n    \"proxy_randomize_credentials\": true|false,  (string) Whether randomized credentials are used\n  }\n  ,...\n  ],\n  \"relayfee\": x.xxxxxxxx,                (numeric) minimum relay fee for transactions in MRX/kB\n  \"incrementalfee\": x.xxxxxxxx,          (numeric) minimum fee increment for mempool limiting or BIP 125 replacement in MRX/kB\n  \"localaddresses\": [                    (array) list of local addresses\n  {\n    \"address\": \"xxxx\",                   (string) network address\n    \"port\": xxx,                         (numeric) network port\n    \"score\": xxx                         (numeric) relative score\n  }\n  ,...\n  ]\n  \"warnings\": \"...\"                      (string) any network and blockchain warnings\n}\n</code></pre> <p>Examples:</p> <pre><code>&gt; metrix-cli getnetworkinfo\n\n&gt; curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"getnetworkinfo\", \"params\": [] }' -H 'content-type: text/plain;' http://127.0.0.1:33831/\n</code></pre>"},{"location":"core/commands/#getpeerinfo","title":"getpeerinfo","text":"<p>Returns data about each connected network node as a json array of objects.</p> <p>Result:</p> <pre><code>[\n  {\n    \"id\": n,                   (numeric) Peer index\n    \"addr\":\"host:port\",        (string) The IP address and port of the peer\n    \"addrbind\":\"ip:port\",      (string) Bind address of the connection to the peer\n    \"addrlocal\":\"ip:port\",     (string) Local address as reported by the peer\n    \"services\":\"xxxxxxxxxxxxxxxx\",   (string) The services offered\n    \"relaytxes\":true|false,    (boolean) Whether peer has asked us to relay transactions to it\n    \"lastsend\": ttt,           (numeric) The time in seconds since epoch (Jan 1 1970 GMT) of the last send\n    \"lastrecv\": ttt,           (numeric) The time in seconds since epoch (Jan 1 1970 GMT) of the last receive\n    \"bytessent\": n,            (numeric) The total bytes sent\n    \"bytesrecv\": n,            (numeric) The total bytes received\n    \"conntime\": ttt,           (numeric) The connection time in seconds since epoch (Jan 1 1970 GMT)\n    \"timeoffset\": ttt,         (numeric) The time offset in seconds\n    \"pingtime\": n,             (numeric) ping time (if available)\n    \"minping\": n,              (numeric) minimum observed ping time (if any at all)\n    \"pingwait\": n,             (numeric) ping wait (if non-zero)\n    \"version\": v,              (numeric) The peer version, such as 70001\n    \"subver\": \"/Satoshi:0.8.5/\",  (string) The string version\n    \"inbound\": true|false,     (boolean) Inbound (true) or Outbound (false)\n    \"addnode\": true|false,     (boolean) Whether connection was due to addnode/-connect or if it was an automatic/inbound connection\n    \"startingheight\": n,       (numeric) The starting height (block) of the peer\n    \"banscore\": n,             (numeric) The ban score\n    \"synced_headers\": n,       (numeric) The last header we have in common with this peer\n    \"synced_blocks\": n,        (numeric) The last block we have in common with this peer\n    \"inflight\": [\n       n,                      (numeric) The heights of blocks we're currently asking from this peer\n       ...\n    ],\n    \"whitelisted\": true|false, (boolean) Whether the peer is whitelisted\n    \"bytessent_per_msg\": {\n       \"addr\": n,              (numeric) The total bytes sent aggregated by message type\n       ...\n    },\n    \"bytesrecv_per_msg\": {\n       \"addr\": n,              (numeric) The total bytes received aggregated by message type\n       ...\n    }\n  }\n  ,...\n]\n</code></pre> <p>Examples:</p> <pre><code>&gt; metrix-cli getpeerinfo\n\n&gt; curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"getpeerinfo\", \"params\": [] }' -H 'content-type: text/plain;' http://127.0.0.1:33831/\n</code></pre> <p>Test example:</p> <pre><code>./metrix-cli getpeerinfo\n</code></pre> <p>Test result:\uff1a</p> <pre><code> {\n    \"id\": 1479,\n    \"addr\": \"171.96.72.225:63736\",\n    \"addrlocal\": \"59.46.230.210:33830\",\n    \"addrbind\": \"59.46.230.210:33830\",\n    \"services\": \"000000000000000d\",\n    \"relaytxes\": true,\n    \"lastsend\": 1562045310,\n    \"lastrecv\": 1562045263,\n    \"bytessent\": 405234,\n    \"bytesrecv\": 404534,\n    \"conntime\": 1561978028,\n    \"timeoffset\": -2,\n    \"pingtime\": 0.609372,\n    \"minping\": 0.140614,\n    \"version\": 70016,\n    \"subver\": \"/Satoshi:0.14.16/\",\n    \"inbound\": true,\n    \"addnode\": false,\n    \"startingheight\": 401184,\n    \"banscore\": 0,\n    \"synced_headers\": 401655,\n    \"synced_blocks\": 401650,\n    \"inflight\": [\n    ],\n    \"whitelisted\": false,\n    \"bytessent_per_msg\": {\n      \"addr\": 40437,\n      \"blocktxn\": 21843,\n      \"cmpctblock\": 77441,\n      \"feefilter\": 32,\n      \"getblocktxn\": 58,\n      \"getdata\": 13753,\n      \"getheaders\": 1021,\n      \"headers\": 63150,\n      \"inv\": 58072,\n      \"notfound\": 61,\n      \"ping\": 17952,\n      \"pong\": 17952,\n      \"reject\": 78,\n      \"sendcmpct\": 132,\n      \"sendheaders\": 24,\n      \"tx\": 93042,\n      \"verack\": 24,\n      \"version\": 162\n    },\n    \"bytesrecv_per_msg\": {\n      \"addr\": 11595,\n      \"blocktxn\": 16722,\n      \"cmpctblock\": 4544,\n      \"feefilter\": 32,\n      \"getaddr\": 24,\n      \"getblocktxn\": 2146,\n      \"getdata\": 14398,\n      \"getheaders\": 1021,\n      \"headers\": 101655,\n      \"inv\": 97978,\n      \"notfound\": 10071,\n      \"ping\": 17952,\n      \"pong\": 17952,\n      \"reject\": 140,\n      \"sendcmpct\": 1320,\n      \"sendheaders\": 24,\n      \"tx\": 106809,\n      \"verack\": 24,\n      \"version\": 127\n    },...\n  }\n</code></pre>"},{"location":"core/commands/#listbanned","title":"listbanned","text":"<p>List all banned IPs/Subnets.</p> <p>Examples:</p> <pre><code>&gt; metrix-cli listbanned\n\n&gt; curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"listbanned\", \"params\": [] }' -H 'content-type: text/plain;' http://127.0.0.1:33831/\n</code></pre>"},{"location":"core/commands/#ping","title":"ping","text":"<p>Requests that a ping be sent to all other nodes, to measure ping time. Results provided in getpeerinfo, pingtime and pingwait fields are decimal seconds. Ping command is handled in queue with all other commands, so it measures processing backlog, not just network ping.</p> <p>Examples:</p> <pre><code>&gt; metrix-cli ping\n\n&gt; curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"ping\", \"params\": [] }' -H 'content-type: text/plain;' http://127.0.0.1:33831/\n</code></pre>"},{"location":"core/commands/#setban","title":"setban","text":"<p>setban \"subnet\" \"add|remove\" (bantime) (absolute)</p> <p>Attempts to add or remove an IP/Subnet from the banned list.</p> <p>Arguments:</p> <pre><code>1. \"subnet\"       (string, required) The IP/Subnet (see getpeerinfo for nodes IP) with an optional netmask (default is /32 = single IP)\n2. \"command\"      (string, required) 'add' to add an IP/Subnet to the list, 'remove' to remove an IP/Subnet from the list\n3. \"bantime\"      (numeric, optional) time in seconds how long (or until when if [absolute] is set) the IP is banned (0 or empty means using the default time of 24h which can also be overwritten by the -bantime startup argument)\n4. \"absolute\"     (boolean, optional) If set, the bantime must be an absolute timestamp in seconds since epoch (Jan 1 1970 GMT)\n</code></pre> <p>Examples:</p> <pre><code>&gt; metrix-cli setban \"192.168.0.6\" \"add\" 86400\n\n&gt; metrix-cli setban \"192.168.0.0/24\" \"add\"\n\n&gt; curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"setban\", \"params\": [\"192.168.0.6\", \"add\", 86400] }' -H 'content-type: text/plain;' http://127.0.0.1:33831/\n</code></pre>"},{"location":"core/commands/#setnetworkactive","title":"setnetworkactive","text":"<p>Disable/enable all p2p network activity.</p> <p>Arguments:</p> <pre><code>1. \"state\" (boolean, required) true to enable networking, false to disable\n</code></pre>"},{"location":"core/commands/#rawtransactions","title":"Rawtransactions","text":""},{"location":"core/commands/#combinepsbt","title":"combinepsbt","text":"<p>Combine multiple partially signed Metrix transactions into one transaction. Implements the Combiner role.</p> <p>Arguments:</p> <pre><code>1. \"txs\" (string) A json array of base64 strings of partially signed transactions\n[\n  \"psbt\" (string) A base64 string of a PSBT\n  ,...\n]\n</code></pre> <p>Result:</p> <pre><code>\"psbt\" (string) The base64-encoded partially signed transaction\n</code></pre> <p>Examples:</p> <pre><code>&gt; metrix-cli combinepsbt [\"mybase64_1\", \"mybase64_2\", \"mybase64_3\"]\n</code></pre>"},{"location":"core/commands/#combinerawtransaction","title":"combinerawtransaction","text":"<p>Combine multiple partially signed transactions into one transaction. The combined transaction may be another partially signed transaction or a fully signed transaction.</p> <p>Arguments:</p> <pre><code>1. \"txs\" (string) A json array of hex strings of partially signed transactions\n[\n  \"hexstring\" (string) A transaction hash\n  ,...\n]\n</code></pre> <p>Result:</p> <pre><code>\"hex\" (string) The hex-encoded raw transaction with signature(s)\n</code></pre> <p>Examples:</p> <pre><code>&gt; metrix-cli combinerawtransaction [\"myhex1\", \"myhex2\", \"myhex3\"]\n</code></pre>"},{"location":"core/commands/#converttopsbt","title":"converttopsbt","text":"<p>Converts a network serialized transaction to a PSBT. This should be used only with createrawtransaction and fundrawtransaction createpsbt and walletcreatefundedpsbt should be used for new applications.</p> <p>Arguments:</p> <pre><code>1. \"hexstring\"   (string, required) The hex string of a raw transaction\n2. permitsigdata (boolean, optional, default=false) If true, any signatures in the input will be discarded and conversion.\nwill continue. If false, RPC will fail if any signatures are present.\n3. iswitness     (boolean, optional) Whether the transaction hex is a serialized witness transaction.\nIf iswitness is not present, heuristic tests will be used in decoding. If true, only witness deserializaion\nwill be tried. If false, only non-witness deserialization wil be tried. Only has an effect if\npermitsigdata is true.\n</code></pre> <p>Result:</p> <pre><code>\"psbt\" (string) The resulting raw transaction (base64-encoded string)\n</code></pre> <p>Examples:</p> <p>Create a transaction</p> <pre><code>&gt; metrix-cli createrawtransaction \"[{\\\"txid\\\":\\\"myid\\\",\\\"vout\\\":0}]\" \"[{\\\"data\\\":\\\"00010203\\\"}]\"\n</code></pre> <p>Convert the transaction to a PSBT</p> <pre><code>&gt; metrix-cli converttopsbt \"rawtransaction\"\n</code></pre>"},{"location":"core/commands/#createpsbt","title":"createpsbt","text":"<p>Creates a transaction in the Partially Signed Transaction format. Implements the Creator role.</p> <p>Arguments:</p> <pre><code>1. \"inputs\"           (array, required) A json array of json objects\n[\n  {\n    \"txid\":\"id\",      (string, required) The transaction id\n    \"vout\":n,         (numeric, required) The output number\n    \"sequence\":n      (numeric, optional) The sequence number\n  }\n  ,...\n]\n2. \"outputs\"          (array, required) a json array with outputs (key-value pairs), where none of the keys are duplicated.\nThat is, each address can only appear once and there can only be one 'data' object.\n[\n  {\n    \"address\": x.xxx, (obj, optional) A key-value pair. The key (string) is the metrix address, the value (float or string) is the amount in MRX\n  },\n  {\n    \"data\": \"hex\"     (obj, optional) A key-value pair. The key must be \"data\", the value is hex encoded data\n  },... \n  More key-value pairs of the above form. For compatibility reasons, a dictionary, which holds the key-value pairs directly, is also\naccepted as second parameter.\n]\n3. locktime           (numeric, optional, default=0) Raw locktime. Non-0 value also locktime-activates inputs\n4. replaceable        (boolean, optional, default=false) Marks this transaction as BIP125 replaceable.\nAllows this transaction to be replaced by a transaction with higher fees. If provided, it is an error if explicit sequence numbers are incompatible.\n</code></pre> <p>Result:</p> <pre><code>\"psbt\" (string) The resulting raw transaction (base64-encoded string)\n</code></pre> <p>Examples:</p> <pre><code>&gt; metrix-cli createpsbt \"[{\\\"txid\\\":\\\"myid\\\",\\\"vout\\\":0}]\" \"[{\\\"data\\\":\\\"00010203\\\"}]\"\n</code></pre>"},{"location":"core/commands/#createrawtransaction","title":"createrawtransaction","text":"<p>createrawtransaction [{\"txid\":\"id\",\"vout\":n},...] [{\"address\":amount},{\"data\":\"hex\"},...] ( locktime ) ( replaceable )</p> <p>Create a transaction spending the given inputs and creating new outputs. Outputs can be addresses or data. Returns hex-encoded raw transaction. Note that the transaction's inputs are not signed, and it is not stored in the wallet or transmitted to the network.</p> <p>Arguments:</p> <pre><code> 1. \"inputs\"               (array, required) A json array of json objects\n     [\n       {\n         \"txid\":\"id\",      (string, required) The transaction id\n         \"vout\":n,         (numeric, required) The output number\n         \"sequence\":n      (numeric, optional) The sequence number\n       } \n       ,...\n     ]\n2. \"outputs\"               (array, required) a json array with outputs (key-value pairs), where none of the keys are duplicated.\nThat is, each address can only appear once and there can only be one 'data' object.\n   [\n    {\n      \"address\": x.xxx,    (obj, optional) A key-value pair. The key (string) is the metrix address, the value (float or string) is the amount in MRX\n    },\n    {\n      \"data\": \"hex\"        (obj, optional) A key-value pair. The key must be \"data\", the value is hex encoded data\n    },\n    {\n      \"contract\":{\n         \"contractAddress\":\"address\",   (string, required) Valid contract address (valid hash160 hex data)\n         \"data\":\"hex\",                  (string, required) Hex data to add in the call output\n         \"amount\":x.xxx,                (numeric, optional) Value in MRX to send with the call, should be a valid amount, default 0\n         \"gasLimit\":x,                  (numeric, optional) The gas limit for the transaction\n         \"gasPrice\":x.xxx               (numeric, optional) The gas price for the transaction\n       } \n    {\n    ,...                     More key-value pairs of the above form. For compatibility reasons, a dictionary, which holds the key-value pairs directly, is also\n                             accepted as second parameter.\n   ]\n3. locktime                  (numeric, optional, default=0) Raw locktime. Non-0 value also locktime-activates inputs\n4. replaceable               (boolean, optional, default=false) Marks this transaction as BIP125 replaceable.\n                             Allows this transaction to be replaced by a transaction with higher fees. If provided, it is an error if explicit sequence numbers are incompatible.\n</code></pre> <p>Result:</p> <pre><code>\"transaction\" (string) hex string of the transaction\n</code></pre> <p>Examples:</p> <pre><code>&gt; metrix-cli createrawtransaction \"[{\\\"txid\\\":\\\"myid\\\",\\\"vout\\\":0}]\" \"[{\\\"address\\\":0.01}]\"\n\n&gt; metrix-cli createrawtransaction \"[{\\\"txid\\\":\\\"myid\\\",\\\"vout\\\":0}]\" \"[{\\\"data\\\":\\\"00010203\\\"}]\"\n\n&gt; metrix-cli createrawtransaction \"[{\\\"txid\\\":\\\"myid\\\",\\\"vout\\\":0}]\" \"[{\\\"contract\\\":{\\\"contractAddress\\\":\\\"mycontract\\\",\\\"data\\\":\\\"00\\\", \\\"gasLimit\\\":250000, \\\"gasPrice\\\":0.00005000, \\\"amount\\\":0}}]\"\n\n&gt; curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"createrawtransaction\", \"params\": [\"[{\\\"txid\\\":\\\"myid\\\",\\\"vout\\\":0}]\", \"[{\\\"address\\\":0.01}]\"] }' -H 'content-type: text/plain;' http://127.0.0.1:33831/\n\n&gt; curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"createrawtransaction\", \"params\": [\"[{\\\"txid\\\":\\\"myid\\\",\\\"vout\\\":0}]\", \"[{\\\"data\\\":\\\"00010203\\\"}]\"] }' -H 'content-type: text/plain;' http://127.0.0.1:33831/\n\n&gt; curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"createrawtransaction\", \"params\": [\"[{\\\"txid\\\":\\\"myid\\\",\\\"vout\\\":0}]\", \"[{\\\"contract\\\":{\\\"contractAddress\\\":\\\"mycontract\\\",\\\"data\\\":\\\"00\\\", \\\"gasLimit\\\":250000, \\\"gasPrice\\\":0.00005000, \\\"amount\\\":0}}]\"] }' -H 'content-type: text/plain;' http://127.0.0.1:33831/\n</code></pre>"},{"location":"core/commands/#decodepsbt","title":"decodepsbt","text":"<p>Return a JSON object representing the serialized, base64-encoded partially signed Metrix transaction.</p> <p>Arguments:</p> <pre><code>1. \"psbt\" (string, required) The PSBT base64 string\n</code></pre> <p>Result:</p> <pre><code>{\n  \"tx\" : {                   (json object) The decoded network-serialized unsigned transaction.\n    ...                                      The layout is the same as the output of decoderawtransaction.\n  },\n  \"unknown\" : {                (json object) The unknown global fields\n    \"key\" : \"value\"            (key-value pair) An unknown key-value pair\n     ...\n  },\n  \"inputs\" : [                 (array of json objects)\n    {\n      \"non_witness_utxo\" : {   (json object, optional) Decoded network transaction for non-witness UTXOs\n        ...\n      },\n      \"witness_utxo\" : {            (json object, optional) Transaction output for witness UTXOs\n        \"amount\" : x.xxx,           (numeric) The value in MRX\n        \"scriptPubKey\" : {          (json object)\n          \"asm\" : \"asm\",            (string) The asm\n          \"hex\" : \"hex\",            (string) The hex\n          \"type\" : \"pubkeyhash\",    (string) The type, eg 'pubkeyhash'\n          \"address\" : \"address\"     (string) Metrix address if there is one\n        }\n      },\n      \"partial_signatures\" : {             (json object, optional)\n        \"pubkey\" : \"signature\",           (string) The public key and signature that corresponds to it.\n        ,...\n      }\n      \"sighash\" : \"type\",                  (string, optional) The sighash type to be used\n      \"redeem_script\" : {       (json object, optional)\n          \"asm\" : \"asm\",            (string) The asm\n          \"hex\" : \"hex\",            (string) The hex\n          \"type\" : \"pubkeyhash\",    (string) The type, eg 'pubkeyhash'\n        }\n      \"witness_script\" : {       (json object, optional)\n          \"asm\" : \"asm\",            (string) The asm\n          \"hex\" : \"hex\",            (string) The hex\n          \"type\" : \"pubkeyhash\",    (string) The type, eg 'pubkeyhash'\n        }\n      \"bip32_derivs\" : {          (json object, optional)\n        \"pubkey\" : {                     (json object, optional) The public key with the derivation path as the value.\n          \"master_fingerprint\" : \"fingerprint\"     (string) The fingerprint of the master key\n          \"path\" : \"path\",                         (string) The path\n        }\n        ,...\n      }\n      \"final_scriptsig\" : {       (json object, optional)\n          \"asm\" : \"asm\",            (string) The asm\n          \"hex\" : \"hex\",            (string) The hex\n        }\n       \"final_scriptwitness\": [\"hex\", ...] (array of string) hex-encoded witness data (if any)\n      \"unknown\" : {                (json object) The unknown global fields\n        \"key\" : \"value\"            (key-value pair) An unknown key-value pair\n         ...\n      },\n    }\n    ,...\n  ]\n  \"outputs\" : [                 (array of json objects)\n    {\n      \"redeem_script\" : {       (json object, optional)\n          \"asm\" : \"asm\",            (string) The asm\n          \"hex\" : \"hex\",            (string) The hex\n          \"type\" : \"pubkeyhash\",    (string) The type, eg 'pubkeyhash'\n        }\n      \"witness_script\" : {       (json object, optional)\n          \"asm\" : \"asm\",            (string) The asm\n          \"hex\" : \"hex\",            (string) The hex\n          \"type\" : \"pubkeyhash\",    (string) The type, eg 'pubkeyhash'\n      }\n      \"bip32_derivs\" : [          (array of json objects, optional)\n        {\n          \"pubkey\" : \"pubkey\",                     (string) The public key this path corresponds to\n          \"master_fingerprint\" : \"fingerprint\"     (string) The fingerprint of the master key\n          \"path\" : \"path\",                         (string) The path\n          }\n        }\n        ,...\n      ],\n      \"unknown\" : {                (json object) The unknown global fields\n        \"key\" : \"value\"            (key-value pair) An unknown key-value pair\n         ...\n      },\n    }\n    ,...\n  ]\n  \"fee\" : fee                      (numeric, optional) The transaction fee paid if all UTXOs slots in the PSBT have been filled.\n}\n</code></pre> <p>Examples:</p> <pre><code>&gt; metrix-cli decodepsbt \"psbt\"\n</code></pre>"},{"location":"core/commands/#decoderawtransaction","title":"decoderawtransaction","text":"<p>Return a JSON object representing the serialized, hex-encoded transaction.</p> <p>Arguments:</p> <pre><code>1. \"hexstring\" (string, required) The transaction hex string\n2. iswitness   (boolean, optional) Whether the transaction hex is a serialized witness transaction\nIf iswitness is not present, heuristic tests will be used in decoding\n</code></pre> <p>Result:</p> <pre><code>{\n  \"txid\" : \"id\",          (string) The transaction id\n  \"hash\" : \"id\",          (string) The transaction hash (differs from txid for witness transactions)\n  \"size\" : n,             (numeric) The transaction size\n  \"vsize\" : n,            (numeric) The virtual transaction size (differs from size for witness transactions)\n  \"weight\" : n,           (numeric) The transaction's weight (between vsize*4 - 3 and vsize*4)\n  \"version\" : n,          (numeric) The version\n  \"locktime\" : ttt,       (numeric) The lock time\n  \"vin\" : [               (array of json objects)\n     {\n       \"txid\": \"id\",      (string) The transaction id\n       \"vout\": n,         (numeric) The output number\n       \"scriptSig\": {     (json object) The script\n         \"asm\": \"asm\",  (string) asm\n         \"hex\": \"hex\"   (string) hex\n       },\n       \"txinwitness\": [\"hex\", ...] (array of string) hex-encoded witness data (if any)\n       \"sequence\": n     (numeric) The script sequence number\n     }\n     ,...\n  ],\n  \"vout\" : [             (array of json objects)\n     {\n       \"value\" : x.xxx,            (numeric) The value in MRX\n       \"n\" : n,                    (numeric) index\n       \"scriptPubKey\" : {          (json object)\n         \"asm\" : \"asm\",          (string) the asm\n         \"hex\" : \"hex\",          (string) the hex\n         \"reqSigs\" : n,            (numeric) The required sigs\n         \"type\" : \"pubkeyhash\",  (string) The type, eg 'pubkeyhash'\n         \"addresses\" : [           (json array of string)\n           \"Q2tvKAXCxZjSmdNbao16dKXC8tRWfcF5oc\"   (string) metrix address\n           ,...\n         ]\n       }\n     }\n     ,...\n  ],\n}\n</code></pre> <p>Examples:</p> <pre><code>&gt; metrix-cli decoderawtransaction \"hexstring\"\n\n&gt; curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"decoderawtransaction\", \"params\": [\"hexstring\"] }' -H 'content-type: text/plain;' http://127.0.0.1:33831/\n</code></pre> <p>Test example: </p> <pre><code>./metrix-cli decoderawtransaction \"0100000001697f98c004bbb7d184119a31b2b8c96683fa8c7ca0d7755c6196888fb6ba046e010000006a473044022077de54191ae91b502d03a83bd1d580a8b4467fc3d205c7bce169f13e6abc1c91022064f759845c960b04ddf9dd5a635da5f8b990fc934fced06747d52f2658603735012103c426034f05b3b66700f151991e6e45f2d63545a73b36c0a8e8c4200c53f7fd2cfeffffff02a0f53813000000001976a914e85324d4402d9758122c5498de80d1cfcc6330cb88aca09f6636000000001976a914093f4c533deb449f6bd0a427bddb0f02c297101388ac5dad0700\"\n</code></pre> <p>Test result:</p> <pre><code>{\n  \"txid\": \"27f5f35b447e219d0b3a3ac55f9dc6aacf2d4145fbd930207ef5b7710c47d883\",\n  \"hash\": \"27f5f35b447e219d0b3a3ac55f9dc6aacf2d4145fbd930207ef5b7710c47d883\",\n  \"version\": 1,\n  \"size\": 225,\n  \"vsize\": 225,\n  \"weight\": 900,\n  \"locktime\": 503133,\n  \"vin\": [\n    {\n      \"txid\": \"6e04bab68f8896615c75d7a07c8cfa8366c9b8b2319a1184d1b7bb04c0987f69\",\n      \"vout\": 1,\n      \"scriptSig\": {\n        \"asm\": \"3044022077de54191ae91b502d03a83bd1d580a8b4467fc3d205c7bce169f13e6abc1c91022064f759845c960b04ddf9dd5a635da5f8b990fc934fced06747d52f2658603735[ALL] 03c426034f05b3b66700f151991e6e45f2d63545a73b36c0a8e8c4200c53f7fd2c\",\n        \"hex\": \"473044022077de54191ae91b502d03a83bd1d580a8b4467fc3d205c7bce169f13e6abc1c91022064f759845c960b04ddf9dd5a635da5f8b990fc934fced06747d52f2658603735012103c426034f05b3b66700f151991e6e45f2d63545a73b36c0a8e8c4200c53f7fd2c\"\n      },\n      \"sequence\": 4294967294\n    }\n  ],\n  \"vout\": [\n    {\n      \"value\": 3.22500000,\n      \"n\": 0,\n      \"scriptPubKey\": {\n        \"asm\": \"OP_DUP OP_HASH160 e85324d4402d9758122c5498de80d1cfcc6330cb OP_EQUALVERIFY OP_CHECKSIG\",\n        \"hex\": \"76a914e85324d4402d9758122c5498de80d1cfcc6330cb88ac\",\n        \"reqSigs\": 1,\n        \"type\": \"pubkeyhash\",\n        \"addresses\": [\n          \"QhnQUjuCK7PANDqE7tCdf5DVjKmHoykeSY\"\n        ]\n      }\n    },\n    {\n      \"value\": 9.12695200,\n      \"n\": 1,\n      \"scriptPubKey\": {\n        \"asm\": \"OP_DUP OP_HASH160 093f4c533deb449f6bd0a427bddb0f02c2971013 OP_EQUALVERIFY OP_CHECKSIG\",\n        \"hex\": \"76a914093f4c533deb449f6bd0a427bddb0f02c297101388ac\",\n        \"reqSigs\": 1,\n        \"type\": \"pubkeyhash\",\n        \"addresses\": [\n          \"QMSt24HzDcBQmsqCybzYQmfVPQFvNjK6ax\"\n        ]\n      }\n    }\n  ]\n}\n</code></pre>"},{"location":"core/commands/#decodescript","title":"decodescript","text":"<p>Decode a hex-encoded script.</p> <p>Arguments:</p> <pre><code>1. \"hexstring\" (string) the hex encoded script\n</code></pre> <p>Result:</p> <pre><code>{\n  \"asm\":\"asm\",   (string) Script public key\n  \"hex\":\"hex\",   (string) hex encoded public key\n  \"type\":\"type\", (string) The output type\n  \"reqSigs\": n,  (numeric) The required signatures\n  \"addresses\": [ (json array of string)\n  \"address\"      (string) metrix address\n  ,...\n  ],\n  \"p2sh\",\"address\" (string) address of P2SH script wrapping this redeem script (not returned if the script is already a P2SH).\n}\n</code></pre> <p>Examples:</p> <pre><code>&gt; metrix-cli decodescript \"hexstring\"\n\n&gt; curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"decodescript\", \"params\": [\"hexstring\"] }' -H 'content-type: text/plain;' http://127.0.0.1:33831/\n\n### finalizepsbt\n</code></pre> <p>Finalize the inputs of a PSBT. If the transaction is fully signed, it will produce a network serialized transaction which can be broadcast with sendrawtransaction. Otherwise a PSBT will be created which has the final_scriptSig and final_scriptWitness fields filled for inputs that are complete. Implements the Finalizer and Extractor roles.</p> <p>Arguments:</p> <pre><code>1. \"psbt\"    (string) A base64 string of a PSBT\n2. \"extract\" (boolean, optional, default=true) If true and the transaction is complete, extract and return the complete transaction in normal network serialization instead of the PSBT.\n</code></pre> <p>Result:</p> <pre><code>{\n  \"psbt\" : \"value\",           (string) The base64-encoded partially signed transaction if not extracted\n  \"hex\"  : \"value\",           (string) The hex-encoded network transaction if extracted\n  \"complete\" : true|false,    (boolean) If the transaction has a complete set of signatures\n}\n</code></pre> <p>Examples:</p> <pre><code>&gt; metrix-cli finalizepsbt \"psbt\"\n</code></pre>"},{"location":"core/commands/#fromhexaddress","title":"fromhexaddress","text":"<p>Converts a raw hex address to a base58 pubkeyhash address</p> <p>Arguments:</p> <pre><code>1. \"hexaddress\" (string, required) The raw hex address\n</code></pre> <p>Result:</p> <pre><code>\"address\" (string) The base58 pubkeyhash address\n</code></pre> <p>Examples:</p> <pre><code>&gt; metrix-cli fromhexaddress \"hexaddress\"\n\n&gt; curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"fromhexaddress\", \"params\": [\"hexaddress\"] }' -H 'content-type: text/plain;' http://127.0.0.1:33831/\n</code></pre> <p>Test example:</p> <pre><code>fromhexaddress \"6c89a1a6ca2ae7c00b248bb2832d6f480f27da68\"\n</code></pre> <p>Test result:</p> <pre><code>qTTH1Yr2eKCuDLqfxUyBLCAjmomQ8pyrBt\n</code></pre>"},{"location":"core/commands/#fundrawtransaction","title":"fundrawtransaction","text":"<p>Add inputs to a transaction until it has enough in value to meet its out value. This will not modify existing inputs, and will add at most one change output to the outputs. No existing outputs will be modified unless \"subtractFeeFromOutputs\" is specified. Note that inputs which were signed may need to be resigned after completion since in/outputs have been added. The inputs added will not be signed, use signrawtransaction for that. Note that all existing inputs must have their previous output transaction be in the wallet. Note that all inputs selected must be of standard form and P2SH scripts must be in the wallet using importaddress or addmultisigaddress (to calculate fees). You can see whether this is the case by checking the \"solvable\" field in the listunspent output. Only pay-to-pubkey, multisig, and P2SH versions thereof are currently supported for watch-only</p> <p>Arguments:</p> <pre><code>1. \"hexstring\"                (string, required) The hex string of the raw transaction\n2. options                    (object, optional)\n   {\n     \"changeAddress\"          (string, optional, default pool address) The metrix address to receive the change\n     \"changePosition\"         (numeric, optional, default random) The index of the change output\n     \"change_type\"            (string, optional) The output type to use. Only valid if changeAddress is not specified. Options are \"legacy\", \"p2sh-segwit\", and \"bech32\". Default is set by -changetype.\n     \"includeWatching\"        (boolean, optional, default false) Also select inputs which are watch only\n     \"lockUnspents\"           (boolean, optional, default false) Lock selected unspent outputs\n     \"feeRate\"                (numeric, optional, default not set: makes wallet determine the fee) Set a specific fee rate in MRX/kB\n     \"subtractFeeFromOutputs\" (array, optional) A json array of integers.\n                              The fee will be equally deducted from the amount of each specified output.\n                              The outputs are specified by their zero-based index, before any change output is added.\n                              Those recipients will receive less metrixs than you enter in their corresponding amount field.\n                              If no outputs are specified here, the sender pays the fee.\n                                  [vout_index,...]\n     \"replaceable\"            (boolean, optional) Marks this transaction as BIP125 replaceable.\n                              Allows this transaction to be replaced by a transaction with higher fees\n     \"conf_target\"            (numeric, optional) Confirmation target (in blocks)\n     \"estimate_mode\"          (string, optional, default=UNSET) The fee estimate mode, must be one of:\n         \"UNSET\"\n         \"ECONOMICAL\"\n         \"CONSERVATIVE\"\n   }\n                              for backward compatibility: passing in a true instead of an object will result in {\"includeWatching\":true}\n3. iswitness                  (boolean, optional) Whether the transaction hex is a serialized witness transaction \n                              If iswitness is not present, heuristic tests will be used in decoding\n</code></pre> <p>Result:</p> <pre><code>{\n  \"hex\": \"value\", (string) The resulting raw transaction (hex-encoded string)\n  \"fee\": n,       (numeric) Fee in MRX the resulting transaction pays\n  \"changepos\": n  (numeric) The position of the added change output, or -1\n}\n</code></pre> <p>Examples:</p> <p>Create a transaction with no inputs</p> <pre><code>&gt; metrix-cli createrawtransaction \"[]\" \"{\\\"myaddress\\\":0.01}\"\n</code></pre> <p>Add sufficient unsigned inputs to meet the output value</p> <pre><code>&gt; metrix-cli fundrawtransaction \"rawtransactionhex\"\n</code></pre> <p>Sign the transaction</p> <pre><code>&gt; metrix-cli signrawtransaction \"fundedtransactionhex\"\n</code></pre> <p>Send the transaction</p> <pre><code>&gt; metrix-cli sendrawtransaction \"signedtransactionhex\"\n</code></pre>"},{"location":"core/commands/#gethexaddress","title":"gethexaddress","text":"<p>Converts a base58 pubkeyhash address to a hex address for use in smart contracts.</p> <p>Arguments:</p> <pre><code>1. \"address\" (string, required) The base58 address\n</code></pre> <p>Result:</p> <pre><code>\"hexaddress\" (string) The raw hex pubkeyhash address for use in smart contracts\n</code></pre> <p>Examples:</p> <pre><code>&gt; metrix-cli gethexaddress \"address\"\n\n&gt; curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"gethexaddress\", \"params\": [\"address\"] }' -H 'content-type: text/plain;' http://127.0.0.1:33831/\n</code></pre> <p>Test example:</p> <pre><code>gethexaddress \"qTTH1Yr2eKCuDLqfxUyBLCAjmomQ8pyrBt\"\n</code></pre> <p>Test result:</p> <pre><code>6c89a1a6ca2ae7c00b248bb2832d6f480f27da68\n</code></pre>"},{"location":"core/commands/#getrawtransaction","title":"getrawtransaction","text":"<p>NOTE: By default this function only works for mempool transactions. If the -txindex option is enabled, it also works for blockchain transactions. If the block which contains the transaction is known, its hash can be provided even for nodes without -txindex. Note that if a blockhash is provided, only that block will be searched and if the transaction is in the mempool or other blocks, or if this node does not have the given block available, the transaction will not be found. DEPRECATED: for now, it also works for transactions with unspent outputs.</p> <p>Return the raw transaction data.</p> <p>If verbose is 'true', returns an Object with information about 'txid'. If verbose is 'false' or omitted, returns a string that is serialized, hex-encoded data for 'txid'.</p> <p>Arguments:</p> <pre><code>1. \"txid\"      (string, required) The transaction id\n2. verbose     (bool, optional, default=false) If false, return a string, otherwise return a json object\n3. \"blockhash\" (string, optional) The block in which to look for the transaction\n\nResult (if verbose is not set or set to false):\n\"data\"         (string) The serialized, hex-encoded data for 'txid'\n\nResult (if verbose is set to true):\n{\n  \"in_active_chain\": b,   (bool) Whether specified block is in the active chain or not (only present with explicit \"blockhash\" argument)\n  \"hex\" : \"data\",         (string) The serialized, hex-encoded data for 'txid'\n  \"txid\" : \"id\",          (string) The transaction id (same as provided)\n  \"hash\" : \"id\",          (string) The transaction hash (differs from txid for witness transactions)\n  \"size\" : n,             (numeric) The serialized transaction size\n  \"vsize\" : n,            (numeric) The virtual transaction size (differs from size for witness transactions)\n  \"weight\" : n,           (numeric) The transaction's weight (between vsize*4-3 and vsize*4)\n  \"version\" : n,          (numeric) The version\n  \"locktime\" : ttt,       (numeric) The lock time\n  \"vin\" : [               (array of json objects)\n     {\n       \"txid\": \"id\",      (string) The transaction id\n       \"vout\": n,         (numeric) \n       \"scriptSig\": {     (json object) The script\n         \"asm\": \"asm\",    (string) asm\n         \"hex\": \"hex\"     (string) hex\n       },\n       \"sequence\": n      (numeric) The script sequence number\n       \"txinwitness\": [\"hex\", ...] (array of string) hex-encoded witness data (if any)\n     }\n     ,...\n  ],\n  \"vout\" : [              \n     {\n       \"value\" : x.xxx,            (numeric) The value in MRX\n       \"n\" : n,                    (numeric) index\n       \"scriptPubKey\" : {          (json object)\n         \"asm\" : \"asm\",            (string) the asm\n         \"hex\" : \"hex\",            (string) the hex\n         \"reqSigs\" : n,            (numeric) The required sigs\n         \"type\" : \"pubkeyhash\",    (string) The type, eg 'pubkeyhash'\n         \"addresses\" : [           (json array of string)\n           \"address\"               (string) metrix address\n           ,...\n         ]\n       }\n     }\n     ,...\n  ],\n  \"blockhash\" : \"hash\",     (string) the block hash\n  \"confirmations\" : n,      (numeric) The confirmations\n  \"time\" : ttt,             (numeric) The transaction time in seconds since epoch (Jan 1 1970 GMT)\n  \"blocktime\" : ttt         (numeric) The block time in seconds since epoch (Jan 1 1970 GMT)\n}\n</code></pre> <p>Examples:</p> <pre><code>&gt; metrix-cli getrawtransaction \"mytxid\"\n\n&gt; metrix-cli getrawtransaction \"mytxid\" true\n\n&gt; curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"getrawtransaction\", \"params\": [\"mytxid\", true] }' -H 'content-type: text/plain;' http://127.0.0.1:33831/\n\n&gt; metrix-cli getrawtransaction \"mytxid\" false \"myblockhash\"\n\n&gt; metrix-cli getrawtransaction \"mytxid\" true \"myblockhash\"\n</code></pre>"},{"location":"core/commands/#sendrawtransaction","title":"sendrawtransaction","text":"<p>Submits raw transaction (serialized, hex-encoded) to local node and network.</p> <p>Also see createrawtransaction and signrawtransaction calls.</p> <p>Arguments:</p> <pre><code>1. \"hexstring\" (string, required) The hex string of the raw transaction)\n2. allowhighfees (boolean, optional, default=false) Allow high fees\n</code></pre> <p>Result:</p> <pre><code>\"hex\" (string) The transaction hash in hex\n</code></pre> <p>Examples:</p> <p>Create a transaction</p> <pre><code>&gt; metrix-cli createrawtransaction \"[{\\\"txid\\\" : \\\"mytxid\\\",\\\"vout\\\":0}]\" \"{\\\"myaddress\\\":0.01}\"\n</code></pre> <p>Sign the transaction, and get back the hex</p> <pre><code>&gt; metrix-cli signrawtransaction \"myhex\"\n</code></pre> <p>Send the transaction (signed hex)</p> <pre><code>&gt; metrix-cli sendrawtransaction \"signedhex\"\n</code></pre> <p>As a json rpc call</p> <pre><code>&gt; curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"sendrawtransaction\", \"params\": [\"signedhex\"] }' -H 'content-type: text/plain;' http://127.0.0.1:33831/\n</code></pre>"},{"location":"core/commands/#signrawtransaction","title":"signrawtransaction","text":"<p>DEPRECATED. Sign inputs for raw transaction (serialized, hex-encoded). The second optional argument (may be null) is an array of previous transaction outputs that this transaction depends on but may not yet be in the block chain. The third optional argument (may be null) is an array of base58-encoded private keys that, if given, will be the only keys used to sign the transaction.</p> <p>Arguments:</p> <pre><code>1. \"hexstring\"                      (string, required) The transaction hex string\n2. \"prevtxs\"       (string, optional) An json array of previous dependent transaction outputs\n     [                              (json array of json objects, or 'null' if none provided)\n       {\n         \"txid\":\"id\",               (string, required) The transaction id\n         \"vout\":n,                  (numeric, required) The output number\n         \"scriptPubKey\": \"hex\",     (string, required) script key\n         \"redeemScript\": \"hex\",     (string, required for P2SH or P2WSH) redeem script\n         \"amount\": value            (numeric, required) The amount spent\n       }\n       ,...\n    ]\n3. \"privkeys\"                       (string, optional) A json array of base58-encoded private keys for signing\n    [                               (json array of strings, or 'null' if none provided)\n      \"privatekey\"                  (string) private key in base58-encoding\n      ,...\n    ]\n4. \"sighashtype\"                    (string, optional, default=ALL) The signature hash type. Must be one of\n       \"ALL\"\n       \"NONE\"\n       \"SINGLE\"\n       \"ALL|ANYONECANPAY\"\n       \"NONE|ANYONECANPAY\"\n       \"SINGLE|ANYONECANPAY\"\n</code></pre> <p>Result:</p> <pre><code>{\n  \"hex\" : \"value\",               (string) The hex-encoded raw transaction with signature(s)\n  \"complete\" : true|false,       (boolean) If the transaction has a complete set of signatures\n  \"errors\" : [                   (json array of objects) Script verification errors (if there are any)\n    {\n      \"txid\" : \"hash\",           (string) The hash of the referenced, previous transaction\n      \"vout\" : n,                (numeric) The index of the output to spent and used as input\n      \"scriptSig\" : \"hex\",       (string) The hex-encoded signature script\n      \"sequence\" : n,            (numeric) Script sequence number\n      \"error\" : \"text\"           (string) Verification or signing error related to the input\n    }\n    ,...\n  ]\n}\n</code></pre>"},{"location":"core/commands/#signrawtransactionwithkey","title":"signrawtransactionwithkey","text":"<p>Sign inputs for raw transaction (serialized, hex-encoded). The second argument is an array of base58-encoded private keys that will be the only keys used to sign the transaction. The third optional argument (may be null) is an array of previous transaction outputs that this transaction depends on but may not yet be in the block chain.</p> <p>Arguments:</p> <pre><code>1. \"hexstring\"                      (string, required) The transaction hex string\n2. \"privkeys\"                       (string, required) A json array of base58-encoded private keys for signing\n    [                               (json array of strings)\n      \"privatekey\"                  (string) private key in base58-encoding\n      ,...\n    ]\n3. \"prevtxs\"                        (string, optional) An json array of previous dependent transaction outputs\n    [                               (json array of json objects, or 'null' if none provided)\n       {\n         \"txid\":\"id\",               (string, required) The transaction id\n         \"vout\":n,                  (numeric, required) The output number\n         \"scriptPubKey\": \"hex\",     (string, required) script key\n         \"redeemScript\": \"hex\",     (string, required for P2SH or P2WSH) redeem script\n         \"amount\": value            (numeric, required) The amount spent\n       }\n       ,...\n    ]\n4. \"sighashtype\"                    (string, optional, default=ALL) The signature hash type. Must be one of\n       \"ALL\"\n       \"NONE\"\n       \"SINGLE\"\n       \"ALL|ANYONECANPAY\"\n       \"NONE|ANYONECANPAY\"\n       \"SINGLE|ANYONECANPAY\"\n</code></pre> <p>Result:</p> <pre><code>{\n  \"hex\" : \"value\",                  (string) The hex-encoded raw transaction with signature(s)\n  \"complete\" : true|false,          (boolean) If the transaction has a complete set of signatures\n  \"errors\" : [                      (json array of objects) Script verification errors (if there are any)\n    {\n      \"txid\" : \"hash\",              (string) The hash of the referenced, previous transaction\n      \"vout\" : n,                   (numeric) The index of the output to spent and used as input\n      \"scriptSig\" : \"hex\",          (string) The hex-encoded signature script\n      \"sequence\" : n,               (numeric) Script sequence number\n      \"error\" : \"text\"              (string) Verification or signing error related to the input\n    }\n    ,...\n  ]\n}\n</code></pre> <p>Examples:</p> <pre><code>&gt; metrix-cli signrawtransactionwithkey \"myhex\"\n\n&gt; curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"signrawtransactionwithkey\", \"params\": [\"myhex\"] }' -H 'content-type: text/plain;' http://127.0.0.1:33831/\n</code></pre>"},{"location":"core/commands/#testmempoolaccept","title":"testmempoolaccept","text":"<p>Returns if raw transaction (serialized, hex-encoded) would be accepted by mempool.</p> <p>This checks if the transaction violates the consensus or policy rules.</p> <p>See sendrawtransaction call.</p> <p>Arguments:</p> <pre><code>1. [\"rawtxs\"] (array, required) An array of hex strings of raw transactions. Length must be one for now.\n2. allowhighfees (boolean, optional, default=false) Allow high fees\n</code></pre> <p>Result:</p> <pre><code>[                  (array) The result of the mempool acceptance test for each raw transaction in the input array.\n                            Length is exactly one for now.\n {\n  \"txid\"           (string) The transaction hash in hex\n  \"allowed\"        (boolean) If the mempool allows this tx to be inserted\n  \"reject-reason\"  (string) Rejection string (only present when 'allowed' is false)\n }\n]\n</code></pre> <p>Examples:</p> <p>Create a transaction</p> <pre><code>&gt; metrix-cli createrawtransaction \"[{\\\"txid\\\" : \\\"mytxid\\\",\\\"vout\\\":0}]\" \"{\\\"myaddress\\\":0.01}\" Sign the transaction, and get back the hex\n\n&gt; metrix-cli signrawtransaction \"myhex\"\n</code></pre> <p>Test acceptance of the transaction (signed hex)</p> <pre><code>&gt; metrix-cli testmempoolaccept [\"signedhex\"]\n</code></pre> <p>As a json rpc call</p> <pre><code>&gt; curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"testmempoolaccept\", \"params\": [[\"signedhex\"]] }' -H 'content-type: text/plain;' http://127.0.0.1:33831/\n</code></pre>"},{"location":"core/commands/#util","title":"Util","text":""},{"location":"core/commands/#createmultisig","title":"createmultisig","text":"<p>Creates a multi-signature address with n signature of m keys required. It returns a json object with the address and redeemScript.</p> <p>Arguments:</p> <pre><code>1. nrequired                    (numeric, required) The number of required signatures out of the n keys.\n2. \"keys\"                       (string, required) A json array of keys which are metrix addresses or hex-encoded public keys\n     [\n       \"key\"                    (string) metrix address or hex-encoded public key\n       ,...\n     ]\n3. \"address_type\"               (string, optional) The address type to use. Options are \"legacy\", \"p2sh-segwit\", and \"bech32\". Default is legacy.\n</code></pre> <p>Result:</p> <pre><code>{\n  \"address\":\"multisigaddress\",  (string) The value of the new multisig address.\n  \"redeemScript\":\"script\"       (string) The string value of the hex-encoded redemption script.\n}\n</code></pre> <p>Examples:</p> <p>Create a multisig address from 2 public keys</p> <pre><code>&gt; metrix-cli createmultisig 2 \"[\\\"QjWnDZxwLhrJDcp4Hisse8RfBo2jRDZY5Z\\\",\\\"Q6sSauSf5pF2UkUwvKGq4qjNRzBZYqgEL5\\\"]\"\n</code></pre> <p>As a json rpc call</p> <pre><code>&gt; curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"createmultisig\", \"params\": [2, \"[\\\"QjWnDZxwLhrJDcp4Hisse8RfBo2jRDZY5Z\\\",\\\"Q6sSauSf5pF2UkUwvKGq4qjNRzBZYqgEL5\\\"]\"] }' -H 'content-type: text/plain;' http://127.0.0.1:33831/\n</code></pre>"},{"location":"core/commands/#estimatesmartfee","title":"estimatesmartfee","text":"<p>Estimates the approximate fee per kilobyte needed for a transaction to begin confirmation within conf_target blocks if possible and return the number of blocks for which the estimate is valid. Uses virtual transaction size as defined in BIP 141 (witness data is discounted).</p> <p>Arguments:</p> <pre><code>1. conf_target     (numeric) Confirmation target in blocks (1 - 1008)\n2. \"estimate_mode\" (string, optional, default=CONSERVATIVE) The fee estimate mode.\n                   Whether to return a more conservative estimate which also satisfies\n                   a longer history. A conservative estimate potentially returns a\n                   higher feerate and is more likely to be sufficient for the desired\n                   target, but is not as responsive to short term drops in the\n                   prevailing fee market.  Must be one of:\n       \"UNSET\" (defaults to CONSERVATIVE)\n       \"ECONOMICAL\"\n       \"CONSERVATIVE\"\n</code></pre> <p>Result:</p> <pre><code>{\n  \"feerate\" : x.x,     (numeric, optional) estimate fee-per-kilobyte (in MRX)\n  \"errors\": [ str... ] (json array of strings, optional) Errors encountered during processing\n  \"blocks\" : n         (numeric) block number where estimate was found\n}\n</code></pre> <p>The request target will be clamped between 2 and the highest target fee estimation is able to return based on how long it has been running. An error is returned if not enough transactions and blocks have been observed to make an estimate for any number of blocks.</p> <p>Example:</p> <pre><code>&gt; metrix-cli estimatesmartfee 6\n</code></pre>"},{"location":"core/commands/#signmessagewithprivkey","title":"signmessagewithprivkey","text":"<p>Sign a message with the private key of an address</p> <p>Arguments:</p> <pre><code>1. \"privkey\"         (string, required) The private key to sign the message with.\n2. \"message\"         (string, required) The message to create a signature of.\n</code></pre> <p>Result:</p> <pre><code>\"signature\"          (string) The signature of the message encoded in base 64\n</code></pre> <p>Examples:</p> <p>Create the signature</p> <pre><code>&gt; metrix-cli signmessagewithprivkey \"privkey\" \"my message\"\n</code></pre> <p>Verify the signature</p> <pre><code>&gt; metrix-cli verifymessage \"QD1ZrZNe3JUo7ZycKEYQQiQAWd9y54F4XX\" \"signature\" \"my message\"\n</code></pre> <p>As json rpc</p> <pre><code>&gt; curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"signmessagewithprivkey\", \"params\": [\"privkey\", \"my message\"] }' -H 'content-type: text/plain;' http://127.0.0.1:33831/\n</code></pre>"},{"location":"core/commands/#validateaddress","title":"validateaddress","text":"<p>Return information about the given metrix address.</p> <p>DEPRECATION WARNING:  Parts of this command have been deprecated and moved to getaddressinfo. Clients must transition to using getaddressinfo to access this information before upgrading to v0.18.  The following deprecated fields have moved to getaddressinfo and will only be shown here with -deprecatedrpc=validateaddress: ismine, iswatchonly, script, hex, pubkeys, sigsrequired, pubkey, addresses, embedded, iscompressed, account, timestamp, hdkeypath, kdmasterkeyid.</p> <p>Arguments:</p> <pre><code>1. \"address\" (string, required) The metrix address to validate\n</code></pre> <p>Result:</p> <pre><code>{\n  \"isvalid\" : true|false,       (boolean) If the address is valid or not. If not, this is the only property returned.\n  \"address\" : \"address\",        (string) The metrix address validated\n  \"scriptPubKey\" : \"hex\",       (string) The hex encoded scriptPubKey generated by the address\n  \"isscript\" : true|false,      (boolean) If the key is a script\n  \"iswitness\" : true|false,     (boolean) If the address is a witness address\n  \"witness_version\" : version   (numeric, optional) The version number of the witness program\n  \"witness_program\" : \"hex\"     (string, optional) The hex value of the witness program\n}\n</code></pre> <p>Examples:</p> <pre><code>&gt; metrix-cli validateaddress \"QPSSGeFHDnKNxiEyFrD1wcEaHr9hrQDDWc\"\n\n&gt; curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"validateaddress\", \"params\": [\"QPSSGeFHDnKNxiEyFrD1wcEaHr9hrQDDWc\"] }' -H 'content-type: text/plain;' http://127.0.0.1:33831/\n</code></pre>"},{"location":"core/commands/#verifymessage","title":"verifymessage","text":"<p>Verify a signed message</p> <p>Arguments:</p> <pre><code>1. \"address\" (string, required) The metrix address to use for the signature.\n2. \"signature\" (string, required) The signature provided by the signer in base 64 encoding (see signmessage).\n3. \"message\" (string, required) The message that was signed.\n</code></pre> <p>Result:</p> <pre><code>true|false (boolean) If the signature is verified or not.\n</code></pre> <p>Examples:</p> <p>Unlock the wallet for 30 seconds</p> <pre><code>&gt; metrix-cli walletpassphrase \"mypassphrase\" 30\n</code></pre> <p>Create the signature</p> <pre><code>&gt; metrix-cli signmessage \"QD1ZrZNe3JUo7ZycKEYQQiQAWd9y54F4XX\" \"my message\"\n</code></pre> <p>Verify the signature</p> <pre><code>&gt; metrix-cli verifymessage \"QD1ZrZNe3JUo7ZycKEYQQiQAWd9y54F4XX\" \"signature\" \"my message\"\n</code></pre> <p>As json rpc</p> <pre><code>&gt; curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"verifymessage\", \"params\": [\"QD1ZrZNe3JUo7ZycKEYQQiQAWd9y54F4XX\", \"signature\", \"my message\"] }' -H 'content-type: text/plain;' http://127.0.0.1:33831/\n</code></pre>"},{"location":"core/commands/#wallet","title":"Wallet","text":""},{"location":"core/commands/#abandontransaction","title":"abandontransaction","text":"<p>Mark in-wallet transaction  as abandoned This will mark this transaction and all its in-wallet descendants as abandoned which will allow for their inputs to be respent. It can be used to replace \"stuck\" or evicted transactions. It only works on transactions which are not included in a block and are not currently in the mempool. It has no effect on transactions which are already abandoned. <p>Arguments:</p> <pre><code>1. \"txid\" (string, required) The transaction id\n</code></pre> <p>Examples:</p> <pre><code>&gt; metrix-cli abandontransaction \"1075db55d416d3ca199f55b6084e2115b9345e16c5cf302fc80e9d5fbf5d48d\"\n\n&gt; curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"abandontransaction\", \"params\": [\"1075db55d416d3ca199f55b6084e2115b9345e16c5cf302fc80e9d5fbf5d48d\"] }' -H 'content-type: text/plain;' http://127.0.0.1:33831/\n</code></pre>"},{"location":"core/commands/#abortrescan","title":"abortrescan","text":"<p>Stops current wallet rescan triggered by an RPC call, e.g. by an importprivkey call.</p> <p>Examples:</p> <p>Import a private key</p> <pre><code>&gt; metrix-cli importprivkey \"mykey\"\n</code></pre> <p>Abort the running wallet rescan</p> <pre><code>&gt; metrix-cli abortrescan\n</code></pre> <p>As a JSON-RPC call</p> <pre><code>&gt; curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"abortrescan\", \"params\": [] }' -H 'content-type: text/plain;' http://127.0.0.1:33831/\n</code></pre> <p>Test example:</p> <pre><code>./metrix-cli abortrescan\n</code></pre> <p>Test result:</p> <pre><code>false\n</code></pre>"},{"location":"core/commands/#addmultisigaddress","title":"addmultisigaddress","text":"<p>Add a nrequired-to-sign multisignature address to the wallet. Requires a new wallet backup. Each key is a Metrix address or hex-encoded public key. This functionality is only intended for use with non-watchonly addresses. See importaddress for watchonly p2sh address support. If 'label' is specified, assign address to that label.</p> <p>Arguments:</p> <pre><code>1. nrequired                      (numeric, required) The number of required signatures out of the n keys or addresses.\n2. \"keys\"                         (string, required) A json array of metrix addresses or hex-encoded public keys\n     [\n       \"address\"                  (string) metrix address or hex-encoded public key\n       ...,\n     ]\n3. \"label\"                        (string, optional) A label to assign the addresses to.\n4. \"address_type\"                 (string, optional) The address type to use. Options are \"legacy\", \"p2sh-segwit\", and \"bech32\". Default is set by -addresstype\n</code></pre> <p>Result:</p> <pre><code>{\n  \"address\":\"multisigaddress\", (string) The value of the new multisig address.\n  \"redeemScript\":\"script\"      (string) The string value of the hex-encoded redemption script.\n}\n</code></pre> <p>Examples:</p> <p>Add a multisig address from 2 addresses</p> <pre><code>&gt; metrix-cli addmultisigaddress 2 \"[\\\"QjWnDZxwLhrJDcp4Hisse8RfBo2jRDZY5Z\\\",\\\"Q6sSauSf5pF2UkUwvKGq4qjNRzBZYqgEL5\\\"]\"\n</code></pre> <p>As json rpc call</p> <pre><code>&gt; curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"addmultisigaddress\", \"params\": [2, \"[\\\"QjWnDZxwLhrJDcp4Hisse8RfBo2jRDZY5Z\\\",\\\"Q6sSauSf5pF2UkUwvKGq4qjNRzBZYqgEL5\\\"]\"] }' -H 'content-type: text/plain;' http://127.0.0.1:33831/\n</code></pre>"},{"location":"core/commands/#backupwallet","title":"backupwallet","text":"<p>Safely copies current wallet file to destination, which can be a directory or a path with filename.</p> <p>Arguments:</p> <pre><code>1. \"destination\" (string) The destination directory or file\n</code></pre> <p>Examples:</p> <pre><code>&gt; metrix-cli backupwallet \"backup.dat\"\n\n&gt; curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"backupwallet\", \"params\": [\"backup.dat\"] }' -H 'content-type: text/plain;' http://127.0.0.1:33831/\n</code></pre>"},{"location":"core/commands/#bumpfee","title":"bumpfee","text":"<p>Bumps the fee of an opt-in-RBF transaction T, replacing it with a new transaction B. An opt-in RBF transaction with the given txid must be in the wallet. The command will pay the additional fee by decreasing (or perhaps removing) its change output. If the change output is not big enough to cover the increased fee, the command will currently fail instead of adding new inputs to compensate. (A future implementation could improve this.) The command will fail if the wallet or mempool contains a transaction that spends one of T's outputs. By default, the new fee will be calculated automatically using estimatesmartfee. The user can specify a confirmation target for estimatesmartfee. Alternatively, the user can specify totalFee, or use RPC settxfee to set a higher fee rate. At a minimum, the new fee rate must be high enough to pay an additional new relay fee (incrementalfee returned by getnetworkinfo) to enter the node's mempool.</p> <p>Arguments:</p> <pre><code>1. txid                  (string, required) The txid to be bumped\n2. options               (object, optional)\n   {\n     \"confTarget\"        (numeric, optional) Confirmation target (in blocks)\n     \"totalFee\"          (numeric, optional) Total fee (NOT feerate) to pay, in satoshis.\n                         In rare cases, the actual fee paid might be slightly higher than the specified\n                         totalFee if the tx change output has to be removed because it is too close to\n                         the dust threshold.\n     \"replaceable\"       (boolean, optional, default true) Whether the new transaction should still be\n                         marked bip-125 replaceable. If true, the sequence numbers in the transaction will\n                         be left unchanged from the original. If false, any input sequence numbers in the\n                         original transaction that were less than 0xfffffffe will be increased to 0xfffffffe\n                         so the new transaction will not be explicitly bip-125 replaceable (though it may\n                         still be replaceable in practice, for example if it has unconfirmed ancestors which\n                         are replaceable).\n     \"estimate_mode\"     (string, optional, default=UNSET) The fee estimate mode, must be one of:\n         \"UNSET\"\n         \"ECONOMICAL\"\n         \"CONSERVATIVE\"\n   }\n</code></pre> <p>Result:</p> <pre><code>{\n  \"txid\": \"value\",     (string) The id of the new transaction\n  \"origfee\": n,        (numeric) Fee of the replaced transaction\n  \"fee\": n,            (numeric) Fee of the new transaction\n  \"errors\": [ str... ] (json array of strings) Errors encountered during processing (may be empty)\n}\n</code></pre> <p>Examples:</p> <pre><code>Bump the fee, get the new transaction's txid\n\n&gt; metrix-cli bumpfee &lt;txid&gt;\n</code></pre>"},{"location":"core/commands/#createcontract","title":"createcontract","text":"<p>Create a contract with bytcode.</p> <p>Arguments:</p> <pre><code>1. \"bytecode\"       (string, required) contract bytcode.\n2. gasLimit         (numeric or string, optional) gasLimit, default: 2500000, max: 40000000\n3. gasPrice         (numeric or string, optional) gasPrice MRX price per gas unit, default: 0.0000500, min:0.0000500\n4. \"senderaddress\"  (string, optional) The quantum address that will be used to create the contract.\n5. \"broadcast\"      (bool, optional, default=true) Whether to broadcast the transaction or not.\n6. \"changeToSender\" (bool, optional, default=true) Return the change to the sender.\n</code></pre> <p>Result:</p> <pre><code>[\n  {\n    \"txid\" :    (string) The transaction id.\n    \"sender\" :  (string) MRX address of the sender.\n    \"hash160\" : (string) ripemd-160 hash of the sender.\n    \"address\" : (string) expected contract address.\n}\n]\n</code></pre> <p>Examples:</p> <pre><code>&gt; metrix-cli createcontract \"60606040525b33600060006101000a81548173ffffffffffffffffffffffffffffffffffffffff02191690836c010000000000000000000000009081020402179055506103786001600050819055505b600c80605b6000396000f360606040526008565b600256\"\n\n&gt; metrix-cli createcontract \"60606040525b33600060006101000a81548173ffffffffffffffffffffffffffffffffffffffff02191690836c010000000000000000000000009081020402179055506103786001600050819055505b600c80605b6000396000f360606040526008565b600256\" 6000000 0.0000500 \"Mc72Sfpbz1BPpXFHz9m3CdqATR44Jvaydd\" true\n</code></pre>"},{"location":"core/commands/#createwallet","title":"createwallet","text":"<p>Creates and loads a new wallet.</p> <p>Arguments:</p> <pre><code>1. \"wallet_name\"        (string, required) The name for the new wallet. If this is a path, the wallet will be created at the path location.\n2. disable_private_keys (boolean, optional, default: false) Disable the possibility of private keys (only watchonlys are possible in this mode).\n</code></pre> <p>Result:</p> <pre><code>{\n  \"name\" :    &lt;wallet_name&gt;, (string) The wallet name if created successfully. If the wallet was created using a full path, the wallet_name will be the full path.\n  \"warning\" : &lt;warning&gt;,     (string) Warning message if wallet was not loaded cleanly.\n}\n</code></pre> <p>Examples:</p> <pre><code>&gt; metrix-cli createwallet \"testwallet\"\n\n&gt; curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"createwallet\", \"params\": [\"testwallet\"] }' -H 'content-type: text/plain;' http://127.0.0.1:33831/\n</code></pre> <p>Test example: </p> <pre><code>createwallet \u201cancd\u201d\n</code></pre> <p>Test result:</p> <pre><code>  {\n    \"name\": \"ancd\",\n    \"warning\": \"\"\n  }\n</code></pre>"},{"location":"core/commands/#dumpprivkey","title":"dumpprivkey","text":"<p>Reveals the private key corresponding to 'address'. Then the importprivkey can be used with this output</p> <p>Arguments:</p> <pre><code>1. \"address\"   (string, required) The metrix address for the private key\n</code></pre> <p>Result:</p> <pre><code>\"key\"                (string) The private key\n</code></pre> <p>Examples:</p> <pre><code>&gt; metrix-cli dumpprivkey \"myaddress\"\n\n&gt; metrix-cli importprivkey \"mykey\"\n\n&gt; curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"dumpprivkey\", \"params\": [\"myaddress\"] }' -H 'content-type: text/plain;' http://127.0.0.1:33831/\n</code></pre>"},{"location":"core/commands/#dumpwallet","title":"dumpwallet","text":"<p>Dumps all wallet keys in a human-readable format to a server-side file. This does not allow overwriting existing files.</p> <p>Arguments:</p> <pre><code>1. \"filename\"    (string, required) The filename with path (either absolute or relative to metrixd)\n</code></pre> <p>Result:</p> <pre><code>{\n\n  \"filename\" :  (string) The filename with full absolute path\n\n}\n</code></pre> <p>Examples:</p> <pre><code>&gt; metrix-cli dumpwallet \"test\"\n\n&gt; curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"dumpwallet\", \"params\": [\"test\"] }' -H 'content-type: text/plain;' http://127.0.0.1:33831/\n</code></pre>"},{"location":"core/commands/#encryptwallet","title":"encryptwallet","text":"<p>Encrypts the wallet with 'passphrase'. This is for first time encryption. After this, any calls that interact with private keys such as sending or signing will require the passphrase to be set prior the making these calls. Use the walletpassphrase call for this, and then walletlock call. If the wallet is already encrypted, use the wallet passphrase change call. Note that this will shutdown the server.</p> <p>Arguments:</p> <pre><code>1. \"passphrase\" (string) The pass phrase to encrypt the wallet with. It must be at least 1 character, but should be long.\n</code></pre> <p>Examples:</p> <p>Encrypt your wallet</p> <pre><code>&gt; metrix-cli encryptwallet \"my pass phrase\"\n</code></pre> <p>Now set the passphrase to use the wallet, such as for signing or sending metrix</p> <pre><code>&gt; metrix-cli walletpassphrase \"my pass phrase\"\n</code></pre> <p>Now we can do something like sign</p> <pre><code>&gt; metrix-cli signmessage \"address\" \"test message\"\n</code></pre> <p>Now lock the wallet again by removing the passphrase</p> <pre><code>&gt; metrix-cli walletlock\n</code></pre> <p>As a json rpc call</p> <pre><code>&gt; curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"encryptwallet\", \"params\": [\"my pass phrase\"] }' -H 'content-type: text/plain;' http://127.0.0.1:33831/\n</code></pre>"},{"location":"core/commands/#getaddressesbylabel","title":"getaddressesbylabel","text":"<p>Returns the list of addresses assigned the specified label.</p> <p>Arguments:</p> <pre><code>1. \"label\" (string, required) The label.\n</code></pre> <p>Result:</p> <pre><code>{ \n  \"address\": \n  { \n    \"purpose\": \"string\" (string) Purpose of address (\"send\" for sending address, \"receive\" for receiving address)\n  },...\n}\n</code></pre> <p>Examples:</p> <pre><code>&gt; metrix-cli getaddressesbylabel \"tabby\"\n\n&gt; curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"getaddressesbylabel\", \"params\": [\"tabby\"] }' -H 'content-type: text/plain;' http://127.0.0.1:33831/\n</code></pre> <p>Test example:</p> <pre><code>./metrix-cli getaddressesbylabel \"\"\n</code></pre> <p>Test result:</p> <pre><code>{\n    \"QUTYNrXYMQUzZyUekmfakR8bzTuLqYcLtf\": \n    {\n      \"purpose\": \"receive\"\n    },\n    \"QZmURd7wViLVKjUu8b3mvdXeSJjFmH7hf2\": \n    {\n      \"purpose\": \"receive\"\n    }\n}\n</code></pre>"},{"location":"core/commands/#getaddressinfo","title":"getaddressinfo","text":"<p>Return information about the given metrix address. Some information requires the address to be in the wallet.</p> <p>Arguments:</p> <pre><code>1. \"address\"                    (string, required) The metrix address to get the information of.\n</code></pre> <p>Result:</p> <pre><code>{\n  \"address\" : \"address\",        (string) The metrix address validated\n  \"scriptPubKey\" : \"hex\",       (string) The hex encoded scriptPubKey generated by the address\n  \"ismine\" : true|false,        (boolean) If the address is yours or not\n  \"iswatchonly\" : true|false,   (boolean) If the address is watchonly\n  \"isscript\" : true|false,      (boolean) If the key is a script\n  \"iswitness\" : true|false,     (boolean) If the address is a witness address\n  \"witness_version\" : version   (numeric, optional) The version number of the witness program\n  \"witness_program\" : \"hex\"     (string, optional) The hex value of the witness program\n  \"script\" : \"type\"             (string, optional) The output script type. Only if \"isscript\" is true and the redeemscript is known. Possible types: nonstandard, pubkey, pubkeyhash, scripthash, multisig, nulldata, witness_v0_keyhash, witness_v0_scripthash, witness_unknown\n  \"hex\" : \"hex\",                (string, optional) The redeemscript for the p2sh address\n  \"pubkeys\"                     (string, optional) Array of pubkeys associated with the known redeemscript (only if \"script\" is \"multisig\")\n    [\n      \"pubkey\"\n      ,...\n    ]\n  \"sigsrequired\" : xxxxx        (numeric, optional) Number of signatures required to spend multisig output (only if \"script\" is \"multisig\")\n  \"pubkey\" : \"publickeyhex\",    (string, optional) The hex value of the raw public key, for single-key addresses (possibly embedded in P2SH or P2WSH)\n  \"embedded\" : {...},           (object, optional) Information about the address embedded in P2SH or P2WSH, if relevant and known. It includes all getaddressinfo output fields for the embedded address, excluding metadata (\"timestamp\", \"hdkeypath\", \"hdseedid\") and relation to the wallet (\"ismine\", \"iswatchonly\", \"account\").\n  \"iscompressed\" : true|false,  (boolean) If the address is compressed\n  \"label\" :  \"label\"            (string) The label associated with the address, \"\" is the default account\n  \"account\" : \"account\"         (string) DEPRECATED. This field will be removed in V0.18. To see this deprecated field, start metrixd with -deprecatedrpc=accounts. The account associated with the address, \"\" is the default account\n  \"timestamp\" : timestamp,      (number, optional) The creation time of the key if available in seconds since epoch (Jan 1 1970 GMT)\n  \"hdkeypath\" : \"keypath\"       (string, optional) The HD keypath if the key is HD and available\n  \"hdseedid\" : \"&lt;hash160&gt;\"      (string, optional) The Hash160 of the HD seed\n  \"hdmasterkeyid\" : \"&lt;hash160&gt;\" (string, optional) alias for hdseedid maintained for backwards compatibility. Will be removed in V0.18.\n  \"labels\"                      (object) Array of labels associated with the address.\n    [\n      { (json object of label data)\n        \"name\": \"labelname\"     (string) The label\n        \"purpose\": \"string\"     (string) Purpose of address (\"send\" for sending address, \"receive\" for receiving address)\n      },...\n    ]\n}\n</code></pre> <p>Examples:</p> <pre><code>&gt; metrix-cli getaddressinfo \"QZCAJ4qLJpNW74Cbgtnav18wYxQ9wX4V3h\"\n\n&gt; curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"getaddressinfo\", \"params\": [\"QZCAJ4qLJpNW74Cbgtnav18wYxQ9wX4V3h\"] }' -H 'content-type: text/plain;' http://127.0.0.1:33831/\n</code></pre> <p>Test example:</p> <pre><code>./metrix-cli getaddressinfo \"QZCAJ4qLJpNW74Cbgtnav18wYxQ9wX4V3h\"\n</code></pre> <p>Test result:</p> <pre><code>{\n  \"address\": \"QZCAJ4qLJpNW74Cbgtnav18wYxQ9wX4V3h\",\n  \"scriptPubKey\": \"76a9148a1827980248580e401055e52c9617cfbbe7efbf88ac\",\n  \"ismine\": true,\n  \"iswatchonly\": false,\n  \"isscript\": false,\n  \"iswitness\": false,\n  \"pubkey\": \"0397a9f2710a0ac5a1ee1345893be6d903fc9e7c79479ab6a4067064731d009a73\",\n  \"iscompressed\": true,\n  \"label\": \"\",\n  \"timestamp\": 1562060128,\n  \"hdkeypath\": \"m/88'/0'/0'\",\n  \"hdseedid\": \"96d04ecdab5e6ddeb20b8c62c98cf3a7548ab07d\",\n  \"hdmasterkeyid\": \"96d04ecdab5e6ddeb20b8c62c98cf3a7548ab07d\",\n  \"labels\": [\n    {\n      \"name\": \"\",\n      \"purpose\": \"receive\"\n    }\n  ]\n}\n</code></pre>"},{"location":"core/commands/#getbalance","title":"getbalance","text":"<p>Returns the total available balance. The available balance is what the wallet considers currently spendable, and is thus affected by options which limit spendability such as -spendzeroconfchange.</p> <p>Arguments:</p> <pre><code>1. (dummy)           (string, optional) Remains for backward compatibility. Must be excluded or set to \"*\".\n2. minconf           (numeric, optional, default=0) Only include transactions confirmed at least this many times.\n3. include_watchonly (bool, optional, default=false) Also include balance in watch-only addresses (see 'importaddress')\n</code></pre> <p>Result:</p> <pre><code>amount              (numeric) The total amount in MRX received for this account.\n</code></pre> <p>Examples:</p> <p>The total amount in the wallet with 1 or more confirmations</p> <pre><code>&gt; metrix-cli getbalance\n</code></pre> <p>The total amount in the wallet at least 6 blocks confirmed</p> <pre><code>&gt; metrix-cli getbalance \"*\" 6\n</code></pre> <p>As a json rpc call</p> <pre><code>&gt; curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"getbalance\", \"params\": [\"*\", 6] }' -H 'content-type: text/plain;' http://127.0.0.1:33831/\n</code></pre> <p>Test example:</p> <pre><code>./metrix-cli getbalance\n</code></pre> <p>Test result:</p> <pre><code>5.683000\n</code></pre>"},{"location":"core/commands/#getnewaddress","title":"getnewaddress","text":"<p>Returns a new Metrix address for receiving payments. If 'label' is specified, it is added to the address book so payments received with the address will be associated with 'label'.</p> <p>Arguments:</p> <pre><code>1. \"label\" (string, optional) The label name for the address to be linked to. If not provided, the default label \"\" is used. It can also be set to the empty string \"\" to represent the default label. The label does not need to exist, it will be created if there is no label by the given name.\n2. \"address_type\" (string, optional) The address type to use. Options are \"legacy\", \"p2sh-segwit\", and \"bech32\". Default is set by -addresstype.\n</code></pre> <p>Result:</p> <pre><code>\"address\" (string) The new metrix address\n</code></pre> <p>Examples:</p> <pre><code>&gt; metrix-cli getnewaddress\n\n&gt; curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"getnewaddress\", \"params\": [] }' -H 'content-type: text/plain;' http://127.0.0.1:33831/\n</code></pre> <p>Test example:</p> <pre><code>./metrix-cli getnewaddress\n</code></pre> <p>Test result:</p> <pre><code>QcMKCuHMFwwGNBdYYes8vKN1Qm1MJkwsQf\n</code></pre>"},{"location":"core/commands/#getrawchangeaddress","title":"getrawchangeaddress","text":"<p>Returns a new Metrix address, for receiving change. This is for use with raw transactions, NOT normal use.</p> <p>Arguments:</p> <pre><code>1. \"address_type\"           (string, optional) The address type to use. Options are \"legacy\", \"p2sh-segwit\", and \"bech32\". Default is set by -changetype.\n</code></pre> <p>Result:</p> <pre><code>\"address\"    (string) The address\n</code></pre> <p>Examples:</p> <pre><code>&gt; metrix-cli getrawchangeaddress\n\n&gt; curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"getrawchangeaddress\", \"params\": [] }' -H 'content-type: text/plain;' http://127.0.0.1:33831/\n</code></pre> <p>Test example:</p> <pre><code>./metrix-cli getrawchangeaddress\n</code></pre> <p>Test result:</p> <pre><code>QhPwqZNWgcgJRZpRH21hs3b2g8PooeaoPt\n</code></pre>"},{"location":"core/commands/#getreceivedbyaddress","title":"getreceivedbyaddress","text":"<p>Returns the total amount received by the given address in transactions with at least minconf confirmations.</p> <p>Arguments:</p> <pre><code>1. \"address\"         (string, required) The metrix address for transactions.\n2. minconf             (numeric, optional, default=1) Only include transactions confirmed at least this many times.\n</code></pre> <p>Result:</p> <p>amount   (numeric) The total amount in MRX received at this address.</p> <p>Examples:</p> <p>The amount from transactions with at least 1 confirmation</p> <pre><code>&gt; metrix-cli getreceivedbyaddress \"QD1ZrZNe3JUo7ZycKEYQQiQAWd9y54F4XX\"\n</code></pre> <p>The amount including unconfirmed transactions, zero confirmations</p> <pre><code>&gt; metrix-cli getreceivedbyaddress \"QD1ZrZNe3JUo7ZycKEYQQiQAWd9y54F4XX\" 0\n</code></pre> <p>The amount with at least 6 confirmations, very safe</p> <pre><code>&gt; metrix-cli getreceivedbyaddress \"QD1ZrZNe3JUo7ZycKEYQQiQAWd9y54F4XX\" 6\n</code></pre> <p>As a json rpc call</p> <pre><code>&gt; curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"getreceivedbyaddress\", \"params\": [\"QD1ZrZNe3JUo7ZycKEYQQiQAWd9y54F4XX\", 6] }' -H 'content-type: text/plain;' http://127.0.0.1:33831/\n</code></pre>"},{"location":"core/commands/#gettransaction","title":"gettransaction","text":"<p>Get detailed information about in-wallet transaction  <p>Arguments:</p> <pre><code>1. \"txid\"                  (string, required) The transaction id\n2. \"include_watchonly\"     (bool, optional, default=false) Whether to include watch-only addresses in balance calculation and details[]\n3. \"waitconf\"              (int, optional, default=0) Wait for enough confirmations before returning\n</code></pre> <p>Result:</p> <pre><code>{\n  \"amount\" : x.xxx,        (numeric) The transaction amount in MRX\n  \"fee\": x.xxx,            (numeric) The amount of the fee in MRX. This is negative and only available for the \n                              'send' category of transactions.\n  \"confirmations\" : n,     (numeric) The number of confirmations\n  \"blockhash\" : \"hash\",    (string) The block hash\n  \"blockindex\" : xx,       (numeric) The index of the transaction in the block that includes it\n  \"blocktime\" : ttt,       (numeric) The time in seconds since epoch (1 Jan 1970 GMT)\n  \"txid\" : \"transactionid\",   (string) The transaction id.\n  \"time\" : ttt,            (numeric) The transaction time in seconds since epoch (1 Jan 1970 GMT)\n  \"timereceived\" : ttt,    (numeric) The time received in seconds since epoch (1 Jan 1970 GMT)\n  \"bip125-replaceable\": \"yes|no|unknown\",  (string) Whether this transaction could be replaced due to BIP125 (replace-by-fee);\n                                                   may be unknown for unconfirmed transactions not in the mempool\n  \"details\" : [\n    {\n      \"account\" : \"accountname\",        (string) DEPRECATED. This field will be removed in a V0.18. To see this deprecated field, start metrixd with -deprecatedrpc=accounts. The account name involved in the transaction, can be \"\" for the default account.\n      \"address\" : \"address\",            (string) The metrix address involved in the transaction\n      \"category\" : \"send|receive\",      (string) The category, either 'send' or 'receive'\n      \"amount\" : x.xxx,                 (numeric) The amount in MRX\n      \"label\" : \"label\",                (string) A comment for the address/transaction, if any\n      \"vout\" : n,                       (numeric) the vout value\n      \"fee\": x.xxx,                     (numeric) The amount of the fee in MRX. This is negative and only available for the \n                                           'send' category of transactions.\n      \"abandoned\": xxx                  (bool) 'true' if the transaction has been abandoned (inputs are respendable). Only available for the \n                                           'send' category of transactions.\n    }\n    ,...\n  ],\n  \"hex\" : \"data\"                        (string) Raw data for transaction\n}\n</code></pre> <p>Examples:</p> <pre><code>&gt; metrix-cli gettransaction \"1075db55d416d3ca199f55b6084e2115b9345e16c5cf302fc80e9d5fbf5d48d\"\n\n&gt; metrix-cli gettransaction \"1075db55d416d3ca199f55b6084e2115b9345e16c5cf302fc80e9d5fbf5d48d\" true\n\n&gt; curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"gettransaction\", \"params\": [\"1075db55d416d3ca199f55b6084e2115b9345e16c5cf302fc80e9d5fbf5d48d\"] }' -H 'content-type: text/plain;' http://127.0.0.1:33831/\n</code></pre>"},{"location":"core/commands/#getunconfirmedbalance","title":"getunconfirmedbalance","text":"<p>Returns the server's total unconfirmed balance</p>"},{"location":"core/commands/#getwalletinfo","title":"getwalletinfo","text":"<p>Returns an object containing various wallet state info.</p> <p>Result:</p> <pre><code>{\n  \"walletname\": xxxxx,               (string) the wallet name\n  \"walletversion\": xxxxx,            (numeric) the wallet version\n  \"balance\": xxxxxxx,                (numeric) the total confirmed balance of the wallet in MRX\n  \"stake\": xxxxxxx,                  (numeric) the total stake balance of the wallet in MRX\n  \"unconfirmed_balance\": xxx,        (numeric) the total unconfirmed balance of the wallet in MRX\n  \"immature_balance\": xxxxxx,        (numeric) the total immature balance of the wallet in MRX\n  \"txcount\": xxxxxxx,                (numeric) the total number of transactions in the wallet\n  \"keypoololdest\": xxxxxx,           (numeric) the timestamp (seconds since Unix epoch) of the oldest pre-generated key in the key pool\n  \"keypoolsize\": xxxx,               (numeric) how many new keys are pre-generated (only counts external keys)\n  \"keypoolsize_hd_internal\": xxxx,   (numeric) how many new keys are pre-generated for internal use (used for change outputs, only appears if the wallet is using this feature, otherwise external keys are used)\n  \"unlocked_until\": ttt,             (numeric) the timestamp in seconds since epoch (midnight Jan 1 1970 GMT) that the wallet is unlocked for transfers, or 0 if the wallet is locked\n  \"paytxfee\": x.xxxx,                (numeric) the transaction fee configuration, set in MRX/kB\n  \"hdseedid\": \"&lt;hash160&gt;\"            (string, optional) the Hash160 of the HD seed (only present when HD is enabled)\n  \"hdmasterkeyid\": \"&lt;hash160&gt;\"       (string, optional) alias for hdseedid retained for backwards-compatibility. Will be removed in V0.18.\n  \"private_keys_enabled\": true|false (boolean) false if privatekeys are disabled for this wallet (enforced watch-only wallet)\n}\n</code></pre> <p>Examples:</p> <pre><code>  &gt; metrix-cli getwalletinfo\n\n  &gt; curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"getwalletinfo\", \"params\": [] }' -H 'content-type: text/plain;' http://127.0.0.1:33831/\n</code></pre>"},{"location":"core/commands/#importaddress","title":"importaddress","text":"<p>Adds an address or script (in hex) that can be watched as if it were in your wallet but cannot be used to spend. Requires a new wallet backup.</p> <p>Arguments:</p> <pre><code>1. \"address\"            (string, required) The Bitcoin address (or hex-encoded script)\n2. \"label\"              (string, optional, default=\"\") An optional label\n3. rescan               (boolean, optional, default=true) Rescan the wallet for transactions\n4. p2sh                 (boolean, optional, default=false) Add the P2SH version of the script as well\n</code></pre> <p>Note: This call can take over an hour to complete if rescan is true, during that time, other rpc calls may report that the imported address exists but related transactions are still missing, leading to temporarily incorrect/bogus balances and unspent outputs until rescan completes. If you have the full public key, you should call importpubkey instead of this.</p> <p>Note: If you import a non-standard raw script in hex form, outputs sending to it will be treated as change, and not show up in many RPCs.</p> <p>Examples:</p> <p>Import an address with rescan</p> <pre><code>&gt; metrix-cli importaddress \"myaddress\"\n</code></pre> <p>Import using a label without rescan</p> <pre><code>&gt; metrix-cli importaddress \"myaddress\" \"testing\" false\n</code></pre> <p>As a JSON-RPC call</p> <pre><code>&gt; curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"importaddress\", \"params\": [\"myaddress\", \"testing\", false] }' -H 'content-type: text/plain;' http://127.0.0.1:33831/\n</code></pre>"},{"location":"core/commands/#importmulti","title":"importmulti","text":"<p>Import addresses/scripts (with private or public keys, redeem script (P2SH)), rescanning all addresses in one-shot-only (rescan can be disabled via options). Requires a new wallet backup.</p> <p>Arguments:</p> <pre><code>1. requests                                                   (array, required) Data to be imported\n  [     \n    {\n      \"scriptPubKey\": \"&lt;script&gt;\" | { \"address\":\"&lt;address&gt;\" }, (string / json, required) Type of scriptPubKey (string for script, json for address)\n      \"timestamp\": timestamp | \"now\"                        , (integer / string, required) Creation time of the key in seconds since epoch (Jan 1 1970 GMT),\n                                                              or the string \"now\" to substitute the current synced blockchain time. The timestamp of the oldest\n                                                              key will determine how far back blockchain rescans need to begin for missing wallet transactions.\n                                                              \"now\" can be specified to bypass scanning, for keys which are known to never have been used, and\n                                                              0 can be specified to scan the entire blockchain. Blocks up to 2 hours before the earliest key\n                                                              creation time of all keys being imported by the importmulti call will be scanned.\n      \"redeemscript\": \"&lt;script&gt;\"                            , (string, optional) Allowed only if the scriptPubKey is a P2SH address or a P2SH scriptPubKey\n      \"pubkeys\": [\"&lt;pubKey&gt;\", ... ]                         , (array, optional) Array of strings giving pubkeys that must occur in the output or redeemscript\n      \"keys\": [\"&lt;key&gt;\", ... ]                               , (array, optional) Array of strings giving private keys whose corresponding public keys must occur in the output or redeemscript\n      \"internal\": &lt;true&gt;                                    , (boolean, optional, default: false) Stating whether matching outputs should be treated as not incoming payments aka change\n      \"watchonly\": &lt;true&gt;                                   , (boolean, optional, default: false) Stating whether matching outputs should be considered watched even when they're not spendable, only allowed if keys are empty\n      \"label\": &lt;label&gt;                                      , (string, optional, default: '') Label to assign to the address (aka account name, for now), only allowed with internal=false\n    }\n  ,...\n  ]\n2. options                 (json, optional)\n  {\n     \"rescan\": &lt;false&gt;,         (boolean, optional, default: true) Stating if should rescan the blockchain after all imports\n  }\n\nNote: This call can take over an hour to complete if rescan is true, during that time, other rpc calls\nmay report that the imported keys, addresses or scripts exists but related transactions are still missing.\n</code></pre> <p>Examples:</p> <pre><code>&gt; metrix-cli importmulti '[{ \"scriptPubKey\": { \"address\": \"&lt;my address&gt;\" }, \"timestamp\":1455191478 }, { \"scriptPubKey\": { \"address\": \"&lt;my 2nd address&gt;\" }, \"label\": \"example 2\", \"timestamp\": 1455191480 }]'\n\n&gt; metrix-cli importmulti '[{ \"scriptPubKey\": { \"address\": \"&lt;my address&gt;\" }, \"timestamp\":1455191478 }]' '{ \"rescan\": false}'\n\nResponse is an array with the same size as the input that has the execution result :\n[{ \"success\": true } , { \"success\": false, \"error\": { \"code\": -1, \"message\": \"Internal Server Error\"} }, ... ]\n</code></pre>"},{"location":"core/commands/#importprivkey","title":"importprivkey","text":"<p>Adds a private key (as returned by dumpprivkey) to your wallet. Requires a new wallet backup. Hint: use importmulti to import more than one private key.</p> <p>Arguments:</p> <pre><code>1. \"metrixprivkey\" (string, required) The private key (see dumpprivkey)\n2. \"label\"       (string, optional, default=\"\") An optional label\n3. rescan        (boolean, optional, default=true) Rescan the wallet for transactions\n</code></pre> <p>Note: This call can take over an hour to complete if rescan is true, during that time, other rpc calls may report that the imported key exists but related transactions are still missing, leading to temporarily incorrect/bogus balances and unspent outputs until rescan completes.</p> <p>Examples:</p> <p>Dump a private key</p> <pre><code>&gt; metrix-cli dumpprivkey \"myaddress\"\n</code></pre> <p>Import the private key with rescan</p> <pre><code>&gt; metrix-cli importprivkey \"mykey\"\n</code></pre> <p>Import using a label and without rescan</p> <pre><code>&gt; metrix-cli importprivkey \"mykey\" \"testing\" false\n</code></pre> <p>Import using default blank label and without rescan</p> <pre><code>&gt; metrix-cli importprivkey \"mykey\" \"\" false\n</code></pre> <p>As a JSON-RPC call</p> <pre><code>&gt; curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"importprivkey\", \"params\": [\"mykey\", \"testing\", false] }' -H 'content-type: text/plain;' http://127.0.0.1:33831/\n</code></pre>"},{"location":"core/commands/#importprunedfunds","title":"importprunedfunds","text":"<p>Imports funds without rescan. Corresponding address or script must previously be included in wallet. Aimed towards pruned wallets. The end-user is responsible to import additional transactions that subsequently spend the imported outputs or rescan after the point in the blockchain the transaction is included.</p> <p>Arguments:</p> <pre><code>1. \"rawtransaction\" (string, required) A raw transaction in hex funding an already-existing address in wallet\n2. \"txoutproof\" (string, required) The hex output from gettxoutproof that contains the transaction\n</code></pre>"},{"location":"core/commands/#listreceivedbyaddress","title":"listreceivedbyaddress","text":"<p>List balances by receiving address.</p> <p>Arguments:</p> <pre><code>1. minconf (numeric, optional, default=1) The minimum number of confirmations before payments are included.\n2. include_empty (bool, optional, default=false) Whether to include addresses that haven't received any payments.\n3. include_watchonly (bool, optional, default=false) Whether to include watch-only addresses (see 'importaddress').\n4. address_filter (string, optional) If present, only return information on this address.\n</code></pre> <p>Result:</p> <pre><code> [\n  {\n    \"involvesWatchonly\" : true,        (bool) Only returned if imported addresses were involved in transaction\n    \"address\" : \"receivingaddress\",    (string) The receiving address\n    \"account\" : \"accountname\",         (string) DEPRECATED. Backwards compatible alias for label.\n    \"amount\" : x.xxx,                  (numeric) The total amount in MRX received by the address\n    \"confirmations\" : n,               (numeric) The number of confirmations of the most recent transaction included\n    \"label\" : \"label\",                 (string) The label of the receiving address. The default label is \"\".\n    \"txids\": [\n       \"txid\",                         (string) The ids of transactions received with the address \n       ...\n    ]\n  }\n  ,...\n]\n</code></pre>"},{"location":"core/commands/#importpubkey","title":"importpubkey","text":"<p>Adds a public key (in hex) that can be watched as if it were in your wallet but cannot be used to spend. Requires a new wallet backup.</p> <p>Arguments:</p> <pre><code>1. \"pubkey\" (string, required) The hex-encoded public key\n2. \"label\"  (string, optional, default=\"\") An optional label\n3. rescan   (boolean, optional, default=true) Rescan the wallet for transactions\n\nNote: This call can take over an hour to complete if rescan is true, during that time, other rpc calls\nmay report that the imported pubkey exists but related transactions are still missing, leading to temporarily incorrect/bogus balances and unspent outputs until rescan completes.\n</code></pre> <p>Examples:</p> <p>Import a public key with rescan</p> <pre><code>&gt; metrix-cli importpubkey \"mypubkey\"\n</code></pre> <p>Import using a label without rescan</p> <pre><code>&gt; metrix-cli importpubkey \"mypubkey\" \"testing\" false\n</code></pre> <p>As a JSON-RPC call</p> <pre><code>&gt; curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"importpubkey\", \"params\": [\"mypubkey\", \"testing\", false] }' -H 'content-type: text/plain;' http://127.0.0.1:33831/\n</code></pre>"},{"location":"core/commands/#importwallet","title":"importwallet","text":"<p>Imports keys from a wallet dump file (see dumpwallet). Requires a new wallet backup to include imported keys.</p> <p>Arguments:</p> <pre><code>1. \"filename\" (string, required) The wallet file\n</code></pre> <p>Examples:</p> <p>Dump the wallet</p> <pre><code>&gt; metrix-cli dumpwallet \"test\"\n</code></pre> <p>Import the wallet</p> <pre><code>&gt; metrix-cli importwallet \"test\"\n</code></pre> <p>Import using the json rpc call</p> <pre><code>&gt; curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"importwallet\", \"params\": [\"test\"] }' -H 'content-type: text/plain;' http://127.0.0.1:33831/\n</code></pre>"},{"location":"core/commands/#keypoolrefill","title":"keypoolrefill","text":"<p>Fills the keypool.</p> <p>Arguments:</p> <pre><code>1. newsize (numeric, optional, default=100) The new keypool size\n</code></pre> <p>Examples:</p> <pre><code>&gt; metrix-cli keypoolrefill\n\n&gt; curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"keypoolrefill\", \"params\": [] }' -H 'con\n</code></pre>"},{"location":"core/commands/#listaddressgroupings","title":"listaddressgroupings","text":"<p>Lists groups of addresses which have had their common ownership made public by common use as inputs or as the resulting change in past transactions</p> <p>Result:</p> <pre><code>[\n  [\n    [\n      \"address\", (string) The metrix address\n       amount,   (numeric) The amount in MRX\n      \"label\"    (string, optional) The label\n    ]\n    ,...\n  ]\n  ,...\n]\n</code></pre> <p>Examples:</p> <pre><code>&gt; metrix-cli listaddressgroupings\n\n&gt; curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"listaddressgroupings\", \"params\": [] }' -H 'content-type: text/plain;' http://127.0.0.1:33831/\n</code></pre>"},{"location":"core/commands/#listlabels","title":"listlabels","text":"<p>Returns the list of all labels, or labels that are assigned to addresses with a specific purpose.</p> <p>Arguments:</p> <pre><code>1. \"purpose\" (string, optional) Address purpose to list labels for ('send','receive'). An empty string is the same as not providing this argument.\n</code></pre> <p>Result:</p> <pre><code>[ \n  \"label\", (string) Label name\n  ...\n]\n</code></pre> <p>Examples:</p> <p>List all labels</p> <pre><code>&gt; metrix-cli listlabels\n</code></pre> <p>List labels that have receiving addresses</p> <pre><code>&gt; metrix-cli listlabels receive\n</code></pre> <p>List labels that have sending addresses</p> <pre><code>&gt; metrix-cli listlabels send\n</code></pre> <p>As json rpc call</p> <pre><code>&gt; curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"listlabels\", \"params\": [receive] }' -H 'content-type: text/plain;' http://127.0.0.1:33831/\n</code></pre>"},{"location":"core/commands/#listlockunspent","title":"listlockunspent","text":"<p>Returns list of temporarily unspendable outputs. See the lockunspent call to lock and unlock transactions for spending.</p> <p>Result:</p> <pre><code>[\n  {\n    \"txid\" : \"transactionid\", (string) The transaction id locked\n    \"vout\" : n ,              (numeric) The vout value\n  }\n  ,...\n]\n</code></pre> <p>Examples:</p> <p>List the unspent transactions</p> <pre><code>&gt; metrix-cli listunspent\n</code></pre> <p>Lock an unspent transaction</p> <pre><code>&gt; metrix-cli lockunspent false \"[{\\\"txid\\\":\\\"a08e6907dbbd3d809776dbfc5d82e371b764ed838b5655e72f463568df1aadf0\\\",\\\"vout\\\":1}]\"\n</code></pre> <p>List the locked transactions</p> <pre><code>&gt; metrix-cli listlockunspent\n</code></pre> <p>Unlock the transaction again</p> <pre><code>&gt; metrix-cli lockunspent true \"[{\\\"txid\\\":\\\"a08e6907dbbd3d809776dbfc5d82e371b764ed838b5655e72f463568df1aadf0\\\",\\\"vout\\\":1}]\"\n</code></pre> <p>As a json rpc call</p> <pre><code>&gt; curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"listlockunspent\", \"params\": [] }' -H 'content-type: text/plain;' http://127.0.0.1:33831/\n</code></pre> <p>Examples:</p> <pre><code>&gt; metrix-cli listreceivedbyaddress\n\n&gt; metrix-cli listreceivedbyaddress 6 true\n\n&gt; curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"listreceivedbyaddress\", \"params\": [6, true, true] }' -H 'content-type: text/plain;' http://127.0.0.1:33831/\n\n&gt; curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"listreceivedbyaddress\", \"params\": [6, true, true, \"1M72Sfpbz1BPpXFHz9m3CdqATR44Jvaydd\"] }' -H 'content-type: text/plain;' http://127.0.0.1:33831/\n</code></pre>"},{"location":"core/commands/#listsinceblock","title":"listsinceblock","text":"<p>Get all transactions in blocks since block [blockhash], or all transactions if omitted. If \"blockhash\" is no longer a part of the main chain, transactions from the fork point onward are included. Additionally, if include_removed is set, transactions affecting the wallet which were removed are returned in the \"removed\" array.</p> <p>Arguments:</p> <pre><code>1. \"blockhash\" (string, optional) The block hash to list transactions since\n2. target_confirmations: (numeric, optional, default=1) Return the nth block hash from the main chain. e.g. 1 would mean the best block hash. Note: this is not used as a filter, but only affects [lastblock] in the return value\n3. include_watchonly: (bool, optional, default=false) Include transactions to watch-only addresses (see 'importaddress')\n4. include_removed: (bool, optional, default=true) Show transactions that were removed due to a reorg in the \"removed\" array\n(not guaranteed to work on pruned nodes)\n</code></pre> <p>Result:</p> <pre><code>{\n  \"transactions\": \n  [\n    \"account\":\"accountname\",       (string) DEPRECATED. This field will be removed in V0.18. To see this deprecated field, start metrixd with -deprecatedrpc=accounts. The account name associated with the transaction. Will be \"\" for the default account.\n    \"address\":\"address\",           (string) The metrix address of the transaction. Not present for move transactions (category = move).\n    \"category\":\"send|receive\",     (string) The transaction category. 'send' has negative amounts, 'receive' has positive amounts.\n    \"amount\": x.xxx,               (numeric) The amount in MRX. This is negative for the 'send' category, and for the 'move' category for moves \n                                           outbound. It is positive for the 'receive' category, and for the 'move' category for inbound funds.\n    \"vout\" : n,                    (numeric) the vout value\n    \"fee\": x.xxx,                  (numeric) The amount of the fee in MRX. This is negative and only available for the 'send' category of transactions.\n    \"confirmations\": n,            (numeric) The number of confirmations for the transaction. Available for 'send' and 'receive' category of transactions.\n                                          When it's &lt; 0, it means the transaction conflicted that many blocks ago.\n    \"blockhash\": \"hashvalue\",      (string) The block hash containing the transaction. Available for 'send' and 'receive' category of transactions.\n    \"blockindex\": n,               (numeric) The index of the transaction in the block that includes it. Available for 'send' and 'receive' category of transactions.\n    \"blocktime\": xxx,              (numeric) The block time in seconds since epoch (1 Jan 1970 GMT).\n    \"txid\": \"transactionid\",       (string) The transaction id. Available for 'send' and 'receive' category of transactions.\n    \"time\": xxx,                   (numeric) The transaction time in seconds since epoch (Jan 1 1970 GMT).\n    \"timereceived\": xxx,           (numeric) The time received in seconds since epoch (Jan 1 1970 GMT). Available for 'send' and 'receive' category of transactions.\n    \"bip125-replaceable\": \"yes|no|unknown\",  \n                                   (string) Whether this transaction could be replaced due to BIP125 (replace-by-fee);\n                                          may be unknown for unconfirmed transactions not in the mempool\n    \"abandoned\": xxx,              (bool) 'true' if the transaction has been abandoned (inputs are respendable). Only available for the 'send' category of transactions.\n    \"comment\": \"...\",              (string) If a comment is associated with the transaction.\n    \"label\" : \"label\"              (string) A comment for the address/transaction, if any\n    \"to\": \"...\",                   (string) If a comment to is associated with the transaction.\n  ],\n  \"removed\": [\n    &lt;structure is the same as \"transactions\" above, only present if include_removed=true&gt;\n    Note: transactions that were re-added in the active chain will appear as-is in this array, and may thus have a positive confirmation count.\n  ],\n  \"lastblock\": \"lastblockhash\"     (string) The hash of the block (target_confirmations-1) from the best block on the main chain. This is typically used to feed back into listsinceblock the next time you call it. So you would generally use a target_confirmations of say 6, so you will be continually re-notified of transactions until they've reached 6 confirmations plus any new ones\n}\n</code></pre> <p>Examples:</p> <pre><code>&gt; metrix-cli listsinceblock\n\n&gt; metrix-cli listsinceblock \"000000000000000bacf66f7497b7dc45ef753ee9a7d38571037cdb1a57f663ad\" 6\n\n&gt; curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"listsinceblock\", \"params\": [\"000000000000000bacf66f7497b7dc45ef753ee9a7d38571037cdb1a57f663ad\", 6] }' -H 'content-type: text/plain;' http://127.0.0.1:33831/\n</code></pre>"},{"location":"core/commands/#listtransactions","title":"listtransactions","text":"<p>If a label name is provided, this will return only incoming transactions paying to addresses with the specified label.</p> <p>Returns up to 'count' most recent transactions skipping the first 'from' transactions.</p> <p>Note that the \"account\" argument and \"otheraccount\" return value have been removed in V0.17. To use this RPC with an \"account\" argument, restart metrixd with -deprecatedrpc=accounts</p> <p>Arguments:</p> <pre><code>1. \"label\"           (string, optional) If set, should be a valid label name to return only incoming transactions\n              with the specified label, or \"*\" to disable filtering and return all transactions.\n2. count             (numeric, optional, default=10) The number of transactions to return\n3. skip              (numeric, optional, default=0) The number of transactions to skip\n4. include_watchonly (bool, optional, default=false) Include transactions to watch-only addresses (see 'importaddress')\n</code></pre> <p>Result:</p> <pre><code>[\n  {\n    \"address\":\"address\",      (string) The metrix address of the transaction.\n    \"category\":\"send|receive\", (string) The transaction category.\n    \"amount\": x.xxx,          (numeric) The amount in MRX. This is negative for the 'send' category, and is positive\n                                        for the 'receive' category,\n    \"label\": \"label\",         (string) A comment for the address/transaction, if any\n    \"vout\": n,                (numeric) the vout value\n    \"fee\": x.xxx,             (numeric) The amount of the fee in MRX. This is negative and only available for the \n                                         'send' category of transactions.\n    \"confirmations\": n,       (numeric) The number of confirmations for the transaction. Negative confirmations indicate the\n                                         transaction conflicts with the block chain\n    \"trusted\": xxx,           (bool) Whether we consider the outputs of this unconfirmed transaction safe to spend.\n    \"blockhash\": \"hashvalue\", (string) The block hash containing the transaction.\n    \"blockindex\": n,          (numeric) The index of the transaction in the block that includes it.\n    \"blocktime\": xxx,         (numeric) The block time in seconds since epoch (1 Jan 1970 GMT).\n    \"txid\": \"transactionid\",  (string) The transaction id.\n    \"time\": xxx,              (numeric) The transaction time in seconds since epoch (midnight Jan 1 1970 GMT).\n    \"timereceived\": xxx,      (numeric) The time received in seconds since epoch (midnight Jan 1 1970 GMT).\n    \"comment\": \"...\",         (string) If a comment is associated with the transaction. \n    \"bip125-replaceable\": \"yes|no|unknown\",  (string) Whether this transaction could be replaced due to BIP125 (replace-by-fee);\n                                                     may be unknown for unconfirmed transactions not in the mempool\n    \"abandoned\": xxx          (bool) 'true' if the transaction has been abandoned (inputs are respendable). Only available for the \n                                         'send' category of transactions.\n  }\n]\n</code></pre> <p>Examples:</p> <p>List the most recent 10 transactions in the systems</p> <pre><code>&gt; metrix-cli listtransactions\n</code></pre> <p>List transactions 100 to 120</p> <pre><code>&gt; metrix-cli listtransactions \"*\" 20 100\n</code></pre> <p>As a json rpc call</p> <pre><code>&gt; curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"listtransactions\", \"params\": [\"*\", 20, 100] }' -H 'content-type: text/plain;' http://127.0.0.1:33831/\n</code></pre>"},{"location":"core/commands/#listreceivedbylabel","title":"listreceivedbylabel","text":"<p>List received transactions by label.</p> <p>Arguments:</p> <pre><code>1. minconf           (numeric, optional, default=1) The minimum number of confirmations before payments are included.\n2. include_empty     (bool, optional, default=false) Whether to include labels that haven't received any payments.\n3. include_watchonly (bool, optional, default=false) Whether to include watch-only addresses (see 'importaddress').\n</code></pre> <p>Result:</p> <pre><code>[\n  {\n    \"involvesWatchonly\" : true, (bool) Only returned if imported addresses were involved in transaction\n    \"account\" : \"accountname\",  (string) DEPRECATED. Backwards compatible alias for label.\n    \"amount\" : x.xxx,           (numeric) The total amount received by addresses with this label\n    \"confirmations\" : n,        (numeric) The number of confirmations of the most recent transaction included\n    \"label\" : \"label\"           (string) The label of the receiving address. The default label is \"\".\n  }\n  ,...\n]\n</code></pre> <p>Examples:</p> <pre><code>&gt; metrix-cli listreceivedbylabel\n\n&gt; metrix-cli listreceivedbylabel 6 true\n\n&gt; curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"listreceivedbylabel\", \"params\": [6, true, true] }' -H 'content-type: text/plain;' http://127.0.0.1:33831/\n</code></pre>"},{"location":"core/commands/#listunspent","title":"listunspent","text":"<p>Returns array of unspent transaction outputs with between minconf and maxconf (inclusive) confirmations.</p> <p>Optionally filter to only include txouts paid to specified addresses.</p> <p>Arguments:</p> <pre><code>1. minconf               (numeric, optional, default=1) The minimum confirmations to filter\n2. maxconf               (numeric, optional, default=9999999) The maximum confirmations to filter\n3. \"addresses\"           (string) A json array of metrix addresses to filter\n    [\n      \"address\"          (string) metrix address\n      ,...\n    ]\n4. include_unsafe        (bool, optional, default=true) Include outputs that are not safe to spend See description of \"safe\" attribute below.\n5. query_options         (json, optional) JSON with query options\n    {\n      \"minimumAmount\"    (numeric or string, default=0) Minimum value of each UTXO in MRX\n      \"maximumAmount\"    (numeric or string, default=unlimited) Maximum value of each UTXO in MRX\n      \"maximumCount\"     (numeric or string, default=unlimited) Maximum number of UTXOs\n      \"minimumSumAmount\" (numeric or string, default=unlimited) Minimum sum value of all UTXOs in MRX\n    }\n</code></pre> <p>Result\uff1a</p> <pre><code>[                \n  {\n    \"txid\" : \"txid\",          (string) the transaction id \n    \"vout\" : n,               (numeric) the vout value\n    \"address\" : \"address\",    (string) the metrix address\n    \"label\" : \"label\",        (string) The associated label, or \"\" for the default label\n    \"account\" : \"account\",    (string) DEPRECATED. This field will be removed in V0.18. To see this deprecated field, start metrixd with -deprecatedrpc=accounts. The associated account, or \"\" for the default account\n    \"scriptPubKey\" : \"key\",   (string) the script key\n    \"amount\" : x.xxx,         (numeric) the transaction output amount in MRX\n    \"confirmations\" : n,      (numeric) The number of confirmations\n    \"redeemScript\" : n        (string) The redeemScript if scriptPubKey is P2SH\n    \"spendable\" : xxx,        (bool) Whether we have the private keys to spend this output\n    \"solvable\" : xxx,         (bool) Whether we know how to spend this output, ignoring the lack of keys\n    \"safe\" : xxx              (bool) Whether this output is considered safe to spend. Unconfirmed transactions\n                              from outside keys and unconfirmed replacement transactions are considered unsafe\n                              and are not eligible for spending by fundrawtransaction and sendtoaddress.\n  }\n  ,...\n]\n</code></pre> <p>Examples\uff1a</p> <pre><code>&gt; metrix-cli listunspent\n\n&gt; metrix-cli listunspent 6 9999999 \"[\\\"QjWnDZxwLhrJDcp4Hisse8RfBo2jRDZY5Z\\\",\\\"Q6sSauSf5pF2UkUwvKGq4qjNRzBZYqgEL5\\\"]\"\n\n&gt; curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"listunspent\", \"params\": [6, 9999999 \"[\\\"QjWnDZxwLhrJDcp4Hisse8RfBo2jRDZY5Z\\\",\\\"Q6sSauSf5pF2UkUwvKGq4qjNRzBZYqgEL5\\\"]\"] }' -H 'content-type: text/plain;' http://127.0.0.1:33831/\n\n&gt; metrix-cli listunspent 6 9999999 '[]' true '{ \"minimumAmount\": 0.005 }'\n\n&gt; curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"listunspent\", \"params\": [6, 9999999, [] , true, { \"minimumAmount\": 0.005 } ] }' -H 'content-type: text/plain;' http://127.0.0.1:33831/\n</code></pre>"},{"location":"core/commands/#listwallets","title":"listwallets","text":"<p>Returns a list of currently loaded wallets. For full information on the wallet, use \"getwalletinfo\"</p> <p>Result:</p> <pre><code>[                         \n  \"walletname\"            (string) the wallet name\n   ...\n]\n</code></pre> <p>Examples:</p> <pre><code>&gt; metrix-cli listwallets\n\n&gt; curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"listwallets\", \"params\": [] }' -H 'content-type: text/plain;' http://127.0.0.1:33831/\n</code></pre>"},{"location":"core/commands/#loadwallet","title":"loadwallet","text":"<p>loadwallet \"filename\"</p> <p>Loads a wallet from a wallet file or directory. Note that all wallet command-line options used when starting metrixd will be applied to the new wallet (eg -zapwallettxes, upgradewallet, rescan, etc).</p> <p>Arguments:</p> <pre><code>1. \"filename\"    (string, required) The wallet directory or .dat file.\n</code></pre> <p>Result:</p> <pre><code>{\n  \"name\" :    &lt;wallet_name&gt;,        (string) The wallet name if loaded successfully.\n  \"warning\" : &lt;warning&gt;,            (string) Warning message if wallet was not loaded cleanly.\n}\n</code></pre> <p>Examples:</p> <pre><code>&gt; metrix-cli loadwallet \"test.dat\"\n\n&gt; curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"loadwallet\", \"params\": [\"test.dat\"] }' -H 'content-type: text/plain;' http://127.0.0.1:33831/\n</code></pre>"},{"location":"core/commands/#lockunspent","title":"lockunspent","text":"<p>Updates list of temporarily unspendable outputs.</p> <p>Temporarily lock (unlock=false) or unlock (unlock=true) specified transaction outputs.</p> <p>If no transaction outputs are specified when unlocking then all current locked transaction outputs are unlocked.</p> <p>A locked transaction output will not be chosen by automatic coin selection, when spending metrixs.</p> <p>Locks are stored in memory only. Nodes start with zero locked outputs, and the locked output list is always cleared (by virtue of process exit) when a node stops or fails. Also see the listunspent call.</p> <p>Arguments:</p> <pre><code>1. unlock            (boolean, required) Whether to unlock (true) or lock (false) the specified transactions\n2. \"transactions\"  (string, optional) A json array of objects. Each object the txid (string) vout (numeric)\n     [           (json array of json objects)\n       {\n         \"txid\":\"id\",    (string) The transaction id\n         \"vout\": n         (numeric) The output number\n       }\n       ,...\n     ]\n</code></pre> <p>Result:</p> <pre><code>true|false (boolean) Whether the command was successful or not\n</code></pre> <p>Examples:</p> <p>List the unspent transactions</p> <pre><code>&gt; metrix-cli listunspent\n</code></pre> <p>Lock an unspent transaction</p> <pre><code>&gt; metrix-cli lockunspent false \"[{\\\"txid\\\":\\\"a08e6907dbbd3d809776dbfc5d82e371b764ed838b5655e72f463568df1aadf0\\\",\\\"vout\\\":1}]\"\n</code></pre> <p>List the locked transactions</p> <pre><code>&gt; metrix-cli listlockunspent\n</code></pre> <p>Unlock the transaction again</p> <pre><code>&gt; metrix-cli lockunspent true \"[{\\\"txid\\\":\\\"a08e6907dbbd3d809776dbfc5d82e371b764ed838b5655e72f463568df1aadf0\\\",\\\"vout\\\":1}]\"\n</code></pre> <p>As a json rpc call</p> <pre><code>&gt; curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"lockunspent\", \"params\": [false, \"[{\\\"txid\\\":\\\"a08e6907dbbd3d809776dbfc5d82e371b764ed838b5655e72f463568df1aadf0\\\",\\\"vout\\\":1}]\"] }' -H 'content-type: text/plain;' http://127.0.0.1:33831/\n</code></pre>"},{"location":"core/commands/#removeprunedfunds","title":"removeprunedfunds","text":"<p>Deletes the specified transaction from the wallet. Meant for use with pruned wallets and as a companion to importprunedfunds. This will affect wallet balances.</p> <p>Arguments:</p> <pre><code>1. \"txid\" (string, required) The hex-encoded id of the transaction you are deleting\n</code></pre> <p>Examples:</p> <pre><code>&gt; metrix-cli removeprunedfunds \"a8d0c0184dde994a09ec054286f1ce581bebf46446a512166eae7628734ea0a5\"\n</code></pre> <p>As a JSON-RPC call</p> <pre><code>&gt; curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"removeprunedfunds\", \"params\": [\"a8d0c0184dde994a09ec054286f1ce581bebf46446a512166eae7628734ea0a5\"] }' -H 'content-type: text/plain;' http://127.0.0.1:33831/\n</code></pre>"},{"location":"core/commands/#rescanblockchain","title":"rescanblockchain","text":"<p>Rescan the local blockchain for wallet related transactions.</p> <p>Arguments:</p> <pre><code>1. \"start_height\" (numeric, optional) block height where the rescan should start\n2. \"stop_height\" (numeric, optional) the last block height that should be scanned\n</code></pre> <p>Result:</p> <pre><code>{\n  \"start_height\" (numeric) The block height where the rescan has started. If omitted, rescan started from the genesis block.\n  \"stop_height\" (numeric) The height of the last rescanned block. If omitted, rescan stopped at the chain tip.\n}\n</code></pre> <p>Examples:</p> <pre><code>&gt; metrix-cli rescanblockchain 100000 120000\n\n&gt; curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"rescanblockchain\", \"params\": [100000, 120000] }' -H 'content-type: text/plain;' http://127.0.0.1:33831/\n</code></pre>"},{"location":"core/commands/#reservebalance","title":"reservebalance","text":"<p>Set reserve amount not participating in network protection. If no parameters provided current setting is printed.</p>"},{"location":"core/commands/#sendmany","title":"sendmany","text":"<p>Send multiple times. Amounts are double-precision floating point numbers. Note that the \"fromaccount\" argument has been removed in V0.17. To use this RPC with a \"fromaccount\" argument, restart metrixd with -deprecatedrpc=accounts</p> <p>Requires wallet passphrase to be set with walletpassphrase call.</p> <p>Arguments:</p> <pre><code>1. \"dummy\"               (string, required) Must be set to \"\" for backwards compatibility.\n2. \"amounts\"             (string, required) A json object with addresses and amounts\n    {\n      \"address\":amount   (numeric or string) The metrix address is the key, the numeric amount (can be string) in MRX is the value\n      ,...\n    }\n3. minconf               (numeric, optional, default=1) Only use the balance confirmed at least this many times.\n4. \"comment\"             (string, optional) A comment\n5. subtractfeefrom       (array, optional) A json array with addresses.\n                           The fee will be equally deducted from the amount of each selected address.\n                           Those recipients will receive less metrixs than you enter in their corresponding amount field.\n                           If no addresses are specified here, the sender pays the fee.\n    [\n      \"address\"          (string) Subtract fee from this address\n      ,...\n    ]\n6. replaceable           (boolean, optional) Allow this transaction to be replaced by a transaction with higher fees via BIP 125\n7. conf_target           (numeric, optional) Confirmation target (in blocks)\n8. \"estimate_mode\"       (string, optional, default=UNSET) The fee estimate mode, must be one of:\n       \"UNSET\"\n       \"ECONOMICAL\"\n       \"CONSERVATIVE\"\n</code></pre> <p>Result:</p> <pre><code>\"txid\" (string) The transaction id for the send. Only 1 transaction is created regardless of the number of addresses.\n</code></pre> <p>Examples:</p> <p>Send two amounts to two different addresses:</p> <pre><code>&gt; metrix-cli sendmany \"\" \"{\\\"QD1ZrZNe3JUo7ZycKEYQQiQAWd9y54F4XX\\\":0.01,\\\"Q353tsE8YMTA4EuV7dgUXGjNFf9KpVvKHz\\\":0.02}\"\n</code></pre> <p>Send two amounts to two different addresses setting the confirmation and comment:</p> <pre><code>&gt; metrix-cli sendmany \"\" \"{\\\"QD1ZrZNe3JUo7ZycKEYQQiQAWd9y54F4XX\\\":0.01,\\\"Q353tsE8YMTA4EuV7dgUXGjNFf9KpVvKHz\\\":0.02}\" 6 \"testing\"\n</code></pre> <p>Send two amounts to two different addresses, subtract fee from amount:</p> <pre><code>&gt; metrix-cli sendmany \"\" \"{\\\"QD1ZrZNe3JUo7ZycKEYQQiQAWd9y54F4XX\\\":0.01,\\\"Q353tsE8YMTA4EuV7dgUXGjNFf9KpVvKHz\\\":0.02}\" 1 \"\" \"[\\\"QD1ZrZNe3JUo7ZycKEYQQiQAWd9y54F4XX\\\",\\\"Q353tsE8YMTA4EuV7dgUXGjNFf9KpVvKHz\\\"]\"\n</code></pre> <p>As a json rpc call</p> <pre><code>&gt; curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"sendmany\", \"params\": [\"\", {\"QD1ZrZNe3JUo7ZycKEYQQiQAWd9y54F4XX\":0.01,\"Q353tsE8YMTA4EuV7dgUXGjNFf9KpVvKHz\":0.02}, 6, \"testing\"] }' -H 'content-type: text/plain;' http://127.0.0.1:33831/\n</code></pre>"},{"location":"core/commands/#sendmanywithdupes","title":"sendmanywithdupes","text":"<p>Send multiple times. Amounts are double-precision floating point numbers. Supports duplicate addresses Requires wallet passphrase to be set with walletpassphrase call.</p> <p>Arguments:</p> <pre><code>1. \"fromaccount\"         (string, required) DEPRECATED. The account to send the funds from. Should be \"\" for the default account\n2. \"amounts\"             (string, required) A json object with addresses and amounts\n    {\n      \"address\":amount   (numeric or string) The metrix address is the key, the numeric amount (can be string) in MRX is the value\n      ,...\n    }\n3. minconf               (numeric, optional, default=1) Only use the balance confirmed at least this many times.\n4. \"comment\"             (string, optional) A comment\n5. subtractfeefrom       (array, optional) A json array with addresses.\n                           The fee will be equally deducted from the amount of each selected address.\n                           Those recipients will receive less metrixs than you enter in their corresponding amount field.\n                           If no addresses are specified here, the sender pays the fee.\n    [\n      \"address\"          (string) Subtract fee from this address\n      ,...\n    ]\n</code></pre> <p>Result:</p> <pre><code>\"txid\" (string) The transaction id for the send. Only 1 transaction is created regardless of the number of addresses.\n</code></pre> <p>Examples:</p> <p>Send two amounts to two different addresses:</p> <pre><code>&gt; metrix-cli sendmanywithdupes \"\" \"{\\\"QD1ZrZNe3JUo7ZycKEYQQiQAWd9y54F4XX\\\":0.01,\\\"Q353tsE8YMTA4EuV7dgUXGjNFf9KpVvKHz\\\":0.02}\"\n</code></pre> <p>Send two amounts to two different addresses setting the confirmation and comment:</p> <pre><code>&gt; metrix-cli sendmanywithdupes \"\" \"{\\\"QD1ZrZNe3JUo7ZycKEYQQiQAWd9y54F4XX\\\":0.01,\\\"Q353tsE8YMTA4EuV7dgUXGjNFf9KpVvKHz\\\":0.02}\" 6 \"testing\"\n</code></pre> <p>Send two amounts to two different addresses, subtract fee from amount:</p> <pre><code>&gt; metrix-cli sendmanywithdupes \"\" \"{\\\"QD1ZrZNe3JUo7ZycKEYQQiQAWd9y54F4XX\\\":0.01,\\\"Q353tsE8YMTA4EuV7dgUXGjNFf9KpVvKHz\\\":0.02}\" 1 \"\" \"[\\\"QD1ZrZNe3JUo7ZycKEYQQiQAWd9y54F4XX\\\",\\\"Q353tsE8YMTA4EuV7dgUXGjNFf9KpVvKHz\\\"]\"\n</code></pre> <p>As a json rpc call</p> <pre><code>&gt; curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"sendmanywithdupes\", \"params\": [\"\", \"{\\\"QD1ZrZNe3JUo7ZycKEYQQiQAWd9y54F4XX\\\":0.01,\\\"Q353tsE8YMTA4EuV7dgUXGjNFf9KpVvKHz\\\":0.02}\", 6, \"testing\"] }' -H 'content-type: text/plain;' http://127.0.0.1:33831/\n</code></pre>"},{"location":"core/commands/#sendtoaddress","title":"sendtoaddress","text":"<p>Send an amount to a given address.</p> <p>Requires wallet passphrase to be set with walletpassphrase call.</p> <p>Arguments:</p> <pre><code>  1. \"address\"            (string, required) The metrix address to send to.\n2. \"amount\"               (numeric or string, required) The amount in MRX to send. eg 0.1\n3. \"comment\"              (string, optional) A comment used to store what the transaction is for. \n                             This is not part of the transaction, just kept in your wallet.\n4. \"comment_to\"           (string, optional) A comment to store the name of the person or organization \n                             to which you're sending the transaction. This is not part of the \n                             transaction, just kept in your wallet.\n5. subtractfeefromamount  (boolean, optional, default=false) The fee will be deducted from the amount being sent.\n                             The recipient will receive less metrixs than you enter in the amount field.\n6. replaceable            (boolean, optional) Allow this transaction to be replaced by a transaction with higher fees via BIP 125\n7. conf_target            (numeric, optional) Confirmation target (in blocks)\n8. \"estimate_mode\"        (string, optional, default=UNSET) The fee estimate mode, must be one of:\n       \"UNSET\"\n       \"ECONOMICAL\"\n       \"CONSERVATIVE\"\n9. \"senderaddress\"        (string, optional) The quantum address that will be used to send money from.\n10.\"changeToSender\"       (bool, optional, default=false) Return the change to the sender.\n</code></pre> <p>Result:</p> <pre><code>\"txid\" (string) The transaction id.\n</code></pre> <p>Examples:</p> <pre><code>&gt; metrix-cli sendtoaddress \"QM72Sfpbz1BPpXFHz9m3CdqATR44Jvaydd\" 0.1\n\n&gt; metrix-cli sendtoaddress \"QM72Sfpbz1BPpXFHz9m3CdqATR44Jvaydd\" 0.1 \"donation\" \"seans outpost\"\n\n&gt; metrix-cli sendtoaddress \"QM72Sfpbz1BPpXFHz9m3CdqATR44Jvaydd\" 0.1 \"\" \"\" true\n\n&gt; metrix-cli sendtoaddress \"QM72Sfpbz1BPpXFHz9m3CdqATR44Jvaydd\", 0.1, \"donation\", \"seans outpost\", false, null, null, \"\", \"QX1GkJdye9WoUnrE2v6ZQhQ72EUVDtGXQX\", true\n\n&gt; curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"sendtoaddress\", \"params\": [\"QM72Sfpbz1BPpXFHz9m3CdqATR44Jvaydd\", 0.1, \"donation\", \"seans outpost\"] }' -H 'content-type: text/plain;' http://127.0.0.1:33831/\n\n&gt; curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"sendtoaddress\", \"params\": [\"QM72Sfpbz1BPpXFHz9m3CdqATR44Jvaydd\", 0.1, \"donation\", \"seans outpost\", false, null, null, \"\", \"QX1GkJdye9WoUnrE2v6ZQhQ72EUVDtGXQX\", true] }' -H 'content-type: text/plain;' http://127.0.0.1:33831/\n</code></pre>"},{"location":"core/commands/#sendtocontract","title":"sendtocontract","text":"<p>Send funds and data to a contract.</p> <p>Requires wallet passphrase to be set with walletpassphrase call.</p> <p>Arguments:</p> <pre><code>1. \"contractaddress\" (string, required) The contract address that will receive the funds and data.\n2. \"datahex\"         (string, required) data to send.\n3. \"amount\"          (numeric or string, optional) The amount in MRX to send. eg 0.1, default: 0\n4. gasLimit          (numeric or string, optional) gasLimit, default: 250000, max: 40000000\n5. gasPrice          (numeric or string, optional) gasPrice Metrix price per gas unit, default: 0.0000500, min:0.0000500\n6. \"senderaddress\"   (string, optional) The quantum address that will be used as sender.\n7. \"broadcast\"       (bool, optional, default=true) Whether to broadcast the transaction or not.\n8. \"changeToSender\"  (bool, optional, default=true) Return the change to the sender.\n</code></pre> <p>Result:</p> <pre><code>[\n  {\n    \"txid\" :    (string) The transaction id.\n    \"sender\" :  (string) MRX address of the sender.\n    \"hash160\" : (string) ripemd-160 hash of the sender.\n  }\n]\n</code></pre> <p>Examples:</p> <pre><code>&gt; metrix-cli sendtocontract \"c6ca2697719d00446d4ea51f6fac8fd1e9310214\" \"54f6127f\"\n\n&gt; metrix-cli sendtocontract \"c6ca2697719d00446d4ea51f6fac8fd1e9310214\" \"54f6127f\" 12.0015 6000000 0.0000500 \"QM72Sfpbz1BPpXFHz9m3CdqATR44Jvaydd\"\n</code></pre>"},{"location":"core/commands/#sethdseed","title":"sethdseed","text":"<p>Set or generate a new HD wallet seed. Non-HD wallets will not be upgraded to being a HD wallet. Wallets that are already HD will have a new HD seed set so that new keys added to the keypool will be derived from this new seed.</p> <p>Note that you will need to MAKE A NEW BACKUP of your wallet after setting the HD wallet seed.</p> <p>Requires wallet passphrase to be set with walletpassphrase call.</p> <p>Arguments:</p> <pre><code>1. \"newkeypool\" (boolean, optional, default=true) Whether to flush old unused addresses, including change addresses, from the keypool and regenerate it.\nIf true, the next address from getnewaddress and change address from getrawchangeaddress will be from this new seed.\nIf false, addresses (including change addresses if the wallet already had HD Chain Split enabled) from the existing\nkeypool will be used until it has been depleted.\n2. \"seed\" (string, optional) The WIF private key to use as the new HD seed; if not provided a random seed will be used.\nThe seed value can be retrieved using the command. It is the private key marked hdseed=1\n</code></pre> <p>Examples:</p> <pre><code>&gt; metrix-cli sethdseed\n\n&gt; metrix-cli sethdseed false\n\n&gt; metrix-cli sethdseed true \"wifkey\"\n\n&gt; curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"sethdseed\", \"params\": [true, \"wifkey\"] }' -H 'content-type: text/plain;' http://127.0.0.1:33831/\n</code></pre>"},{"location":"core/commands/#settxfee","title":"settxfee","text":"<p>settxfee amount</p> <p>Set the transaction fee per kB for this wallet. Overrides the global -paytxfee command line parameter.</p> <p>Arguments:</p> <pre><code>1. amount (numeric or string, required) The transaction fee in MRX/kB\n</code></pre> <p>Results:</p> <pre><code>true|false (boolean) Returns true if successful\n</code></pre> <p>Examples:</p> <pre><code>&gt; metrix-cli settxfee 0.00001\n\n&gt; curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"settxfee\", \"params\": [0.00001] }' -H 'content-type: text/plain;' http://127.0.0.1:33831/\n</code></pre>"},{"location":"core/commands/#signmessage","title":"signmessage","text":"<p>Sign a message with the private key of an address</p> <p>Arguments:</p> <pre><code>1. \"address\" (string, required) The metrix address to use for the private key.\n\n2. \"message\" (string, required) The message to create a signature of.\n</code></pre> <p>Result:</p> <pre><code>\"signature\" (string) The signature of the message encoded in base 64\n</code></pre> <p>Examples:</p> <p>Unlock the wallet for 30 seconds</p> <pre><code>&gt; metrix-cli walletpassphrase \"mypassphrase\" 30\n</code></pre> <p>Create the signature</p> <pre><code>&gt; metrix-cli signmessage \"QD1ZrZNe3JUo7ZycKEYQQiQAWd9y54F4XX\" \"my message\"\n</code></pre> <p>Verify the signature</p> <pre><code>&gt; metrix-cli verifymessage \"QD1ZrZNe3JUo7ZycKEYQQiQAWd9y54F4XX\" \"signature\" \"my message\"\n</code></pre> <p>As json rpc</p> <pre><code>&gt; curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"signmessage\", \"params\": [\"QD1ZrZNe3JUo7ZycKEYQQiQAWd9y54F4XX\", \"my message\"] }' -H 'content-type: text/plain;' http://127.0.0.1:33831/\n</code></pre>"},{"location":"core/commands/#signrawtransactionwithwallet","title":"signrawtransactionwithwallet","text":"<p>Sign inputs for raw transaction (serialized, hex-encoded). The second optional argument (may be null) is an array of previous transaction outputs that this transaction depends on but may not yet be in the block chain.</p> <p>Arguments:</p> <pre><code>1. \"hexstring\"                      (string, required) The transaction hex string\n2. \"prevtxs\"                        (string, optional) An json array of previous dependent transaction outputs\n     [                              (json array of json objects, or 'null' if none provided)\n       {\n         \"txid\":\"id\",               (string, required) The transaction id\n         \"vout\":n,                  (numeric, required) The output number\n         \"scriptPubKey\": \"hex\",     (string, required) script key\n         \"redeemScript\": \"hex\",     (string, required for P2SH or P2WSH) redeem script\n         \"amount\": value            (numeric, required) The amount spent\n       }\n       ,...\n    ]\n3. \"sighashtype\"                    (string, optional, default=ALL) The signature hash type. Must be one of\n       \"ALL\"\n       \"NONE\"\n       \"SINGLE\"\n       \"ALL|ANYONECANPAY\"\n       \"NONE|ANYONECANPAY\"\n       \"SINGLE|ANYONECANPAY\"\n</code></pre> <p>Result:</p> <pre><code>{\n  \"hex\" : \"value\",                  (string) The hex-encoded raw transaction with signature(s)\n  \"complete\" : true|false,          (boolean) If the transaction has a complete set of signatures\n  \"errors\" : [                      (json array of objects) Script verification errors (if there are any)\n    {\n      \"txid\" : \"hash\",              (string) The hash of the referenced, previous transaction\n      \"vout\" : n,                   (numeric) The index of the output to spent and used as input\n      \"scriptSig\" : \"hex\",          (string) The hex-encoded signature script\n      \"sequence\" : n,               (numeric) Script sequence number\n      \"error\" : \"text\"              (string) Verification or signing error related to the input\n    }\n    ,...\n  ]\n}\n</code></pre> <p>Examples:</p> <pre><code>&gt; metrix-cli signrawtransactionwithwallet \"myhex\"\n\n&gt; curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"signrawtransactionwithwallet\", \"params\": [\"myhex\"] }' -H 'content-type: text/plain;' http://127.0.0.1:33831/\n</code></pre>"},{"location":"core/commands/#unloadwallet","title":"unloadwallet","text":"<p>Unloads the wallet referenced by the request endpoint otherwise unloads the wallet specified in the argument. Specifying the wallet name on a wallet endpoint is invalid.</p> <p>Arguments:</p> <pre><code>1. \"wallet_name\" (string, optional) The name of the wallet to unload.\n</code></pre> <p>Examples:</p> <pre><code>&gt; metrix-cli unloadwallet wallet_name\n\n&gt; curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"unloadwallet\", \"params\": [wallet_name] }' -H 'content-type: text/plain;' http://127.0.0.1:33831/\n</code></pre>"},{"location":"core/commands/#walletcreatefundedpsbt","title":"walletcreatefundedpsbt","text":"<p>Creates and funds a transaction in the Partially Signed Transaction format. Inputs will be added if supplied inputs are not enough Implements the Creator and Updater roles.</p> <p>Arguments:</p> <pre><code>1. \"inputs\"                (array, required) A json array of json objects\n     [\n       {\n         \"txid\":\"id\",      (string, required) The transaction id\n         \"vout\":n,         (numeric, required) The output number\n         \"sequence\":n      (numeric, optional) The sequence number\n       } \n       ,...\n     ]\n2. \"outputs\"               (array, required) a json array with outputs (key-value pairs), where none of the keys are duplicated.\nThat is, each address can only appear once and there can only be one 'data' object.\n   [\n    {\n      \"address\": x.xxx,    (obj, optional) A key-value pair. The key (string) is the metrix address, the value (float or string) is the amount in MRX\n    },\n    {\n      \"data\": \"hex\"        (obj, optional) A key-value pair. The key must be \"data\", the value is hex encoded data\n    }\n    ,...                     More key-value pairs of the above form. For compatibility reasons, a dictionary, which holds the key-value pairs directly, is also\n                             accepted as second parameter.\n   ]\n3. locktime                  (numeric, optional, default=0) Raw locktime. Non-0 value also locktime-activates inputs\n                             Allows this transaction to be replaced by a transaction with higher fees. If provided, it is an error if explicit sequence numbers are incompatible.\n4. options                 (object, optional)\n   {\n     \"changeAddress\"          (string, optional, default pool address) The metrix address to receive the change\n     \"changePosition\"         (numeric, optional, default random) The index of the change output\n     \"change_type\"            (string, optional) The output type to use. Only valid if changeAddress is not specified. Options are \"legacy\", \"p2sh-segwit\", and \"bech32\". Default is set by -changetype.\n     \"includeWatching\"        (boolean, optional, default false) Also select inputs which are watch only\n     \"lockUnspents\"           (boolean, optional, default false) Lock selected unspent outputs\n     \"feeRate\"                (numeric, optional, default not set: makes wallet determine the fee) Set a specific fee rate in MRX/kB\n     \"subtractFeeFromOutputs\" (array, optional) A json array of integers.\n                              The fee will be equally deducted from the amount of each specified output.\n                              The outputs are specified by their zero-based index, before any change output is added.\n                              Those recipients will receive less metrixs than you enter in their corresponding amount field.\n                              If no outputs are specified here, the sender pays the fee.\n                                  [vout_index,...]\n     \"replaceable\"            (boolean, optional) Marks this transaction as BIP125 replaceable.\n                              Allows this transaction to be replaced by a transaction with higher fees\n     \"conf_target\"            (numeric, optional) Confirmation target (in blocks)\n     \"estimate_mode\"          (string, optional, default=UNSET) The fee estimate mode, must be one of:\n         \"UNSET\"\n         \"ECONOMICAL\"\n         \"CONSERVATIVE\"\n   }\n5. bip32derivs                    (boolean, optional, default=false) If true, includes the BIP 32 derivation paths for public keys if we know them\n</code></pre> <p>Result:</p> <pre><code>{\n  \"psbt\": \"value\",         (string)  The resulting raw transaction (base64-encoded string)\n  \"fee\":        n,         (numeric) Fee in MRX the resulting transaction pays\n  \"changepos\":  n,         (numeric) The position of the added change output, or -1\n}\n</code></pre> <p>Examples:</p> <p>Create a transaction with no inputs</p> <pre><code>&gt; metrix-cli walletcreatefundedpsbt \"[{\\\"txid\\\":\\\"myid\\\",\\\"vout\\\":0}]\" \"[{\\\"data\\\":\\\"00010203\\\"}]\"\n</code></pre>"},{"location":"core/commands/#walletlock","title":"walletlock","text":"<p>Removes the wallet encryption key from memory, locking the wallet.</p> <p>After calling this method, you will need to call walletpassphrase again</p> <p>before being able to call any methods which require the wallet to be unlocked.</p> <p>Examples:</p> <p>Set the passphrase for 2 minutes to perform a transaction</p> <pre><code>&gt; metrix-cli walletpassphrase \"my pass phrase\" 120\n</code></pre> <p>Perform a send (requires passphrase set)</p> <pre><code>&gt; metrix-cli sendtoaddress \"QM72Sfpbz1BPpXFHz9m3CdqATR44Jvaydd\" 1.0\n</code></pre> <p>Clear the passphrase since we are done before 2 minutes is up</p> <pre><code>&gt; metrix-cli walletlock\n</code></pre> <p>As json rpc call</p> <pre><code>&gt; curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"walletlock\", \"params\": [] }' -H 'content-type: text/plain;' http://127.0.0.1:33831/\n</code></pre>"},{"location":"core/commands/#walletpassphrase","title":"walletpassphrase","text":"<p>Stores the wallet decryption key in memory for 'timeout' seconds.</p> <p>This is needed prior to performing transactions related to private keys such as sending MRX and staking</p> <p>Arguments:</p> <pre><code>1. \"passphrase\" (string, required) The wallet passphrase\n\n2. timeout      (numeric, required) The time to keep the decryption key in seconds; capped at 100000000 (~3 years).\n\n3. staking only (bool, optional, omitted=false, enabled=true) Unlock wallet for staking only.\n\nNote:\n\nIssuing the walletpassphrase command while the wallet is already unlocked will set a new unlock\n\ntime that overrides the old one.\n</code></pre> <p>Examples:</p> <p>Unlock the wallet for 60 seconds</p> <pre><code>&gt; metrix-cli walletpassphrase \"my pass phrase\" 60\n</code></pre> <p>Lock the wallet again (before 60 seconds)</p> <pre><code>&gt; metrix-cli walletlock\n</code></pre> <p>Unlock the wallet for staking only, for a long time</p> <pre><code>&gt; metrix-cli walletpassphrase \"my pass phrase\" 99999999 true\n</code></pre> <p>As json rpc call</p> <pre><code>&gt; curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"walletpassphrase\", \"params\": [\"my pass phrase\", 60] }' -H 'content-type: text/plain;' http://127.0.0.1:33831/\n</code></pre>"},{"location":"core/commands/#walletpassphrasechange","title":"walletpassphrasechange","text":"<p>Changes the wallet passphrase from 'oldpassphrase' to 'newpassphrase'.</p> <p>Arguments:</p> <pre><code>1. \"oldpassphrase\"      (string) The current passphrase\n2. \"newpassphrase\"      (string) The new passphrase\n</code></pre> <p>Examples:</p> <pre><code>&gt; metrix-cli walletpassphrasechange \"old one\" \"new one\"\n\n&gt; curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"walletpassphrasechange\", \"params\": [\"old one\", \"new one\"] }' -H 'content-type: text/plain;' http://127.0.0.1:33831/\n</code></pre>"},{"location":"core/commands/#walletprocesspsbt","title":"walletprocesspsbt","text":"<p>Update a PSBT with input information from our wallet and then sign inputs</p> <p>that we can sign for.</p> <p>Arguments:</p> <pre><code>1. \"psbt\"                         (string, required) The transaction base64 string\n2. sign                           (boolean, optional, default=true) Also sign the transaction when updating\n3. \"sighashtype\"                  (string, optional, default=ALL) The signature hash type to sign with if not specified by the PSBT. Must be one of\n       \"ALL\"\n       \"NONE\"\n       \"SINGLE\"\n       \"ALL|ANYONECANPAY\"\n       \"NONE|ANYONECANPAY\"\n       \"SINGLE|ANYONECANPAY\"\n4. bip32derivs                    (boolean, optional, default=false) If true, includes the BIP 32 derivation paths for public keys if we know them\n</code></pre> <p>Result:</p> <pre><code>{\n  \"psbt\" : \"value\",          (string) The base64-encoded partially signed transaction\n  \"complete\" : true|false,   (boolean) If the transaction has a complete set of signatures\n  ]\n}\n</code></pre> <p>Examples:</p> <pre><code>&gt; metrix-cli walletprocesspsbt \"psbt\"\n</code></pre>"},{"location":"core/commands/#zmq","title":"zmq","text":""},{"location":"core/commands/#getzmqnotifications","title":"getzmqnotifications","text":"<p>Returns information about the active ZeroMQ notifications.</p> <p>Result:</p> <pre><code>[\n  { \n    \"type\": \"pubhashtx\", (string) Type of notification\n    \"address\": \"...\"     (string) Address of the publisher\n  },\n  ...\n]\n</code></pre> <p>Examples:</p> <pre><code>&gt; metrix-cli getzmqnotifications\n\n&gt; curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"getzmqnotifications\", \"params\": [] }' -H 'content-type: text/plain;' http://127.0.0.1:33831/\n</code></pre>"},{"location":"core/exchange-usage-guide/","title":"Metrix Exchange Usage Guide and Info","text":""},{"location":"core/exchange-usage-guide/#setup","title":"Setup","text":"<p>You can download a pre-built version of Metrix from our Github Release page:</p> <p>Releases</p> <p>Simply extract the .tar.gz linux-64bit archive. In the \"bin\" directory will be the two programs of interest, metrixd and metrix-cli</p> <p>If you choose to compile it yourself instead, follow these steps on Ubuntu:</p> <p>Install packages if needed:</p> <pre><code>sudo apt-get install build-essential libtool autotools-dev automake pkg-config libssl-dev libevent-dev bsdmainutils git cmake libboost-all-dev libgmp3-dev\nsudo apt-get install software-properties-common\nsudo add-apt-repository ppa:bitcoin/bitcoin\nsudo apt-get update\nsudo apt-get install libdb4.8-dev libdb4.8++-dev\n\ngit clone https://github.com/TheLindaProjectInc/metrix --recursive\ncd metrix\n\n# Note autogen will prompt to install some more dependencies if needed\n./autogen.sh\n./configure \nmake -j2\n</code></pre> <p>Afterwards, in the \"src\" directory, there will be two programs of interest, <code>metrixd</code> and <code>metrix-cli</code>.</p>"},{"location":"core/exchange-usage-guide/#startup","title":"Startup","text":"<p>In order to startup metrixd, use the following:</p> <pre><code>./metrixd -daemon -staking=0\n</code></pre> <p>Additional options can be specified in ~/.metrixcoin/metrix.conf, you can add staking=0 in the metrix.conf file</p> <p>Afterwards, you can check the status of the Metrix node:</p> <pre><code>./metrix-cli getblockchaininfo\n</code></pre> <p>It will show a block count. when the block count matches the latest block on our block explorer: https://explorer.metrixcoin.com that means that the node is synchronized. If it shows 0 blocks and 0 connections for more than a few minutes, contact Metrix staff for help. Syncing the blockchain will take around 10-30 minutes depending on connection speed</p> <p>In order to shut down the node, simply use:</p> <pre><code>./metrix-cli stop\n</code></pre> <p>Info</p> <p>NOTE: <code>-staking=0</code> disables automatic staking in the wallet. This is HIGHLY RECOMMENDED for exchanges. Staking can make an unpredictable amount of coins unaccessible for 960 blocks (~24 hours) and so it is recommended that exchanges do not participate in staking.</p>"},{"location":"core/exchange-usage-guide/#backup","title":"Backup","text":"<p>Wallet Backup Make sure to always back up your wallet! The location of the wallet file on Linux is ~/.metrixcoin/wallet.dat. Make sure to shut down the node before making a backup to avoid data corruption.</p> <p>The wallet can also be encrypted on-disk:</p> <pre><code>./metrix-cli encryptwallet \"your strong password\"\n</code></pre> <p>The Metrix node will automatically stop itself in order to encrypt the wallet. You will need to execute <code>./metrixd -daemon -staking=false</code> again afterwards to start the node again</p> <p>Warning</p> <p>IMPORTANT: after encrypting the wallet YOU MUST make a new backup of the wallet.dat file. Failing to do so can result in LOSS OF COINS. If the password to the encrypted wallet is lost, there is NO WAY TO RECOVER THE COINS. Make sure to take backups of both wallet.dat, as well as the password used for encryption!</p> <p>In order to unlock the wallet:</p> <pre><code>./metrix-cli walletpassphrase \"your strong password\" XXX\n</code></pre> <p>XXX is how many seconds to keep the wallet unlocked for. So, specifying that as \"1000\" would mean keep the wallet unlocked for 1000 seconds.</p> <p>For an exchange it is probably best to not use wallet encryption on the hot wallet. In the above example, after 1000 seconds have passed, it is necessary to unlock the wallet again. This may cause some problems depending on your exact exchange systems</p> <p>Info</p> <p>Unlocking the wallet is only required to send coins. If you only need to receive coins and track transactions, this can be done with an encrypted and locked wallet</p>"},{"location":"core/exchange-usage-guide/#receiving-coins","title":"Receiving coins","text":"<p>In order to generate a new address:</p> <pre><code>./metrix-cli getnewaddress \"\"\n</code></pre> <p>This will generate a unique address every time it is executed. Note Metrix addresses start with M for standard pubkeyhash addresses, and start with b for multi-sig addresses</p> <p>To validate an address is valid:</p> <pre><code>./metrix-cli validateaddress \"address here\"\n</code></pre> <p>In order to see the coins received by a particular address (note the address must be owned by this wallet. This does not allow checking addresses not owned by this wallet):</p> <pre><code>./metrix-cli getreceivedbyaddress \"address here\" MINCONF\n</code></pre> <p>In this case, MINCONF is how many confirmations the transaction must have had on the blockchain before it will be included in this number.</p> <p>Minimum confirmations recommended by Metrix:</p> <p>20 confirmations for very large amounts. 10 confirmations for small and medium amounts. To get all transactions (including unconfirmed!) currently tracked by the wallet use this function:</p> <pre><code>./metrix-cli listtransactions \"*\" COUNT SKIP\n</code></pre> <p>COUNT and SKIP can be used for paging through transactions. Using a very large count value may cause the node to perform the request slowly, and so it is recommended to never use a COUNT that is more than 100. SKIP is used to skip the first number of results. It is not recommended to rely only on this for the accounting of an exchange. It is possible that while you are iterating to discover the full transaction list, that someone sends a transaction to the wallet that will be missed. Also, this method includes UNCONFIRMED transactions and must be used with caution.</p> <p>Warning</p> <p>Bitcoind, qtumd and thus metrixd has some account functionality so that different addresses can use different accounts. DO NOT RELY ON THIS. This feature is deprecated and has many security problems, and will be removed in a future release.</p>"},{"location":"core/exchange-usage-guide/#sending-coins","title":"Sending Coins","text":"<p>It is not easily possible to dictate what address coins should be sent from. If your exchange system relies on this, you should make a workaround in your system so that this is not necessary.</p> <p>In order to send coins:</p> <pre><code>./metrix-cli sendtoaddress \"address to send to\" AMOUNT \"comment about tx\" \"comment about address\" SUBTRACTFEE\n</code></pre> <p>The \"comment\" arguments can be left blank if unneeded. These comments are saved within your wallet file and are used by some exchanges to track internal withdraw and user IDs.</p> <p>The SUBTRACTFEE option can be either \"true\" or \"false\". When this option is true, it subtracts the fee from the amount sent. So, if you do</p> <pre><code>./metrix-cli sendtoaddress \"address\" 20 \"\" \"\" true\n</code></pre> <p>And the network fee is 10.1 MRX, then the actual amount that the user will receive will be 9.9 MRX. If SUBTRACTFEE is instead set to false, then they will receive 10, but your wallet will have paid 10.1 MRX for the network fee.</p> <p>Info</p> <p>Exchange users should not be capable of sending coins directly to a smart contract address (one starting with 0x). These addresses will be rejected by sendtoaddress and proper usage requires significantly more caution to properly use.</p>"},{"location":"core/exchange-usage-guide/#parameters","title":"Parameters","text":"<p>Recommended tx fee: 1000000000sat or 10 MRX per kilobyte of tx data (2kb is reasonable transaction size expectation, but it can sometimes be more)</p> <p>Recommended confirmations: 20 for large TX's, 10 for everything else</p> <p>Recommended minimum withdraw amount: 100 MRX</p> <p>P2P Network Port: 33830 (port forwarding is not required or recommended, but the wallet must be able to access other external nodes through this port to download the blockchain)</p>"},{"location":"core/install/","title":"Install","text":""},{"location":"core/install/#setup","title":"Setup","text":"<p>You can download a pre-built version of Metrix from our Github Release page:</p> <p>Releases</p> <p>Simply extract the .tar.gz linux-64bit archive. In the \"bin\" directory will be the two programs of interest, <code>metrixd</code> and <code>metrix-cli</code></p> <p>If you choose to compile it yourself instead, follow these steps on Ubuntu:</p> <p>Install packages if needed:</p> <pre><code>sudo apt-get install build-essential libtool autotools-dev automake pkg-config libssl-dev libevent-dev bsdmainutils git cmake libboost-all-dev libgmp3-dev\nsudo apt-get install software-properties-common\nsudo add-apt-repository ppa:bitcoin/bitcoin\nsudo apt-get update\nsudo apt-get install libdb4.8-dev libdb4.8++-dev\n\ngit clone https://github.com/TheLindaProjectInc/metrix --recursive\ncd metrix\n\n# Note autogen will prompt to install some more dependencies if needed\n./autogen.sh\n./configure \nmake -j2\n</code></pre> <p>Afterwards, in the \"src\" directory, there will be two programs of interest, <code>metrixd</code> and <code>metrix-cli</code>.</p> <p>Build instruction for other OS variations can be found in the main Github</p>"},{"location":"core/starting/","title":"Starting","text":""},{"location":"core/starting/#startup-first-launch","title":"Startup &amp; First Launch","text":"<p>In order to startup metrixd, use the following:</p> <pre><code>./metrixd -daemon\n</code></pre> <p>Additional options can be specified in ~/.metrixcoin/metrix.conf, you can add <code>-staking=false</code> to the commandline or <code>-staking=0</code> in the metrix.conf file to disable staking. This may be required if you plan on using this wallet as a service.</p> <p>Afterwards, you can check the status of the Metrix node:</p> <pre><code>./metrix-cli getblockchaininfo\n</code></pre> <p>It will show a block count. when the block count matches the latest block on our block explorer: https://explorer.metrixcoin.com that means that the node is synchronized. If it shows 0 blocks and 0 connections for more than a few minutes, contact Metrix staff for help. Syncing the blockchain will take around 10-30 minutes depending on connection speed</p> <p>In order to shut down the node, simply use:</p> <pre><code>./metrix-cli stop\n</code></pre> <p>Warning</p> <p>NOTE: <code>-staking=false</code> disables automatic staking in the wallet. This is HIGHLY RECOMMENDED for exchanges or wallet services that rely on availability of the coins. Staking can make an unpredictable amount of coins unaccessible for 960 blocks (~24 hours) and so it is recommended that exchanges and wallets that provide a service do not participate in staking.</p>"},{"location":"dgp2/about/","title":"Metrixcoin DGP Protocol","text":"<p>Metrix Decentralized Governance Protocol (DGP) allows specific blockchain settings to be modified by making use of smart contracts when a voting proposal has been passed. There is a minimum of 100 governors that must be active for any vote to work. This is to minimize the chance of one person having 51% of governors at any time. There is a cap of 1920 governors. </p> <p>Each governor is required to stay active by voting or pinging the network at least once a month. Voting only succeeds when 51% of governors have passed a proposal. There is a stricter voting requirement for budget proposals which require 10% greater yes than no votes to pass. Governors will earn the same staking rate for contributing.</p>"},{"location":"dgp2/commands/","title":"Metrix DGP Command Glossary","text":"<p>This glossary of commands describes common DGP calls using the debug or CLI consoles.</p>"},{"location":"dgp2/commands/#getdgpinfo","title":"getdgpinfo","text":"<p>This command will output the current DGP info at the currently syncronised block height.</p>"},{"location":"dgp2/commands/#command","title":"Command","text":"<pre><code>getdgpinfo\n</code></pre>"},{"location":"dgp2/commands/#output","title":"Output","text":"<pre><code>{\n  \"maxblocksize\": 2000000,\n  \"mingasprice\": 5000,\n  \"blockgaslimit\": 40000000,\n  \"minrelaytxfee\": 1000000000,\n  \"incrementalrelayfee\": 1000000000,\n  \"dustrelayfee\": 3000000000,\n  \"governancecollateral\": 750000000000000,\n  \"budgetfee\": 60000000000000,\n  \"contracts\": {\n    \"version\": 2,\n    \"dgp\": \"a523bfd08ca0365ca0f93de522c8d53590447a52\",\n    \"governance\": \"13a5933a1b786e8016178656145e36eccd0221f6\",\n    \"budget\": \"28238c7d116aa2ca3739c4c93038fd5a06a77303\"\n  }\n}\n</code></pre>"},{"location":"dgp2/v2migration/","title":"DGPv2 Migration","text":""},{"location":"dgp2/v2migration/#about-the-dgpv2-migration","title":"About the DGPv2 migration","text":"<p>The DGPv2 migration is the mandatory process which all DGPv1 governors must perform to retrieve their collateral and enroll in the DGPv2 contracts. The reason for this migration is to fix bugs found within the DGPv1 contracts. Unfortunately  these bugs were discovered on the MainNet, causing a subsidy distribution error before the bug could be temporarily patched in Metrix Core v4.0.9.1.</p> <p>Metrix Core v4.1.0.0 introduces MIP3, which will activate once miners have signaled they have updated to the new version, approving the upgrade to DGPv2. Once MIP3 is active this will signal to the network that DGPv2 should be used instead of DGPv1. DGPv1 will no longer be used to process block rewards or provide blockchain parameters of the network, however can still process contract calls, like to unenroll. </p> <p>DGPv2 on top of solving bugs in the DGP contracts, allows for greater functionality in terms of what types accounts can participate as governors. Smart contracts can now participate as governors, which allows for potential uses like delegated governors and more. This functionality was not a possibility in the DGPv1 contracts.</p>"},{"location":"dgp2/v2migration/#issues-solved-in-dgpv2","title":"Issues solved in DGPv2","text":"<ul> <li>Use new Solidity compiler allowing to benefit from bugfixes and optimizations</li> <li>Allow both externally owned accounts and smart contracts to enroll as governors</li> <li>Convert <code>transfer</code> methods to <code>call</code> to allow gas forwarding</li> <li>Fallback for failed governor subsidy reward (burn)</li> <li>Fallback for failed governor collateral return (sent to Budget contract where governors can handle the failure via proposal)</li> <li>Fallback for failed budget settlement (burn)</li> <li>Min and Max values for chain parameters and fallbacks for when they are out of bounds</li> <li>Check if lastreward &gt; 0 also when checking governor winner</li> </ul>"},{"location":"dgp2/v2migration/#migrating-to-dgpv2-via-cli-or-debug-console","title":"Migrating to DGPv2 via CLI or Debug Console","text":"<p>Migrating from DGPv1 to DGPv2 requires 2 steps: - Unenroll from DGPv1 - Enroll in DGPv2</p> <p>This can be done using the <code>sendtocontract</code> method using metrix-cli or from the debug console in the Altitude or QT MetrixCoin wallets</p>"},{"location":"dgp2/v2migration/#unenroll-from-dgpv1","title":"Unenroll from DGPv1","text":"<p>First we will call <code>unenroll(bool)</code> on the DGPv1 contract using false as the parameter, by abi encoding the data we will get <code>fba713970000000000000000000000000000000000000000000000000000000000000000</code>. </p> <p>This transaction doesn't need to send any MRX so we use 0 for the value.</p> <p>We should be able to use the minimum gas limit 250000 and gas price 0.00005. </p> <p>The governor needs to sign the transaction, so replace <code>&lt;GOVERNOR ADDRESS&gt;</code> with our governor's address. </p> <p>We will use true for both broadcast and return change to sender.</p> <pre><code>sendtocontract \"0000000000000000000000000000000000000089\" \"fba713970000000000000000000000000000000000000000000000000000000000000000\" 0 250000 0.00005 &lt;GOVERNOR ADDRESS&gt; true true\n</code></pre>"},{"location":"dgp2/v2migration/#enroll-in-dgpv2","title":"Enroll in DGPv2","text":"<p>Next we will call <code>enroll()</code> on the DGPv2 contract which takes no parameters, by abi encoding the data we will get <code>e65f2a7e</code>.</p> <p>This transaction needs to send a value of 7500000 MRX as collateral.</p> <p>We should be able to use the minimum gas limit 250000 and gas price 0.00005.</p> <p>The governor needs to sign the transaction, so replace <code>&lt;GOVERNOR ADDRESS&gt;</code> with our governor's address. </p> <p>We will use true for both broadcast and return change to sender.</p> <pre><code>sendtocontract \"13a5933a1b786e8016178656145e36eccd0221f6\" \"e65f2a7e\" 7500000 250000 0.00005 &lt;GOVERNOR ADDRESS&gt; true true\n</code></pre>"},{"location":"dgp2/v2migration/#faq","title":"FAQ","text":""},{"location":"dgp2/v2migration/#why-is-the-migration-manual","title":"Why is the migration manual?","text":"<p>Due to the nature of the bug found in the DGPv1 contracts, DGPv1 governors can never be unenrolled automatically. DGPv1 governors can be unenrolled at any time by calling the contracts.</p>"},{"location":"dgp2/v2migration/#will-i-need-to-wait-for-my-governor-to-mature-again","title":"Will I need to wait for my governor to mature again?","text":"<p>Yes! Enrolling in the DGPv2 contracts will require all new governors to wait for 1920 blocks (~48 hours) to receive governor rewards and 26880 blocks (~28 days) to be eligible to vote on budget proposals or DGP blockchain parameter proposals.</p>"},{"location":"dgp2/v2migration/#what-happens-to-any-dgpv1-proposals","title":"What happens to any DGPv1 proposals?","text":"<p>Any DGPv1 proposals that have not passed or been completed will need to be re-created in the DGPv2 contracts. </p>"},{"location":"dgp2/v3migration/","title":"DGPv3 Migration","text":""},{"location":"dgp2/v3migration/#about-the-dgpv3-migration","title":"About the DGPv3 migration","text":"<p>The DGPv3 migration is the mandatory process which all DGPv1 or v2 governors must perform to retrieve their collateral and enroll in the DGPv3 contracts. The reason for this migration is to fix bugs found within the DGPv1 &amp; DGPv2 contracts. Unfortunately this bug was discovered on the MainNet, causing EVM transactions to be delayed significantly and the mempool to fill up.</p> <p>Metrix Core v4.2.0.0 introduces MIP5, which will activate once miners have signaled they have updated to the new version, approving the upgrade to DGPv3. Once MIP5 is active this will signal to the network that DGPv3 should be used instead of DGPv2. DGPv2 will no longer be used to process block rewards or provide blockchain parameters of the network, however can still process contract calls, like to unenroll. </p>"},{"location":"dgp2/v3migration/#migrating-to-dgpv3","title":"Migrating to DGPv3","text":"<p>Migrating from DGPv2 to DGPv3 requires 2 steps: - Unenroll from DGPv2 - Enroll in DGPv3</p>"},{"location":"dgp2/v3migration/#msw","title":"MSW","text":""},{"location":"dgp2/v3migration/#unenroll-from-v2","title":"Unenroll from v2","text":"<p>Use the v2 unenrollment button present in the application. This will only show up if your blockchain is in sync and you have a governer registered on the old contract.</p>"},{"location":"dgp2/v3migration/#enroll-in-v3","title":"Enroll in v3","text":"<p>This can only be done once MIP5 is active and the activation block has passed. Attempting to enroll earier via the GUI will result in re-enrolling into DGPv2. For this reason the enrollment button will be disabled until DGPv3 is active on the network.</p>"},{"location":"dgp2/v3migration/#altitude","title":"Altitude","text":""},{"location":"dgp2/v3migration/#unenroll-from-v2_1","title":"Unenroll from v2","text":"<p>Use the v2 unenrollment button present in the application. This will only show up if your blockchain is in sync and you have a governer registered on the old contract.</p>"},{"location":"dgp2/v3migration/#enroll-in-v3_1","title":"Enroll in v3","text":"<p>This can only be done once MIP5 is active and the activation block has passed. Attempting to enroll earier via the GUI will result in re-enrolling into DGPv2. For this reason the enrollment button will be disabled until DGPv3 is active on the network.</p>"},{"location":"dgp2/v3migration/#migrating-to-dgpv3-via-cli-or-debug-console","title":"Migrating to DGPv3 via CLI or Debug Console","text":"<p>Migrating from DGPv2 to DGPv3 requires 2 steps: - Unenroll from DGPv2 - Enroll in DGPv3</p> <p>This can be done using the <code>sendtocontract</code> method using metrix-cli or from the debug console in the Altitude or QT MetrixCoin wallets</p>"},{"location":"dgp2/v3migration/#unenroll-from-dgpv2","title":"Unenroll from DGPv2","text":"<p>First we will call <code>unenroll(bool)</code> on the DGPv1 contract using false as the parameter, by abi encoding the data we will get <code>fba713970000000000000000000000000000000000000000000000000000000000000000</code>. </p> <p>This transaction doesn't need to send any MRX so we use 0 for the value.</p> <p>We should be able to use the minimum gas limit 250000 and gas price 0.00005. </p> <p>The governor needs to sign the transaction, so replace <code>&lt;GOVERNOR ADDRESS&gt;</code> with our governor's address. </p> <p>We will use true for both broadcast and return change to sender.</p> <pre><code>sendtocontract \"13a5933a1b786e8016178656145e36eccd0221f6\" \"fba713970000000000000000000000000000000000000000000000000000000000000000\" 0 250000 0.00005 &lt;GOVERNOR ADDRESS&gt; true true\n</code></pre>"},{"location":"dgp2/v3migration/#enroll-in-dgpv3","title":"Enroll in DGPv3","text":"<p>Next we will call <code>enroll()</code> on the DGPv2 contract which takes no parameters, by abi encoding the data we will get <code>e65f2a7e</code>.</p> <p>This transaction needs to send a value of 7500000 MRX as collateral.</p> <p>We should be able to use the minimum gas limit 250000 and gas price 0.00005.</p> <p>The governor needs to sign the transaction, so replace <code>&lt;GOVERNOR ADDRESS&gt;</code> with our governor's address. </p> <p>We will use true for both broadcast and return change to sender.</p> <pre><code>sendtocontract \"73e6c0383dceed1583eb6a4b2aa9253020cb2b18\" \"e65f2a7e\" 7500000 250000 0.00005 &lt;GOVERNOR ADDRESS&gt; true true\n</code></pre>"},{"location":"dgp2/v3migration/#faq","title":"FAQ","text":""},{"location":"dgp2/v3migration/#will-i-need-to-wait-for-my-governor-to-mature-again","title":"Will I need to wait for my governor to mature again?","text":"<p>Yes! Enrolling in the DGPv3 contracts will require all new governors to wait for 1920 blocks (~48 hours) to receive governor rewards and 26880 blocks (~28 days) to be eligible to vote on budget proposals or DGP blockchain parameter proposals.</p>"},{"location":"dgp2/v3migration/#what-happens-to-any-dgpv2-proposals","title":"What happens to any DGPv2 proposals?","text":"<p>Any DGPv1 proposals that have not passed or been completed will need to be re-created in the DGPv3 contracts. </p>"},{"location":"docker/about/","title":"What is Docker?","text":""},{"location":"docker/about/#about","title":"About","text":"<ul> <li>In short: Docker is basically a container engine which uses the Linux Kernel features like namespaces and control groups to create containers on top of an operating system and automates application deployment on the container. Docker uses Copy-on-write union file system for its backend storage</li> </ul> <ul> <li>In depth: Docker is a tool designed to make it easier to create, deploy, and run applications by using containers. Containers allow a developer to package up an application with all of the parts it needs, such as libraries and other dependencies, and deploy it as one package. By doing so, thanks to the container, the developer can rest assured that the application will run on any other Linux machine regardless of any customized settings that machine might have that could differ from the machine used for writing and testing the code.</li> </ul> <ul> <li>To make it simple: In a way, Docker is a bit like a virtual machine. But unlike a virtual machine, rather than creating a whole virtual operating system, Docker allows applications to use the same Linux kernel as the system that they're running on and only requires applications be shipped with things not already running on the host computer. This gives a significant performance boost and reduces the size of the application.</li> </ul> <p>Info</p> <p>License: Docker is open source. This means that anyone can contribute to Docker and extend it to meet their own needs if they need additional features that aren't available out of the box.</p>"},{"location":"docker/about/#docker-and-metrix","title":"Docker and metrix","text":"<ul> <li> <p>Stability: Docker engine is usually driven on the top of server or NAS device. Most used metrix docker server is unRAID.  Server is by nature more reliable and stable than usual personal computer.</p> </li> <li> <p>24/7 usage: As server is already 24/7 in use, you don't need to let your personal computer to do the same only to run Metrix masternode or to stake coins.  Your electric usage is not affected by running Metrix masternode/stake this way.</p> </li> <li> <p>Updates: You don't need to think about Metrix wallet updates, as this is done in background. Only thing you need to do is to update Metrix docker (usually by one click).  And if you use unRAID server, even Metrix docker update is done automaticaly.</p> </li> </ul>"},{"location":"docker/about/#installation","title":"Installation","text":""},{"location":"docker/about/#synology-nas","title":"Synology NAS","text":"<p>Getting ready for docker world: Synology NAS is one of devices that support docker hosting.</p> <p>Synology has limited Docker availability in the package manager to only some select models:</p> <ul> <li>18 series:DS3018xs, DS918+, DS718+, DS218+</li> <li>17 series:FS3017, FS2017, RS18017xs+, RS4017xs+, RS3617xs+, RS3617xs, RS3617RPxs, DS3617xs, DS1817+, DS1517+</li> <li>16 series:RS18016xs+, RS2416+, RS2416RP+, DS916+, DS716+II, DS716+, DS216+II, DS216+</li> <li>15 series:RS815+, RS815RP+, RC18015xs+, DS3615xs, DS2415+, DS1815+, DS1515+, DS415+</li> <li>14 series:RS3614xs+, RS3614xs, RS3614RPxs, RS2414+, RS2414RP+, RS814+, RS814RP+</li> <li>13 series:RS10613xs+, RS3413xs+, DS2413+, DS1813+, DS1513+, DS713+</li> <li>12 series:RS3412xs, RS3412RPxs, RS2212+, RS2212RP+, RS812+, RS812RP+, DS3612xs, DS1812+, DS1512+, DS712+, DS412+</li> <li>11 series:RS3411xs, RS3411RPxs, RS2211+, RS2211RP+, DS3611xs, DS2411+, DS1511+, DS411+II, DS411+</li> <li>*10 series:RS810+, RS810RP+, DS1010+, DS710+</li> </ul> <p>Beside NAS, you can install docker images on unRAID server (preferred)</p>"},{"location":"docker/about/#install-steps-unraid","title":"Install steps unRAID","text":"<ul> <li>Docker hub URL:  Docker Hub URL</li> <li>Icon URL: Icon URL</li> <li>WebUI: http://[IP]:[PORT:6080]/vnc.html?resize=remote&amp;host=[IP]&amp;port=[PORT:6080]&amp;autoconnect=1</li> </ul>"},{"location":"docker/about/#make-volumes","title":"Make Volumes","text":"<p>In docker host you need to make following volumes (for block chain and configuration):</p> <p>Metrix --&gt; /home/ubuntu/.metrix  ColX --&gt; /home/ubuntu/.ColossusXT  Send --&gt; /home/ubuntu/.send  Shard --&gt; /home/ubuntu/.shard  Bitcoin --&gt; /home/ubuntu/.bitcoin  Usdex --&gt; /home/ubuntu/usde2  Vulcano--&gt; /home/ubuntu/.vulcanocore  Epic--&gt; /home/ubuntu/.epic  NulleX--&gt; /home/ubuntu/.nullexqt  Maxcoin--&gt; /home/ubuntu/.maxcoin  Rapids--&gt; /home/ubuntu/.rapids MWalletconfig --&gt; /home/ubuntu/.config</p>"},{"location":"links/links/","title":"The Metrix Product Ecosystem","text":"<ul> <li>Website : https://metrixcoin.com</li> <li>MyStakingWallet : https://www.mystakingwallet.com</li> <li>MyNodePool : https://www.mynodepool.com</li> <li>Wage Street Gaming : https://wagestreetgaming.gg</li> </ul>"},{"location":"links/links/#blockchain-resources","title":"Blockchain Resources","text":"<ul> <li>BSC and ETH Bridge : https://swap.metrixcoin.com</li> <li>Mainnet Explorer : https://explorer.metrixcoin.com</li> <li>Testnet Explorer : https://testnet-explorer.metrixcoin.com</li> </ul>"},{"location":"links/links/#wallets","title":"Wallets","text":"<ul> <li>Altitude</li> <li>Core</li> <li>Paper Wallet</li> <li>Lite Web Wallet</li> <li>MetriMask Browser Extension - For tokens and Web3 integration</li> <li>MyStakingWallet - Non-custodial multi-coin web wallet (Paid Service)</li> </ul>"},{"location":"links/links/#social-media","title":"Social Media","text":"<p>Discords :  - Official Metrix Coin - MyStakingWallet (MSW) - Wage Street Gaming (WSG)</p> <p>Telegram :  - Official Metrix Coin</p> <p>Instagram :  - Metrixcoin_Official</p> <p>Facebook :  - Metrix Coin</p>"},{"location":"links/links/#exchanges","title":"Exchanges","text":"<p>Here are the direct links to all exchanges metrix is listed on.</p> <ul> <li>Digifinex</li> <li>P2PB2B</li> <li>crex24</li> <li>Whitebit</li> </ul>"},{"location":"mrc20/about/","title":"About MRC20","text":"<p>MRC20 is the implementation of a standard API for tokens within smart contracts on Metrix\uff0cbasically it is the same as ERC20 and an exact clone of the Qtum implmentation. Methods and Events\uff1a</p> <pre><code>function name() constant returns (string name)\nfunction symbol() constant returns (string symbol)\nfunction decimals() constant returns (uint8 decimals)\nfunction totalSupply() constant returns (uint256 totalSupply)\nfunction balanceOf(address _owner) constant returns (uint256 balance)\nfunction transfer(address _to, uint256 _value) returns (bool success)\nfunction transferFrom(address _from, address _to, uint256 _value) returns (bool success)\nfunction approve(address _spender, uint256 _value) returns (bool success)\nfunction allowance(address _owner, address _spender) constant returns (uint256 remaining)\nevent Transfer(address indexed _from, address indexed _to, uint256 _value)\nevent Approval(address indexed _owner, address indexed _spender, uint256 _value)\n</code></pre>"},{"location":"mrc20/integration/","title":"MRC20 Integration Technical Guide","text":"<p>This document explains the basics of interacting with an MRC20 contract with the <code>metrixd</code> and <code>metrix-cli</code> CLI command tool.</p> <p>Full example from Qtum Qrc20.php</p>"},{"location":"mrc20/integration/#intro","title":"Intro","text":"<p>We recommend that an exchange use one main address to store tokens for all users. Below <code>MAIN_MRC_ADDRESS</code> is the main address.</p> <p>The address of the MRC20 token contract is <code>TOKEN_CONTRACT_ADDRESS</code>.</p> <p>gas limit is <code>DEFAULT_GAS_LIMIT</code>, recommended value is <code>500000</code> gas price is <code>DEFAULT_GAS_PRICE</code>\uff0crecommended value is <code>0.00005000</code> <code>TOKEN_DECIMALS</code> is the decimals of the token, which varies per token. Here we set it <code>8</code>.</p> <p>We'll use the following utility functions:</p> <ul> <li> <p>addressToHash160 - Convert base58 address to hash160 address.</p> </li> <li> <p>to32bytesArg left-pad hex data to 32 bytes with 0.</p> </li> <li> <p>addDecimals multiply the nominal token amount by the number of decimal places.</p> </li> </ul>"},{"location":"mrc20/integration/#running-metrixd","title":"Running METRIXD","text":"<p>You should remember to enable the indexing service when starting metrixd, using the flags <code>-logevents -txindex</code>.</p>"},{"location":"mrc20/integration/#interacting-with-mrc20","title":"Interacting With MRC20","text":"<p>In the CLI examples below, please substitute {} with actual addresses and values.</p>"},{"location":"mrc20/integration/#getting-token-balance","title":"Getting Token Balance","text":"<p><code>$userAddress</code> is the deposit address</p> <pre><code>metrix-cli callcontract \\\n    {TOKEN_CONTRACT_ADDRESS} \\\n    70a08231{to32bytesArg(addressToHash160($userAddress))}\n</code></pre> <p>In the JSON output look for <code>executionResult.output</code>. This is the token balance.</p>"},{"location":"mrc20/integration/#withdraw","title":"Withdraw","text":"<p><code>$userAddress</code> is\b the withdraw address <code>$amount</code> the withdraw amount in unit token</p> <pre><code>metrix-cli sendtocontract \\\n    {TOKEN_CONTRACT_ADDRESS} \\\n    a9059cbb{to32bytesArg(addressToHash160($userAddress))}{to32bytesArg(addDecimals($amount)) \\\n    0 \\\n    {DEFAULT_GAS_LIMIT} \\\n    {DEFAULT_GAS_PRICE} \\\n    {MAIN_MRC_ADDRESS}\n</code></pre> <p>The command returns the txid of this transaction. You may use it to find information about this transaction (e.g. number of confirmations).</p>"},{"location":"mrc20/integration/#generate-a-deposit-address","title":"Generate a deposit address","text":"<p>For an exchange, a user may use the same address for both MRX and other MRC20 tokens.</p> <p>Use this command to generate a deposit address:</p> <pre><code>metrix-cli getnewaddress\n</code></pre>"},{"location":"mrc20/integration/#deposit-and-witdraw-logs","title":"Deposit and Witdraw Logs","text":"<p><code>$startingBlock</code> is where you want to start looking (inclursive) You can start looking from 0, but for better efficiency, you should remember where to start looking.</p> <pre><code>metrix-cli searchlogs \\\n    STARTING_BLOCK \\\n    999999999 \\\n    '{ \"addresses\": [\"TOKEN_CONTRACT_ADDRESS\"]}' \\\n    '{\"topics\": [\"ddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef\"]}'\n</code></pre> <p>The event type filtered is the <code>Transfer</code> event:</p> <pre><code>event Transfer(address indexed _from, address indexed _to, uint256 _value)\n</code></pre> <p>Look through the logs to filter by <code>to</code> or <code>from</code> addresses.</p>"},{"location":"mrc20/integration/#checking-confirmations","title":"Checking Confirmations","text":"<p>Given a transaction id <code>$txid</code>:</p> <pre><code>metrix-cli gettransaction $txid\n</code></pre> <p>Use the property <code>confirmations</code> from output.</p>"},{"location":"mystakingwallet/billing/","title":"MyStakingWallet Billing System","text":""},{"location":"mystakingwallet/billing/#initial-migration-from-paypal","title":"Initial migration from PayPal","text":"<p>This only applies to users created prior to 25th Jan 2022. PayPal billing has been deprecated within MSW.</p> <p>You will no longer be able to add PayPal as a payment option on your account. This will be a mandatory migration for all MSW users and any existing recurring monthly payments via PayPal will be cancelled. Navigating to the Account &gt; Profile section of MSW will now show a billing tab.</p> <p></p> <p>You will see the remaining balance as USD credits since your last PayPal payments.</p> <p></p> <p>To migrate simply click the Migrate Account button. This process will credit your account and also cancel the existing PayPal recurring monthly payments.</p> <p>You will then be presented with the billing screen. Using this you will manage ongoing payments and billing. Rather than an automatic monthly billing cycle, MSW billing will now operate on a credit basis. The same charges for systems will apply, however you can now \u201ctop-up\u201d your account with credits. The credits balance will be consumed at the hourly rate equivalent to the previous monthly costs.</p> <p></p> <p>The new system will accept payment in BTC, ETH &amp; MRX, transactions will be processed by our partner, CoinsPaid, with the funds credited to your MSW account on confirmation. It is advised to set a low balance warning; you will be emailed when your balance reduces to this amount to remind you that top-up is required.</p>"},{"location":"mystakingwallet/billing/#adding-credit","title":"Adding Credit","text":"<p>Adding credit is simply clicking the \u201cAdd Credit\u201d button. Choosing your preferred currency and then completing the payment, to the provided deposit address.</p> <p>Info</p> <p>Note. The credit amount is always calculated in USD. The CoinsPaid service will provide the current market rate conversion of your selected currency.</p> <p> </p> <p>You will then be provided with the CoinsPaid payment screen and 15 minutes with which to send your deposit.</p> <p></p> <p>Once the deposit received and processed the system will credit your account with the deposit amount. You will be emailed on completion of the transaction.</p>"},{"location":"mystakingwallet/billing/#failure-to-top-up","title":"Failure to top-up","text":"<p>Failure to credit your account with sufficient funds will result in the service running at reduced functionality for 7 days. If funds are still not received within the 7 days, then the systems on the account will be deleted.</p> <p>Danger</p> <p>If you DO NOT plan on adding more funds, you should take a backup of the wallet.dat or export your private keys prior to the 7 day functionality restriction.</p>"},{"location":"mystakingwallet/billing/#ending-your-msw-service","title":"Ending your MSW service","text":"<p>If you do not wish to migrate to the new system or want to cancel your MSW service, simply delete the servers from within your account. </p> <ul> <li>PayPal: PayPal users ongoing monthly deductions will be stopped at the point of deletion.</li> <li>CoinsPaid: Any remaining funds in the account deposited via the CoinsPaid service will be forfeited. It\u2019s recommended to end your services when funds are low or have been used.</li> </ul>"},{"location":"mystakingwallet/recover-deleted-wallets/","title":"MyStakingWallet - Recover Deleted Wallet","text":""},{"location":"mystakingwallet/recover-deleted-wallets/#how-to-download-deleted-wallets","title":"How to download deleted wallets","text":"<ol> <li> <p>Login to MyStakingWallet using you usual username and password.</p> </li> <li> <p>Navigate to the Account Profile tab.  </p> <p> </p> </li> <li> <p>Select the profile tab if not already selected.  </p> <p> </p> </li> <li> <p>Scroll to the bottom of the profile page to find the deleted wallets button.  </p> <p> </p> </li> <li> <p>Clicking this button will download your wallets to your local machine in zip format. The wallet.dat files within this zip will still be encrypted with your passphrase as used on MSW. These files can now be restored into your wallet of choice.  </p> </li> </ol> <p>Info</p> <p>If you require additional support please contact the Metrixcoin team in the Discord.</p>"},{"location":"troubleshooting/macos-manual-core/","title":"MacOS Manual Core Install","text":"<p>The below document details the steps to manually apply the Metrix core daemon to an Altitude installation. This is normally required on newer OSX installations due to heightened security measures by Apple with regards to running unverified executables.</p> <p>Note</p> <p>This process may be required on both existing installations and new Altitude installtions.</p> <ol> <li> <p>First download the latest core release from Metrix Core for Windows, Linux &amp; Mac for MacOS you will only need the metrix-darwin-x64.tar.gz, once downloaded this will appear in your downloads directory.</p> <p></p> </li> <li> <p>Double click to extract this into the Downloads directory. Select and copy the metrixd file from the directory.</p> <p></p> </li> <li> <p>Access the hidden Library folder. In the Finder, hold down the Option key when using the Go menu. Library will appear below the current user's home directory.</p> <p></p> </li> <li> <p>Open Application Support</p> <p></p> </li> <li> <p>Open altitude-metrix-wallet</p> <p></p> </li> <li> <p>Open clients</p> <p></p> </li> <li> <p>Paste the metrixd file copied earlier into this directory.</p> <p></p> </li> <li> <p>You can now exit Altitude and relaunch it. The wallet should successfully open and sync. If you get the following error continue with the below steps (Most new OSX installs may get this).</p> <p></p> </li> <li> <p>Open System Preferences or System Settings on new installations.</p> <p></p> </li> <li> <p>Click Security and Privacy</p> <p></p> </li> <li> <p>Click the padlock to allow changes and then Allow Anyway the metrixd application to be launched. (If metrixd does not appear here, try launching Altitude first, its should appear in here for up to 1 hour after unsuccessful launch)</p> <p></p> </li> </ol> <p>Altitude can now be launched and the wallet should run. You may get an additional prompt to open the metrixd, however once this has been opened once it should not prompt in future launches for this version.</p> <p>Support</p> <p>Should you require additional support during this process, or continue to have launch issues after completing this, please log a support ticket on the Metrix Discord server</p>"}]}